<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>老逸的个人站</title><link href="/" rel="alternate"></link><link href="http://www.scutlaoyi.tk/feeds/tools.atom.xml" rel="self"></link><id>/</id><updated>2014-07-18T14:30:00+08:00</updated><entry><title>每页一句大集合</title><link href="/mei-ye-yi-ju-da-ji-he.html" rel="alternate"></link><updated>2014-07-18T14:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-07-18:mei-ye-yi-ju-da-ji-he.html</id><summary type="html">
    &lt;p&gt;这篇博文用于展示博主收藏的所有经典句子，点击下方载入按钮后出现。&lt;/p&gt;
    &lt;button id="load_button" onclick="loadAllSentences()"&gt;载入&lt;/button&gt;
    &lt;div id="sentences_div"&gt;
    &lt;/div&gt;

    &lt;script&gt;
      function listAllItemFromArray(item_array)
      {
        var index;
        
        var content_div = document.getElementById("sentences_div");

        var list_node = document.createElement("ul");
        for(index = 0; index &lt; item_array.length; ++index)
        {
          var new_elem = document.createElement("li");
          new_elem.innerHTML = item_array[index];
          list_node.insertBefore(new_elem, null);
        }
        content_div.insertBefore(list_node, null);
        return;
      }

      function loadAllSentences()
      {
        listAllItemFromArray(sentences);
        var load_button_ = document.getElementById("load_button");
        load_button.style.visibility = "hidden";
        return;
      }
    &lt;/script&gt;
  </summary><category term="page sentences"></category></entry><entry><title>Vim经验记录(二):寄存器的相关知识</title><link href="/VimExperience002-registers.html" rel="alternate"></link><updated>2014-03-15T16:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-03-15:VimExperience002-registers.html</id><summary type="html">&lt;p&gt;本文参考一下博文：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://blog.sanctum.geek.nz/advanced-vim-registers/"&gt;http://blog.sanctum.geek.nz/advanced-vim-registers/&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;基本功能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;概念及基本用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vim的寄存器基本功能是个剪贴板，
在寄存器中可以保存文本内容，
更强悍的是可以保存命令记录，
俗称宏记录。&lt;/p&gt;
&lt;p&gt;寄存器有多款，
最简单的是命名寄存器，
键盘上的26个字母可以指向26个不同的命名寄存器。&lt;/p&gt;
&lt;p&gt;在一般模式下通过单个双引号调用寄存器。
双引号后接寄存器名称，
最后是文本操作命令。&lt;/p&gt;
&lt;p&gt;用例子解释最简单：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
将当前文本行复制到a寄存器中：
    &amp;quot;ayy
将b寄存器中的内容粘贴到当前光标处：
    &amp;quot;bp
&lt;/pre&gt;
&lt;p&gt;一目了然，
通过更换其他各种命令自然就能实现多种功能了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看所有非空寄存器的状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一般模式下敲以下命令：&lt;/p&gt;
&lt;blockquote&gt;
:reg&lt;/blockquote&gt;
&lt;p&gt;可以看到当前所有非空寄存器的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;宏录制与使用&lt;/h2&gt;
&lt;p&gt;这里说的宏是指一系列操作的集合。
Vim中的寄存器也可用于录制用户的宏，
再非常方便的重放，
达到快速完成一系列指令的功能。&lt;/p&gt;
&lt;p&gt;录制宏的操作非常简单，
首先通过q命令进入宏录制模式，
q后接寄存器的名称，比如a。&lt;/p&gt;
&lt;blockquote&gt;
qa&lt;/blockquote&gt;
&lt;p&gt;接着就可以随意操作当前文本了，
你的一举一动Vim都会记录下来并保存到寄存器中。&lt;/p&gt;
&lt;p&gt;最后(记得退出到一般模式中)再按一次q退出宏录制模式。&lt;/p&gt;
&lt;blockquote&gt;
q&lt;/blockquote&gt;
&lt;p&gt;重放宏直接在一般模式下用&amp;#64;关键字加寄存器名称：&lt;/p&gt;
&lt;blockquote&gt;
&amp;#64;a&lt;/blockquote&gt;
&lt;p&gt;录制的操作便会自动重放一遍。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;寄存器的追加操作&lt;/h2&gt;
&lt;p&gt;在默认情况下复制等操作会覆盖掉寄存器中原有的内容，
如果想要在原有内容上追加新的内容，
可将对应名称的寄存器改为大写：&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Ayy&lt;/blockquote&gt;
&lt;p&gt;上面这句将当前行内容追加到a寄存器的末尾。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;匿名寄存器&lt;/h2&gt;
&lt;p&gt;可能用的最多的是Vim的匿名寄存器了。&lt;/p&gt;
&lt;p&gt;在平常的使用过程中，
默认的复制、剪切等操作都会将选定的内容填充到匿名寄存器中：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
yy: 复制当前行
dd: 剪切当前行
4dd: 剪切四行
&lt;/pre&gt;
&lt;p&gt;所谓的匿名寄存器实际上是名称为双引号的寄存器，
通过查看:reg可以看到当前的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;黑洞寄存器&lt;/h2&gt;
&lt;p&gt;博主不知道怎么翻译，
就随便这样命名了。&lt;/p&gt;
&lt;p&gt;这货就像黑洞一样，
往里面添加任意的内容都会被清空，
就如同Linux中的/dev/null一样。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题外话，
在Linux下，
可以尝试echo一些东西并且重定向到/dev/null中，
那么命令会被执行，
结果输出到/dev/null中，
然后就没有然后了。&lt;/p&gt;
&lt;p&gt;用于处理某些不需要的输出非常有效，
比如将无聊的编译出错信息重定向到那里去，
就不会有恼人的错误信息了。
(-_-)&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;g++ 2&amp;gt;/dev/null&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该寄存器为 _ ，
如果需要剪切特定的行并且不想让其污染匿名寄存器，
可以这样：&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;_dd&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;数字寄存器&lt;/h2&gt;
&lt;p&gt;名称是从0到9的十个寄存器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复制寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;寄存器0保存了最近复制的内容，
因此复制操作会更新0号寄存器，
但是剪切的内容不会被写到0号寄存器中。&lt;/p&gt;
&lt;p&gt;在某些情况下这货非常有用，
比如复制了一坨东西，
跑去别的地方剪切了一些东西，
这时候想要粘贴刚才复制的东西，
会发现直接p的话剪切的东西就出来了。&lt;/p&gt;
&lt;p&gt;这个时候一种解决方案是使用黑洞剪切不需要的内容;
而如果一时手快忘记使用黑洞了，
不要紧，
刚刚复制的东西在0里面，
因此这样就可以粘贴了：&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;0p&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;剪切寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其他的数字寄存器与0号类似，
不过保存的是最近剪切的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;最近插入内容寄存器&lt;/h2&gt;
&lt;p&gt;名称： .&lt;/p&gt;
&lt;p&gt;当从一般模式进入插入模式并敲了一些东西后，
返回一般模式，
最近敲的这坨东西会被保存到.寄存器中。&lt;/p&gt;
&lt;p&gt;不过再次输入同样内容不需要用以下命令：&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;.p&lt;/blockquote&gt;
&lt;p&gt;虽然是可行的。&lt;/p&gt;
&lt;p&gt;直接在一般模式下敲.重复最近一次的命令即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;文件名寄存器&lt;/h2&gt;
&lt;p&gt;名称： %&lt;/p&gt;
&lt;p&gt;简单，保存了文件名。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;学习一下Vim的寄存器还是非常有用的，
可以快速执行非常多的操作。&lt;/p&gt;
&lt;p&gt;这里没有提到的关于系统剪贴板的若干寄存器，
可参考上一篇博文的内容。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Vim"></category></entry><entry><title>Vim经验记录(一):与系统共享剪贴板</title><link href="/VimExperience001.html" rel="alternate"></link><updated>2014-02-13T12:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-02-13:VimExperience001.html</id><summary type="html">&lt;p&gt;这几天玩剪贴板搞得灰头土脸，
幸好现在终于找到最佳的解决方案了，
虽然好用，方法还是有点猥琐。&lt;/p&gt;
&lt;p&gt;博主主要的目的在于多个Vim之间可以共享剪贴板。
写博文的时候，
像上一篇博文中就有非常多的代码片段，
因此需要快捷的复制粘贴操作。&lt;/p&gt;
&lt;p&gt;目标：&lt;/p&gt;
&lt;blockquote&gt;
找到一种方法方便快速地访问系统剪贴板，
使Vim支持从系统剪贴板中复制粘贴数据，
通过系统剪贴板快捷地与其他应用程序交换数据，
如Firefox中网页的某些文本框，
或者与其他Vim进程交换数据。&lt;/blockquote&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OS: Arch Linux(x64)
Window Manager: X11
DesktopEnvironment: LXDE
Package Manager: Pacman
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;鼠标解法&lt;/h2&gt;
&lt;p&gt;最初遇到这个问题时想到了上学期在工作室的Ubuntu系统，
通过配置标神找到的vimrc文件，
可以直接支持鼠标点击、鼠标选择、右键复制粘贴甚至是滚轮翻页。&lt;/p&gt;
&lt;p&gt;不知道是因为桌面环境不一样还是系统问题，
原有的配置文件在Arch Linux加LXDE的环境里会导致Vim出错。&lt;/p&gt;
&lt;p&gt;重新配置了vimrc使现在的Vim支持原有的大部分功能，
然而鼠标的功能还是没有以前那么强悍了。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set mouse=a         &amp;quot; Enable the use of the mouse.
set selection=exclusive
set selectmode=mouse,key
set nocompatible    &amp;quot; No vi mode
&lt;/pre&gt;
&lt;p&gt;上面的配置语句让Vim支持鼠标选择及滚轮翻页，
然而当想使用右键复制的时候却会发现复制是没有效果的。&lt;/p&gt;
&lt;p&gt;当然这还是一部分解决了粘贴问题，
首先从别的地方复制，
切换到Vim把光标移动到需要粘贴的地方，
进入插入(insert)模式，
这个时候鼠标点右键并粘贴，
东西就进去了。&lt;/p&gt;
&lt;p&gt;但这样还是会有问题，
如果给Vim设定了自动括号补全一类的功能，
粘贴的过程中Vim也会画蛇添足地给粘贴的内容再补全一遍，
如果刚好粘贴的是代码一类的东西，带很多括号，
粘贴完成后需要手动处理多出来的内容。&lt;/p&gt;
&lt;p&gt;而且也太不雅观了。&lt;/p&gt;
&lt;p&gt;这个问题其实在之前Ubuntu中也出现过，
于是博主上Google寻找更加优雅的解决方案。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;寄存器解法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Vim之间的共享数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stack Overflow上的更优方案是使用Vim的寄存器。
首先在vimrc里加入一行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set clipboard=unnamed
&lt;/pre&gt;
&lt;p&gt;这句将Vim的系统剪贴板指定到匿名寄存器中。&lt;/p&gt;
&lt;p&gt;这样多个Vim之间便可以共享匿名寄存器的数据了，
直接在某个Vim进程中复制（例如yy）一段文本，
在另外的Vim中直接粘贴（p）即可搞定。&lt;/p&gt;
&lt;p&gt;但是这并不是共享操作系统的剪贴板，
因此通过鼠标在其他程序中复制的文本用这种方法无法粘贴，
同时在Vim中复制出来的文本也没有办法共享到其他的程序中去。&lt;/p&gt;
&lt;p&gt;因此需要更加生猛的直接控制操作系统剪贴板的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与其他程序的共享剪贴板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实也非常简单，
Vim的一个特定的寄存器与系统的剪贴板是联动的，
在X11中是加号（+）寄存器。&lt;/p&gt;
&lt;p&gt;因此复制当前行到操作系统的剪贴板中可以这样：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;+yy
&lt;/pre&gt;
&lt;p&gt;然后在其他地方（如Firefox）直接粘贴即可。&lt;/p&gt;
&lt;p&gt;同样，
粘贴到Vim里面去也可以通过操作对应寄存器搞定：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;+p
&lt;/pre&gt;
&lt;p&gt;博主被卡了两天的地方在于，
资料都是这样的解决方案，
博主自己实现的时候却发现一直没有效果。&lt;/p&gt;
&lt;p&gt;最终了解到，vi、vim、gvim是三款不一样的东西。&lt;/p&gt;
&lt;p&gt;只有部分vim的版本是支持桌面环境的剪贴板的，
据称Ubuntu的Gnome环境下有vim-gnome及vim-gtk支持这种操作，
特别注意的是，默认的Vim是不行的...&lt;/p&gt;
&lt;p&gt;Arch就更不用说了，
连make都没有，哈哈～&lt;/p&gt;
&lt;p&gt;解决方案有俩，
一个是装vim-X11 的包，
一个是直接装gvim。&lt;/p&gt;
&lt;p&gt;由于博主已经安装了gvim，
内置了vim-X11包，
因此没法测试直接安装上述的包是否能解决问题。&lt;/p&gt;
&lt;p&gt;不过可以肯定的是，
用gvim可以非常完美的支持剪贴板。&lt;/p&gt;
&lt;p&gt;安装完gvim之后继续像原来一样使用Vim，
gvim会提供给Vim一些强化的功能，
包括剪贴板。&lt;/p&gt;
&lt;p&gt;查看当前Vim是否支持剪贴板可以在终端里敲这个：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vim --version | grep clipboard
&lt;/pre&gt;
&lt;p&gt;如果有&amp;quot;+xterm_clipboard&amp;quot;说明支持，
如果是&amp;quot;-xterm_clipboard&amp;quot;说明不行。&lt;/p&gt;
&lt;p&gt;剪贴板问题就到此为止了，
下一次记录一下寄存器的一些东西。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Vim"></category></entry><entry><title>md5 generator</title><link href="/md5-generator.html" rel="alternate"></link><updated>2014-02-04T11:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-02-04:md5-generator.html</id><summary type="html">
        &lt;p&gt;一个非常好用的md5散列计算工具&lt;/p&gt;
        &lt;p&gt;从网上搜刮的一个JavaScript实现的md5算法，许可协议为BSD License。URL在这里：
        &lt;a href="http://pajhome.org.uk/crypt/md5/index.html"&gt;JavaScript md5&lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;恢复函数是博主用JavaScript做的，倒计时十秒。&lt;/p&gt;
        &lt;br /&gt;
        &lt;input type="password" id="strInput"&gt;&lt;/input&gt;
        &lt;br /&gt;
        &lt;button onclick="getHash()"&gt;Hash dear, hash!&lt;/button&gt;
        &lt;br /&gt;
        &lt;h4 id="resultlabel"&gt;No result yet.&lt;/h4&gt;
        &lt;h4 id="timerlabel"&gt;&lt;/h4&gt;
        &lt;br /&gt;

    &lt;script src="add_ons/md5-min.js"&gt;&lt;/script&gt;
    &lt;script&gt;
        var TIMEOUT = 10;// ten seconds.
        var md5timer;
        var timerlabel = document.getElementById("timerlabel");
        var resultlabel =document.getElementById("resultlabel"); 

        function cleartimer()
        {
            clearInterval(md5timer);
            resultlabel.innerHTML="No result yet.";
            timerlabel.innerHTML="Timer stop.";
        }

        function settimeout()
        {
            var timecounter = 0;
            md5timer = setInterval(function(){
                    timecounter += 1;
                    timerlabel.innerHTML = ("time remaining:"+
                        (TIMEOUT-timecounter)+
                        " second(s)");
                    if(timecounter &gt; TIMEOUT)
                        cleartimer();
                    }, 1000);
        }
            
        function getHash()
        {
            var source = document.getElementById("strInput");
            var result = hex_md5(source.value);
            resultlabel.innerHTML = result;
            settimeout();
        }
    &lt;/script&gt;
    </summary><category term="md5"></category></entry></feed>