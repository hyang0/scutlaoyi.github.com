<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>老逸的个人站</title><link href="/" rel="alternate"></link><link href="http://www.scutlaoyi.tk/feeds/all-en.atom.xml" rel="self"></link><id>/</id><updated>2014-07-18T14:30:00+08:00</updated><entry><title>每页一句大集合</title><link href="/mei-ye-ju-da-ji-he.html" rel="alternate"></link><updated>2014-07-18T14:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-07-18:mei-ye-ju-da-ji-he.html</id><summary type="html">
    &lt;p&gt;这篇博文用于展示博主收藏的所有经典句子，点击下方载入按钮后出现。&lt;/p&gt;
    &lt;button id="load_button" onclick="loadAllSentences()"&gt;载入&lt;/button&gt;
    &lt;div id="sentences_div"&gt;
    &lt;/div&gt;

    &lt;script&gt;
      function listAllItemFromArrayWithTitle(item_array, title)
      {
        var index;
        
        var content_div = document.getElementById("sentences_div");

        var title_element = document.createElement("p");
        title_element.innerHTML = title;
        content_div.insertBefore(title_element, null);

        var list_node = document.createElement("ul");
        for(index = 0; index &lt; item_array.length; ++index)
        {
          var new_elem = document.createElement("li");
          new_elem.innerHTML = item_array[index];
          list_node.insertBefore(new_elem, null);
        }
        content_div.insertBefore(list_node, null);
        return;
      }

      function loadAllSentences()
      {
        listAllItemFromArrayWithTitle(sentences[0], "Coding相关");
        listAllItemFromArrayWithTitle(sentences[1], "生活相关");
        var load_button_ = document.getElementById("load_button");
        load_button.style.visibility = "hidden";
        return;
      }
    &lt;/script&gt;
  </summary><category term="page sentences"></category></entry><entry><title>一些好用web工具的记录</title><link href="/webTool001-simple-powerful.html" rel="alternate"></link><updated>2014-07-16T10:00:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-07-16:webTool001-simple-powerful.html</id><summary type="html">&lt;p&gt;最近找到了许多好用的Web工具，在此记录一下使用心得。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;爬墙类&lt;/h2&gt;
&lt;p&gt;几年前，
詹神曾经在班级邮件里说过，
“作为程序员，翻墙应该是基本技能”。
这句话我一直印象很深。&lt;/p&gt;
&lt;p&gt;当时的自己年少无知，
对爬墙技术的了解也不深，
但随着对Google依赖的不断深化，
搜文档、找工具、查资料，
加上许多信息工具的应用，
这才越来越体会到这句话的深刻含义。&lt;/p&gt;
&lt;p&gt;爬墙的一个原则是不要在一棵树上吊死，
这句是在某知名博主的博客上看到的，
永远要留有备用的手段。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;goagent&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这货连接的是Google的服务器，
凭借限定流量免费的Google App Engine服务，
热心的技术人员开发出了一套转发代理的工具，
是最近一段时间比较稳定的爬墙方式。&lt;/p&gt;
&lt;p&gt;自己搭建服务器的话需要注册一个GAE的账户，
建立一个新的App，
然后把服务器端给传上去。&lt;/p&gt;
&lt;p&gt;本地的客户端通过指定AppID连接服务器端，
把本地的网络请求转发给服务器，
由服务器代理处理页面并返回结果。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;安全问题&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;月光博客之前曾经谈过这货的安全性问题，
由于CA证书是伪造的，
而且默认的CA证书是公开的，
因此非常容易被中间人攻击。&lt;/p&gt;
&lt;p&gt;解决的方案是把目录下的默认CA.crt删掉，
让GoAgent启动时自行生成新的唯一证书，
相当于私有的证书。
然后再把这个新的CA导入到系统的证书信任里。&lt;/p&gt;
&lt;p&gt;此外，
最好开启服务器端的验证，
在配置文件里把validate开启。&lt;/p&gt;
&lt;p&gt;但不管怎样优化也不能让这货有比较好的安全性，
GAE在转发用户请求的时候会把AppID也写入到User Agent里面去，
这非常容易暴露用户的身份。&lt;/p&gt;
&lt;p&gt;而且这货是Http代理。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;一些优化&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;这货说到底都是通过Google的服务器进行代理转发，
因此存在的一个单点故障就是Google的服务器被墙。
然后...
最近真的Google服务器被墙...
因此最近一段时间GAE系列的工具都存在连接失败的问题。&lt;/p&gt;
&lt;p&gt;经过热心网友的仔细分析，
发现墙的工作原理是干掉那些连接比较多的IP段，
听说由于Google在全球范围的IP有几十万个，
因此现有的技术貌似没有办法将所有IP全部墙死。&lt;/p&gt;
&lt;p&gt;在Google被针对性IP封锁之后，
有好心人造出了许多用于检测IP是否可用的工具，
例如最近比较好用的GoGoTester。&lt;/p&gt;
&lt;p&gt;Linux系列系统也有Python版本的IP检测工具可用，
实在不行就自己写一个。&lt;/p&gt;
&lt;p&gt;方法其实也很简单，
基本上是把Google的全球IP作为列表导入，
然后暴力一个个ping一下测试能否连接。&lt;/p&gt;
&lt;p&gt;检测到可用的IP后写入到proxy.ini的配置里面即可。&lt;/p&gt;
&lt;p&gt;通过自定义的IP列表可以保持稳定的Google服务器连接。&lt;/p&gt;
&lt;p&gt;此外，
使用最新版本的Chrome浏览器并且开启实验性质的QUIC协议，
可以更大幅度提高与Google的连接稳定性和速度。
当然Firefox就没得搞，可惜了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VPN Gate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Windows下用这货还是比较方便的。&lt;/p&gt;
&lt;p&gt;这货的好处是代理服务器都是分布式的，
不存在像GAE系那种单点故障，
一个服务器挂掉只需要更换一个新的服务器即可。&lt;/p&gt;
&lt;p&gt;但是不爽的地方在于使用这货经常需要一些运气，
在长长的列表里面找到能用的服务器有时候也挺麻烦。&lt;/p&gt;
&lt;p&gt;经过一段时间的使用总结了以下的经验（有些是别人教的）：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
0、要经常使用让它获取最新的服务器列表，即使不连接服务器保持其运行也行；
1、尝试连接超过五秒未完成的直接切换下一个，因为即使连接上也基本不可用；
2、连接成功后在首页里右键服务器点击“查看状态”，查看“输入数据量”一栏，一边打开浏览器访问Google，如果那个数值几秒内都没有变化，那就是被墙了，不用等直接换下一个；
3、可以在官网订阅更新邮件让自己随时能获取到最新版本的软件；
&lt;/pre&gt;
&lt;p&gt;不知道是不是博主运气不好，
保存的连接下次都基本都不能用，
因此每次都直接找新的服务器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;shadowsocks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;神器，
全平台支持。&lt;/p&gt;
&lt;p&gt;Linux和Windows下都非常简便快捷，
Android下比fqrouter占用资源小很多，
也比较稳定。&lt;/p&gt;
&lt;p&gt;不爽的是需要自己搞到帐号，
可以去网上买，
一般一年一两百块钱就能买到共用的帐号。&lt;/p&gt;
&lt;p&gt;也可以土豪自己租个外国服务器，
架个服务端自己用。
Digital Ocean的服务器听说比较好，
一个月几十美刀。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;辅助类&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;HTTPS Everywhere&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这货是浏览器的拓展，
可以让支持HTTPS连接的网站全部强制启用https。&lt;/p&gt;
&lt;p&gt;以前Google很多服务还是被简单封锁http的时候，
使用https可以方便的访问google code等服务。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DNSCrypt&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OpenDNS的一个项目，
为本地DNS请求执行DNS转发。&lt;/p&gt;
&lt;p&gt;众所周知的是有一种东西叫做DNS污染，
例如默认情况下跑一下这个&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nslookup twitter.com
&lt;/pre&gt;
&lt;p&gt;会发现twitter的DNS解析被指向一个莫名其妙的IP上面去。&lt;/p&gt;
&lt;p&gt;用DNSCrypt可以将所有DNS请求通过加密的443端口发送到openDNS进行解析，
防止被DNS污染。&lt;/p&gt;
&lt;p&gt;Windows下直接安装启动即可。&lt;/p&gt;
&lt;p&gt;Linux下可以参考这个进行安装和启动：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://dnscrypt.org"&gt;http://dnscrypt.org&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;居然官网也被墙了...&lt;/p&gt;
&lt;p&gt;DNS解析要更改为127.0.0.1，
默认的端口是53。&lt;/p&gt;
&lt;p&gt;由于权限限制，
在Linux下DNSCrypt没有办法直接绑定53号端口，
博主的解决方案是setcap。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
setcap cap_net_bind_service=ep dnscrypt-proxy
&lt;/pre&gt;
&lt;p&gt;这样dnscrypt就拥有了绑定1024以下端口的能力。&lt;/p&gt;
&lt;p&gt;然后需要更改/etc/resolv.conf，加一行：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
nameserver 127.0.0.1
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Adblock Plus&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;神器！
干掉超级多的网站广告，
同时可以过滤掉一些跟踪。&lt;/p&gt;
&lt;p&gt;作为浏览器的扩展，
用起来很爽就是了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Startpage&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Google搜索的匿名版，
在Google行情不好的时候这货一直没有被墙，
使用安全方便。&lt;/p&gt;
&lt;p&gt;更神奇的是startpage的lxquick代理浏览，
相当于Google的网页快照，
然后..
可以随便打开每一个搜索结果页，
不管它有没有被墙！
网页代理了感觉是。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="web tool"></category></entry><entry><title>玩转莱特币：使用CPUMiner和proxy挖矿的办法</title><link href="/litecoin002-mining.html" rel="alternate"></link><updated>2014-06-16T10:00:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-06-16:litecoin002-mining.html</id><summary type="html">&lt;p&gt;挖矿分为两种，
简单暴力的直接挖矿，
以及加入矿池进行合体挖矿。&lt;/p&gt;
&lt;p&gt;由于现在的全网算力已经超乎想象(博主玩的时候大概为300GH/s)，
没有专用矿机只能选择矿池挖矿。&lt;/p&gt;
&lt;p&gt;由于博主以娱乐为主，
没有钱和精力购买高速专用矿机，
甚至没有好的显卡拿来用GPU挖矿，
因此使用的是简单的CPU挖矿方式(10KH/s......)。&lt;/p&gt;
&lt;p&gt;如果正儿八经的想赚点钱，
推荐至少要弄个好的显卡用GPU挖矿。&lt;/p&gt;
&lt;p&gt;在网上有一些算力的统计表，
AMD系列的显卡跑GPU挖矿一般可以达到100KH/s以上。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;矿池的选择&lt;/h2&gt;
&lt;p&gt;由于博主用的是大陆的局域网，
选择矿池显得比较困难。&lt;/p&gt;
&lt;p&gt;首先需要排除掉那些没什么人的矿池，
听说没什么人的矿池由于全池算力都很差，
因此找到新块的几率非常低，
进而导致每个矿工分到的收益也很小。&lt;/p&gt;
&lt;p&gt;此外，
由于网络的问题，
需要选择能够稳定连接的矿池，
否则经常断线就只能白白消耗电能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在的矿池基本上都支持stratum协议，
这种协议本质上是建立一个代理服务器中转矿机和目标服务器的连接，
由于有了这种类似于buffer的协议层，
相比最初的getwork方式直连，
不仅网络的带宽占用变小，
连接的稳定性等各方面也有较好的提升。&lt;/p&gt;
&lt;p&gt;许多矿池甚至强制性使用stratum协议，
例如coinotron。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;矿池的选择可以参考莱特币的info页面：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://litecoin.info/Mining_pool_comparison
&lt;/pre&gt;
&lt;p&gt;选择好矿池后，
在网站里注册一个新的用户，
4位的PIN码非常重要，
各种操作都需要PIN码。
有些矿池支持Google的身份验证器，
推荐开启。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不过很多矿池不支持更换验证器，
而且没有备选的身份识别方案，
导致一旦验证器失效就无法控制账户了。&lt;/p&gt;
&lt;p&gt;博主刚好手机换系统，
结果验证器就失效了，
wemineLTC网站的账户控制丢失...&lt;/p&gt;
&lt;p&gt;也好，
wemineLTC的算力现在处在危险的垄断地位，
不推荐大家加入wemineLTC矿池中，
防止51%攻击。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后添加几个新的矿工，
由于矿工只是用于识别，
没有什么安全性危机（不会有人偷矿工，因为工作量算在矿工头上），
因此可以随意设置名称和密码（密码甚至都是明文..）。&lt;/p&gt;
&lt;p&gt;虽然很多矿池支持多个矿机使用同一个矿工帐号，
但是不推荐使用，
因为超过一定数量后可能会被识别为机器人，
机器人帐号会被踢出矿池，
博主猜测此举是为了阻止坏人制作病毒传播用别人的机器挖矿。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;挖矿回报类型的选择&lt;/h2&gt;
&lt;p&gt;矿工和矿池之间是合作的关系，
挖出来的矿根据何种协议进行划分就相当重要了。&lt;/p&gt;
&lt;p&gt;常见的回报有PPS和PPLNS，
以及其他多种细碎的类型。
由于博主只体验过这两种，
因此仅对他们做简单介绍，
详细情况依然可以查看莱特币的info页面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PPS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单说来PPS是指矿工的每一次有效的挖掘都计算到工作量中去，
这种方式不会受到矿池整体情况的影响，
只要有工作量，
就可以直接兑换为莱特币。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这种协议对矿池来说危险系数比较高，
假设矿池寻找新区块的几率很大，
那么没有问题大家都有钱拿。
然而如果矿池不景气，
运气不好连续很长时间都没有找到区块，
那么矿池就可能会亏本，
因为矿工的薪水仍然需要分发。&lt;/p&gt;
&lt;p&gt;因此使用这种协议一般矿池会收取比较高的费率，
通常在2%左右，
作为维持矿池运转的手段。&lt;/p&gt;
&lt;p&gt;但对于小型的散户来说，
使用PPS的话风险比较低，
因为只要矿工一直在运行，
就一直能够获得收益。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;PPLNS&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这种协议与上面的刚好相反，
矿工按照工作量在矿池的比重进行收益计算，
而不是工作量的净值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同样假设矿池效率高，
一天找到一大堆新的块，
那么就捞到了大把的莱特币，
每个矿工根据在挖矿过程中自己工作量占矿池总工作量的比值得到相应的莱特币。
大家都分到很多钱。&lt;/p&gt;
&lt;p&gt;然而如果矿池几天才捞到一个新块，
那么矿工同样拿这个新块的收益按比值划分收益，
每个矿工能够得到的钱就非常少了。&lt;/p&gt;
&lt;p&gt;这种方案的好处是矿池比较保险，
不需要承担由于运气不好带来的损失。
因此PPLNS的收费也会相应的降低。&lt;/p&gt;
&lt;p&gt;然而对于矿工来说，
运气成分也占据了一部分，
因此PPLNS不太适合博主这种闹着玩的人，
有可能几天都捞不到半毛莱特币。
哦，不对，
半毛莱特币值五十美分，
因为现在的汇率是LTC:USD = 1:11，
还是挺多的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博主选择的是PPS协议，
虽然手续费什么的比较高，
但看着自己账户的金额一点一点往上涨还是很有成就感的，
相比之下，
前期使用PPLNS跑过一个晚上，
结果账户金额一直没有动静，
玩得很不爽。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;安装工具&lt;/h2&gt;
&lt;p&gt;博主的系统是Linux系，
因此以下的内容都以Linux为目标。
但CPU挖矿感觉两个平台的操作基本相同。&lt;/p&gt;
&lt;p&gt;基本套路是装两个程序，
一个是stratum-proxy代理程序，
一个是cpuminer挖矿主程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;矿机下载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先下载cpuminer:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
http://sourceforge.net/projects/cpuminer/files/?source=navbar
&lt;/pre&gt;
&lt;p&gt;不知道为什么2.4版本在博主的系统上跑有问题，
一直无法连接，
而选择2.2.3版本则运行良好。
各位读者可自行尝试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;proxy下载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;下载stratum-proxy:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://github.com/bandroidx/stratum-mining-proxy
&lt;/pre&gt;
&lt;p&gt;按照教程直接安装即可，
教程就在readme文件里面。&lt;/p&gt;
&lt;p&gt;记得跑一遍midstate文件夹里的make，
可以大幅提高速度和稳定性，
没有搞这个的时候十几分钟就会固定断线一次，
而且很恶心的无法重连。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;补充安装的service_identity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;博主启动代理服务器的时候会有一个Warning，
显示缺少service_identity的组件，
虽然仍然能够正常使用，
但后来也安装了这个组件：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
https://pypi.python.org/pypi/service_identity
&lt;/pre&gt;
&lt;p&gt;首先下载源码，
解压到任意目录并用终端进入，
然后执行python setup.py install，
可能需要root权限，
等待跑完即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;启动挖矿&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;proxy的启动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先需要启动proxy，
在proxy的目录下敲：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./mining_proxy.py -pa scrypt -o server_url -p server_port
&lt;/pre&gt;
&lt;p&gt;第一个参数指定了算法类型，
听说除了比特币以外所有电子货币都是使用scrypt算法。
不添加这个参数也是可以正常启动的，
矿机也跑得很欢快，
cpu占用也是满的，
但是网站的监测显示算力一直为零...&lt;/p&gt;
&lt;p&gt;server_url为矿池服务器的地址，
server_port为矿池服务器的端口，
这些可以在矿池的网站里面找到，
注意端口要与对应的币种相同，
比如挖莱特币的别跑到狗币的端口去。&lt;/p&gt;
&lt;p&gt;proxy的设置主要是与矿池服务器的连接，
一切正常的话会有一堆输出，
这样保持proxy持续运行即可，
另外要注意观察有没有ERROR。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;miner的启动&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果没有更改proxy的端口的话，
proxy的本地端口应该为8332，
因此可以在miner目录下通过下述的命令启动矿机：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
./minerd -a scrypt -o http://127.0.0.1:8332 -O username:password -t 4 -s 6
&lt;/pre&gt;
&lt;p&gt;同样指定算法为scrypt，
连接localhost的8332端口，
其中username为矿工帐号，password为密码。
这里需要注意的是username一般为以下格式：&amp;quot;网站注册名.矿工名&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正常情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一切正常，
则miderd窗口会间断打出状态信息，
一般为如下格式：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[2014-06-08 23:40:38] thread 1: 41964 hashes, 5.76 khash/s
[2014-06-08 23:40:38] accepted: 23/23 (100.00%), 22.98 khash/s (yay!!!)
[2014-06-08 23:41:31] thread 3: 343092 hashes, 5.74 khash/s
[2014-06-08 23:41:31] thread 2: 343416 hashes, 5.73 khash/s
&lt;/pre&gt;
&lt;p&gt;前面的是日期时间，
然后是线程编号，
后面是具体的速率和哈希块什么的。&lt;/p&gt;
&lt;p&gt;一段时间后应该有如上第二行的内容，
accepted表明工作成功，
最容易辨认的是那个&amp;quot;yay!!!&amp;quot;。
这说明你的矿机已经挖到东西了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;异常情况&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;连接失败什么的矿机会在一定时间内自动重试，
默认好像是十五秒。&lt;/p&gt;
&lt;p&gt;另外如果连接成功，
但一直是&amp;quot;booooo&amp;quot;(五个o)，
说明当前的工作出问题，
没有被算入。
需要检查本地的配置什么的是否有问题。&lt;/p&gt;
&lt;p&gt;这样，
一个CPU矿机就搭建完成了，
坐等收益吧。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="litecoin"></category></entry><entry><title>玩转莱特币：概念</title><link href="/litecoin001-coin-and-wallet.html" rel="alternate"></link><updated>2014-06-08T10:00:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-06-08:litecoin001-coin-and-wallet.html</id><summary type="html">&lt;div class="section" id="p2p"&gt;
&lt;h2&gt;关于p2p货币&lt;/h2&gt;
&lt;p&gt;其实这个概念已经出现好几年了，
作为一种新类型的虚拟货币，
它们的共同点是去中心化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;发行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传统的货币必须要有一个中央发行机构，
负责印发钞票，对该货币的市场拥有控制的能力。
据说这种形式的货币普遍存在的不足是容易受到各种势力的管制。&lt;/p&gt;
&lt;p&gt;比特币及各种类型的p2p货币(莱特币、狗币...)则不是如此，
他们没有中央控制机构，
而是基于特定的困难算法，
通过一定的速率产生。
没有任何机构能够控制新币的产生，
这样就有效防止了受到某些势力管制的危险。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交易记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而对于交易记录，
传统的货币是通过某些中央机构进行存储，
比如银行的数据库，
仍然是中心化的特点。
这种特点导致修改交易记录成为可能，
例如直接篡改数据库内容。&lt;/p&gt;
&lt;p&gt;与此相反，
p2p货币的交易记录存储在全网的所有运行的机器中，
相当于分布式的数据库。
这样，
如果某人想要篡改某一次的交易记录，
则需要入侵网络中所有的计算机，
基本上不可能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交易确认&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用一种叫做块链的东西用于储存交易记录，
每份交易储存在区块中，
区块逐个相连形成块链。&lt;/p&gt;
&lt;p&gt;通过困难的计算产生区块，
当新的交易产生时，
数据写入区块中，
区块插入块链。
这样就完成了交易的记录。&lt;/p&gt;
&lt;p&gt;此外，
由于没有机制使区块从块链中移除，
因此这种类型的交易是不可逆的。&lt;/p&gt;
&lt;p&gt;伪造交易的现有方式是，
使用超过一半的全网算力，
生成新的区块，
由于算力超过其他机器的总和，
能够使自行伪造的交易记录被确认。
也就是常说的51%攻击。&lt;/p&gt;
&lt;p&gt;这东西不是很了解，
在此稍微记录一下。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区块产生&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;区块的产生使用困难的计算算法，
该算法需要消耗较多的计算时间，
而且能够被证明，
具体算法博主也没搞清楚，
听说比特币使用的是sha-256哈希算法，
其他货币使用的是一种叫做scrypt的算法。&lt;/p&gt;
&lt;p&gt;困难的区块生成方式使得随意伪造交易不可能。&lt;/p&gt;
&lt;p&gt;而区块产生的速率则通过全网的当前算力进行自动调节，
当全网算力较高时，
区块的算法难度自动提升，
反之亦然。&lt;/p&gt;
&lt;p&gt;这种做法保证了单位时间的区块产生速率恒定。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;挖矿&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;既然该计算问题如此困难，
总需要有人去做。
因此总有人需要用自己的机器进行计算，
消耗电能和计算机的运算能力去解决这些数学问题。&lt;/p&gt;
&lt;p&gt;p2p货币的机制是，
通过执行运算确认交易的那些机器，
在单位交易完成时能够得到一定量的货币奖励，
奖励的来源是新发行的货币。
此外，
有些交易对负责确认交易的事务有一定量的手续费，
手续费也会送给那些负责运算的机器。
这些手续费来自交易的某一方，
也就是现有的货币。&lt;/p&gt;
&lt;p&gt;因此，
使用机器进行计算并不是完全浪费电能的行为，
如果计算获得的价值比消耗的电能和时间更多的话，
还可以赚钱。&lt;/p&gt;
&lt;p&gt;新货币的产生存在于交易确认的计算中，
类似于矿井的挖掘，
因此这种工作就称为挖矿，
负责干活的机器叫做矿工。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;矿池&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于挖矿有利可图，
许多有钱的人投资购买大算力的机器专门用于高速计算，
以此获得大量挖矿所得。&lt;/p&gt;
&lt;p&gt;对于小民众来说，
则由于算力微弱导致无法与他们竞争。&lt;/p&gt;
&lt;p&gt;因此形成了一种新的概念叫做矿池，
通过集合众多小算力机器进行所谓的“星云计算”，
达到比较高的运算能力。&lt;/p&gt;
&lt;p&gt;而挖矿的收入也按照工作量进行再细分，
这样每个小矿工都能获得自己应得的部分。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;矿机&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;比特币的挖矿现在已经不能通过一般的计算机完成了，
由于全网算力的巨大提升，
而且由于sha-256算法的特点，
使用专门设备用于挖矿所达到的效率才能够获得收入。&lt;/p&gt;
&lt;p&gt;而其他类型货币，
比如莱特币、狗币等，
由于市场没有比特币那么火热，
同时由于scrypt算法对特殊机器不敏感，
因此眼下的挖矿以GPU为主，
特别适合博主这种闹着玩的人进行尝试。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;钱包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;储存货币的钱包是一个地址值，
该地址在全网可见。
使用不对等加密体制对钱包地址加密，
钱包的掌控权在拥有该地址对应私钥的人手中。&lt;/p&gt;
&lt;p&gt;一种钱包是个人的离线钱包，
个人拥有该钱包的私钥，
可以向其他钱包地址转账，
通过私钥签名交易进行确认；
同时可以通过该地址接收其他钱包发送的货币。
另外可以备份钱包的私钥防止丢失。&lt;/p&gt;
&lt;p&gt;钱包的麻烦之处在于，
每个离线钱包都需要持有一份从货币诞生以来到现在的所有交易的记录，
新安装启动的钱包都需要花费较长的时间用于同步，
因此一个早上博主的莱特币钱包仍然没有同步完。&lt;/p&gt;
&lt;p&gt;另一种钱包是在线钱包，
通过某些网站的服务，
只要注册该站点的用户即可生成若干个地址用于储存自己的货币，
自己不储存私钥。&lt;/p&gt;
&lt;p&gt;这种方式非常方便，
只需要登录网站的服务便可以收款汇款，
由网站处理后面的签名和确认操作，
既不需要自行储存整个平台的交易记录，
也不需要管理私钥处理相关的备份和保密工作。&lt;/p&gt;
&lt;p&gt;不过听说在线钱包很不安全，
比如站长拿着网站所有钱包地址的私钥跑路了，
那钱就追不回来了。&lt;/p&gt;
&lt;p&gt;听说某个大型的比特币交易平台就是这么完蛋的。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="litecoin"></category></entry><entry><title>实习求职：一些面试经验的总结(面试篇)</title><link href="/JobHunting005-Summary-Of-Audition-00.html" rel="alternate"></link><updated>2014-06-02T16:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-06-02:JobHunting005-Summary-Of-Audition-00.html</id><summary type="html">&lt;p&gt;下班就顾着看电影，
放假就顾着玩，
站点都很久很久没有更新喽。&lt;/p&gt;
&lt;p&gt;听说有些博主坚持每日一篇的，
感觉好夸张。&lt;/p&gt;
&lt;p&gt;最近给站点做了一些优化，
DNS解析从tk那边转移到GoDaddy了，
速度和稳定性都有一些提升。&lt;/p&gt;
&lt;p&gt;另外今天暂时移除了Google Analysis，
虽然这货是神器，
可以看到每一个访问的具体细节，
但最近Google的服务器都快被干死了，
导致载入Google的JS文件非常慢。
考虑到很多访客来自大陆的局域网，
没有做网络优化，
为了提升体验效果于是只好忍痛暂时停用Analysis了。&lt;/p&gt;
&lt;p&gt;吹水结束。&lt;/p&gt;
&lt;p&gt;这篇来稍微记录一下面试过程的注意点。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;关于衣着&lt;/h2&gt;
&lt;p&gt;技术类的对正装基本没有要求，
只要是正规一点的衣服，
看起来清爽整洁就可以了。&lt;/p&gt;
&lt;p&gt;当然什么机车帽之类的别上，
太夸张，
听说有个兄弟就这样一面直接被腾讯秒了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;关于自我介绍&lt;/h2&gt;
&lt;p&gt;有一个比较常见的误区在于，
自我介绍的时候把自己简历上的东西又复述了一遍，
却没什么新奇的或者详细的描述。
毕竟简历上有的东西面试官早就知道了，
复述会给双方浪费很多时间。&lt;/p&gt;
&lt;p&gt;有条理，按时间排序，
每个事件给一些主要的内容，
比如说用到的技术，
获得的奖项这些。&lt;/p&gt;
&lt;p&gt;当然不要局限在某些细节半天出不来，
这也有些考验面试者的表达能力，
如何将自己的学习经历整理成为长度刚好、重点突出、有条不紊的自我介绍。&lt;/p&gt;
&lt;p&gt;博主的做法是事先的准备，
将所有干过的事情列举到纸上，
一件事用一句话概括。
将觉得不错的想要介绍的东西挑出来，
按自己喜欢的顺序排好，
然后逐步拓展开来，
把事件的重点补充上去。&lt;/p&gt;
&lt;p&gt;这么做的好处是首先一句话能够概括的东西最为清晰，
而后的重点补充让事件内容较为丰满，
整体的把握也有度量，
不至于偏差太远。&lt;/p&gt;
&lt;p&gt;至于对一些突出项目的介绍嘛，
可以不放在自我介绍里，
反正后面谈项目的时间还很多。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;关于面试话题和场面的把握&lt;/h2&gt;
&lt;p&gt;大家的普遍说法是面试者说的话大概要占整个面试的八成以上，
尽量不要让过程出现大篇幅的沉默或空白，
一个问题对一句回答的做法基本都是找死。&lt;/p&gt;
&lt;p&gt;其实这个东西有些宽泛，
博主认为主要还是要显示出自己的价值，
毕竟面试嘛，
也就是干这事的。&lt;/p&gt;
&lt;p&gt;因此前期的准备工作可以针对性的总结一下自己的技能点，
列个表将自己的技能枚举一下，
例如自己会一些算法，
那么就从这个点上拓展一下，
例如刷过一些ACM的水题，
在杭电和北大的OJ上帐号的做题数有五千，
刷题的时候主攻的是数学和DP。
这里仅供举例，
没有关于博主的任何信息。哈哈～&lt;/p&gt;
&lt;p&gt;接着就可以从这个方面继续拓展，
猜一下面试官听到这个会问一些什么问题，
例如讲讲背包问题的思路啦，
状态转移方程的原理啦，
或者是一些数学公式的证明啦。
想到的话就顺带自己回想一下具体的解答，
那么当真正面试被问到的时候，
至少就不会那么紧张。&lt;/p&gt;
&lt;p&gt;如果没有被问到其实也不亏，
有些内容可以融入到自己的谈话当中，
不一定要面试官直接提起。&lt;/p&gt;
&lt;p&gt;搞定了内容的准备还要稍微练习一下场面的控制，
对于自己不是很熟悉的内容能够巧妙的转移，
尽量将自己擅长的领域学会的知识突出。&lt;/p&gt;
&lt;p&gt;博主对这个就不是很熟悉了，
感觉前面的几场面试都还是很顺利的展示了自己。
最重要的可能是不要把话题往自己不熟悉的方向引导，
如果发现有这种苗头赶紧回滚。&lt;/p&gt;
&lt;p&gt;许多面经提到的一点是不要造假，
毕竟面对的都是技术主管甚至CTO之类的狠角色，
自己有多水，
可能面试官比自己更清楚。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;关于实践和爱好&lt;/h2&gt;
&lt;p&gt;实践什么的没多少好说了，
基本都那样，
做过一些什么项目参加一些什么比赛，
然后聊一下过程和收获，
遇到的问题。&lt;/p&gt;
&lt;p&gt;跟前面的一样，
讲述要有条理，
不拖泥带水像博主这篇博文一样就可以了。&lt;/p&gt;
&lt;p&gt;关于平日的爱好最近收获了一些新的tips，
看了别人的面经发现有些面试官会现场观摩面试者做的一些东西，
例如开源项目的Github页面，
或者是面试者的个人博客，
暂时没有看到有人掏出stackoverflow的个人帐号，
听说很值钱。&lt;/p&gt;
&lt;p&gt;因此博主想说的是，
对自己的行业有兴趣真的是一件很不错的事情，
首先自己肯花一些时间在课程之外研究一些好玩的东西，
新语言的学习、
信息安全的研究、
网站和服务器搭建、
自制的小游戏小应用、
行业新闻的了解，
这些都会开拓自己的视野和技术水平，
面试官知道这货纯粹为了兴趣能够学习这么多东西，
而不是仅仅局限于水到爆的课程内容和作业，
自然对面试者的好感会增加很多。&lt;/p&gt;
&lt;p&gt;另一方面如果能有一些记录的方式，
则效果会更加提升，
毕竟做过的东西很多都只是过去，
而从中学到什么，总结出来，
则是另一种层面。&lt;/p&gt;
&lt;p&gt;最近很喜欢的一种观点是这样的：
你知道的东西、
你能够掌握应用的东西、
你能够向别人介绍并让对方掌握的东西，
其实是三种由浅及深的程度。&lt;/p&gt;
&lt;p&gt;因此偶尔写写博客其实也有很大好处。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;关于基础&lt;/h2&gt;
&lt;p&gt;博主是软件开发岗，
这个方面的理论基础知识主要有以下几个：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据结构与算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组和链表，
简单的树，
堆与堆排序，
哈希表的实现和冲突解决，
九大排序，
二分...&lt;/p&gt;
&lt;p&gt;算法方面简单的都是ACM水题啦：
简单深搜、广搜，
简单的图算法（Dijkstra、Prim、SPFA)、
并查集、
简单的背包DP、
还有一些好玩的模拟题什么的...&lt;/p&gt;
&lt;p&gt;个人认为拿简单的ACM题目练手对代码能力非常有帮助，
最近看的一本《程序员的职业素养》中提到了练习，
作者拿武术来比喻编程，
其实什么都好，
技艺的提升总免不了实践，
有些是大工程，
比如ERP项目之类的，
就如同武术里的整个套路。
而对于日常的练习，
其实很多时候需要的是最基本最基础的编程训练，
就如同挥拳、踢腿一般，
只有这些基础的东西打牢固，
才能让后续的套路练习有意义。&lt;/p&gt;
&lt;p&gt;而另外一方面，
其实再牛逼的API背后也是数据结构和算法，
即使是做一些堆砌API的活(哈哈哈～)，
也不能只认识API吧。&lt;/p&gt;
&lt;p&gt;因此从实践上或者是理论上，
数据结构和算法都应该作为基础知识加以重视。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;操作系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没什么好说的，
应用软件多少会依赖操作系统，
至少要有一定的了解。&lt;/p&gt;
&lt;p&gt;主要涉及的有内存的管理，分页分段虚拟内存；
文件的管理，文件系统的实现理念；
并发的管理，多进程/多线程，共享数据的管理啦信号传递的实现啦；
当然还有那些CPU的上下文切换之类的，
记不清了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算机网络&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;现在的科技公司都很重视这个，
特别是互联网行业。&lt;/p&gt;
&lt;p&gt;没什么好说的，
整本书吃掉吧。&lt;/p&gt;
&lt;p&gt;一些面试的经典问题，
例如，访问一个网站，
从浏览器输入url到页面显示，
中间发生了什么事情，
包含了哪些东西之类的。
博主最喜欢这种应用类型的问题，
因为可以吹水。&lt;/p&gt;
&lt;p&gt;也有些问题比较细碎，
Post和Get的区别啦、
三次握手啦、
time_wait啦。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;听说数据库这货比较麻烦，
主要问题在于简单的大家都会，
复杂的大家都不会，
因此会问到的东西其实不是很多。&lt;/p&gt;
&lt;p&gt;博主这个方面也很弱，
因此没什么好建议，
只能说把书里常见的东西准备一下，
例如几个范式、几个常见的命令、一些有点繁琐的合并操作啥的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;计算机组成原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;太深入了，
听说面试硬件方向的会比较注重，
例如嵌入式啦，
Android系统工程师。&lt;/p&gt;
&lt;p&gt;另外有些不算很完整的知识，
但是对于面试很有帮助，
有时候甚至起到了重要的作用：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;手写代码的能力&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;很多公司喜欢搞手写代码，
有时候是笔试，有时候是面试，
以下几个是优点：
字体漂亮，
界面整洁不涂改，
命名规范，
思路清晰，
健壮性强有错误检测和恢复。&lt;/p&gt;
&lt;p&gt;多练习一下会好很多，
毕竟有时候一个学期没有碰笔突然面试让写个红黑树，
自然会紧张。&lt;/p&gt;
&lt;p&gt;另外，有时候需要跟面试官通过画框图什么的解释自己某个项目的技术架构，
这也需要书面表达能力。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="audition"></category><category term="recruitment"></category></entry><entry><title>实习求职：一些面试经验的总结(简历篇)</title><link href="/JobHunting004-Summary-Of-Audition-Resume.html" rel="alternate"></link><updated>2014-05-11T16:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-05-11:JobHunting004-Summary-Of-Audition-Resume.html</id><summary type="html">&lt;p&gt;转眼间已经五月中旬，
最近的一个多月先后面试了几家公司，
顺利拿到了百田和腾讯的实习offer。&lt;/p&gt;
&lt;p&gt;由于比较忙，
而且腾讯的面试略微零碎，
因此没有总结出完整的记录。&lt;/p&gt;
&lt;p&gt;不仅在自己的经历中收获了很多东西，
在和朋友们的交流中也听说了很多东西，
因此写一篇通用的总结经验，
留给以后温故知新。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;关于简历&lt;/h2&gt;
&lt;p&gt;简历是一个大问题，
许多人因为简历没有写好导致直接在筛选的时候就被干掉，
连笔试机会都没有。&lt;/p&gt;
&lt;p&gt;眼下的简历一般分为两种，
自己制作后通过各种方式提交的自制简历，
电子版也好印刷版也好，
普遍存在于各种行业中的中小型公司。&lt;/p&gt;
&lt;p&gt;另外一种是公司提供的表格进行填写，
一般是直接给个网址，
通过表单录入，
例如腾讯就是。
这种方式需要一定的技术支持，
所以在小型创业型公司比较少见。&lt;/p&gt;
&lt;p&gt;以下先以自制型简历记录一般做法。&lt;/p&gt;
&lt;p&gt;自制型简历特点是自由度非常大，
想怎么搞都行，
想要记录的内容任由制作者自行决定。&lt;/p&gt;
&lt;p&gt;因此首先需要做的是保证简历的清爽和清晰。&lt;/p&gt;
&lt;p&gt;不使用边框是比较好的，
因为边框的加入会导致整体效果比较死板，
每一个项目之间都加入边框整个简历变得密密麻麻，
阅读者也难以聚焦;
而如果是只在外层包一个大边框更显得画蛇添足。&lt;/p&gt;
&lt;p&gt;整体排版以简单的纵向块分隔为主，
若干行组成一个块，
每一块中记录某个方面的信息。&lt;/p&gt;
&lt;p&gt;每个块给个标题表明内容，
例如：个人信息、教育背景、获奖经历等。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个人信息&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最佳实践是在简历的最顶端给个大大的姓名，
接下来的第一个块留给个人信息和联系方式，
这样的好处是非常直观，
便于hr确定身份联系发offer。
(^_~)&lt;/p&gt;
&lt;p&gt;个人信息不要面面具到搞一堆无价值的数据，
如果没有特别强调工作地区就没必要给籍贯，
去面技术类型的科技公司什么政治面貌也没什么价值，
身高体重血型这些就不用说了。&lt;/p&gt;
&lt;p&gt;联系方式一般给通讯地址、手机和邮箱，
邮箱的话听说以前企业对写qq邮箱的比较反感，
反正GMail肯定没错，
当然自己要保证能随时上得去，
不然电子offer来了因为某些原因Google服务搞不了，
哭死。&lt;/p&gt;
&lt;p&gt;博主其实也看到过一些反面例子，
比如把联系方式放在最后面，
而且排版出bug导致最后打印的时候联系方式在第二页。
整个第二页就只有一行手机号码...&lt;/p&gt;
&lt;p&gt;最后听说他被阿里拒了。&lt;/p&gt;
&lt;p&gt;有些特别的东西也可以丢在个人信息里，
比如博主就把个人站的url挂在个人信息中，
感觉还是挺和谐的。&lt;/p&gt;
&lt;p&gt;至于头像，
说法比较多，
前期面试的时候博主都是用的没有头像的简历，
因为没有证件照...&lt;/p&gt;
&lt;p&gt;后来面企鹅的时候加上了正规的证件照，
朋友们都说那照片看起来像是中年主管...&lt;/p&gt;
&lt;p&gt;然后有些朋友也使用些特别的照片，
比如剪刀手什么的...&lt;/p&gt;
&lt;p&gt;个人感觉照片这货比较不好说，
有证件照就放上去吧。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;教育背景&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小学中学千万不要放进去，
没有留学没有研究生的小本本就乖乖给一行好了。&lt;/p&gt;
&lt;p&gt;另外没什么必要写课程内容，
博主曾经年少无知写过一份堆满课程名称的简历，
看起来非常丰满，
就是不能拿出去给别人看到罢了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获奖经历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;没什么好说的，
尽量把牛逼的水逼的大小奖项扔进去就好了，
ACM-ICPC World Final金奖啦，
图灵奖得主啦，
EFF 的Pioneer Awards啦（今年听说颁给了Linus），
格式要清晰一些，
时间、奖项名称、级别，
就差不多了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目经验&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个在本行业比较有分量，
毕竟是实践为主的工科，
自己会什么在自己干过的项目中能非常好的体现。&lt;/p&gt;
&lt;p&gt;感觉即使是本科阶段也应该至少有那么一两个项目能写，
跟着导师干的也行，比如做一些外包啦一些产品啦；
自己闹着玩的也行，比如给Linux内核项目组贡献过代码。&lt;/p&gt;
&lt;p&gt;如果本科阶段既没有做过项目，也没有参加什么比赛，也没有搞论文，
听说还有终极的解决方案，
就是把各个科目的大作业拉出来充数...&lt;/p&gt;
&lt;p&gt;当然要写的有水平，
例如五子棋可以突出Alpha-Beta剪枝算法；
又不至于看起来太外行，
比如大作业做了一个牛逼哄哄Unix文件系统...&lt;/p&gt;
&lt;p&gt;反过来，
写太多项目也不是很好，
虽然说有很多项目能写感觉很满足，
但全部堆上去会导致简历重点太分散。&lt;/p&gt;
&lt;p&gt;博主的观点是取那么两三个最能突出能力的，
跟自己投的职位相称的项目写进去，
其他的项目可以在面试的时候跟面试官随意谈起，
作为加分项。&lt;/p&gt;
&lt;p&gt;一个注意的地方是，
选定的项目一定要非常熟悉，
有内容，
自己能够全盘理解掌握，
因为可以确定的是面试官肯定会问项目的过程什么的。&lt;/p&gt;
&lt;p&gt;项目定好了，
怎么写也是个问题，
博主的做法是给个大标题，
给个时间，
用一两行简要介绍一下大致的内容，
然后用剩下的空间突出自己的工作。&lt;/p&gt;
&lt;p&gt;有技术的突出技术，
比如什么Hadoop计算集群，
三台服务器的容灾管理，
负载均衡什么的,
堆上去没错。&lt;/p&gt;
&lt;p&gt;有领队味道的可以突出字眼“带领团队成员×××××”。&lt;/p&gt;
&lt;p&gt;技术实力、
团队协作能力、
领导能力。&lt;/p&gt;
&lt;p&gt;这个地方有一种说法是可以牺牲一些简洁性换取重点的更加突出，
具体的操作很简单，
就是在一些重要的关键词上做加粗处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;专业技能&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;专业技能这一块一般是给一个技能列表，
毕竟这个行业的领域太多太多，
得说明一下自己掌握的大致方向。&lt;/p&gt;
&lt;p&gt;开发岗的一些死的东西基本上任何职位都需要，
没错，就是数据结构、算法、计算机原理、计算机网络、数据库等。
如果能在技能列表里来一句数据结构扎实是比较保险的。&lt;/p&gt;
&lt;p&gt;当然要真的扎实才行，
面试的时候连哈希表都搞糊涂的可不行。&lt;/p&gt;
&lt;p&gt;红黑树不懂就算了，
那种是阿里级别的。&lt;/p&gt;
&lt;p&gt;通常的建议是尽量让内容和自己投的职位相关，
比如移动客户端开发就多写一些Android和iOS的内容，
服务器后台方向多写点C艹和Java（从腾讯深圳TEG詹神那里学来的C++写法...），
运维方向多一些Python、Linux等，
前台（公司前台，不是web前端开发）就多写一些Office熟练...&lt;/p&gt;
&lt;p&gt;精通C艹这种自杀性质的千万别写，
方向太偏颇的别写，
例如投的是服务器后台满屏幕都是Android就不是很好，
这种情况要么就改技能列表，
要么就乖乖去投移动客户端。&lt;/p&gt;
&lt;p&gt;另外博主的一点小tips是在技能项后再来一句说明一些实践的东西，
比如对LAMP熟悉，开发过基于LAMP的商业网站。&lt;/p&gt;
&lt;p&gt;英语在本行业比较重要，
所以如果有托福雅思GRE什么的千万别忘了，
CET-6也还算是有价值，
要是只有四级，分数还不高，
干脆就写成能阅读英文文档算了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;兴趣爱好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是最后一点，
有点自由发挥的意思。&lt;/p&gt;
&lt;p&gt;能突出对专业的爱好最好，
没事喜欢编译调优Linux内核啦，
喜欢研究计算机病毒并且经常实践啦，
喜欢逆向工程开发过外挂啦，
或者喜欢关注计算机科学的发展经常逛slashdot也可以。&lt;/p&gt;
&lt;p&gt;体育运动也不错，
表现个人的生活健康向上。&lt;/p&gt;
&lt;p&gt;另外一方面如果想突出个人的特殊爱好其实也可以，
但博主总认为写什么爱好编织之类的没什么意义，
说明很有耐心么？&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;本来想一篇搞定的，
结果简历就写了整版，
只好拆分之。&lt;/p&gt;
&lt;p&gt;又挖坑了，未完待续...&lt;/p&gt;
&lt;/div&gt;
</summary><category term="audition"></category><category term="recruitment"></category></entry><entry><title>Android基础学习（一）：基本概念与理念</title><link href="/AndroidLearning001-basic-principle.html" rel="alternate"></link><updated>2014-05-01T16:00:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-05-01:AndroidLearning001-basic-principle.html</id><summary type="html">&lt;p&gt;眼下正是移动客户端应用泛滥的时代，
Android与iOS无疑是当前移动客户端最为热门的两大系统。&lt;/p&gt;
&lt;p&gt;于是博主也跟随潮流，
学起了Android。&lt;/p&gt;
&lt;p&gt;本博文不涉及具体代码，
只简单记录整理基本概念，
权当总结。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Android应用的基本理念&lt;/h2&gt;
&lt;p&gt;Android应用与传统应用程序一样基于操作系统提供的抽象硬件环境，
而且有更多的运行限制。&lt;/p&gt;
&lt;p&gt;由于Android系统基于Linux内核，
存在着众多的保护机制，
每个Android应用会通过各自独立的用户启动和运行。
并且每个应用在运行时处在Android系统内建的沙盒中，
与外界多了一层隔离。&lt;/p&gt;
&lt;p&gt;在资源管理方面，
Android应用必须声明对特定资源的访问请求，
才可执行对应的操作。
例如外部存储器的读写、
照相机的调用、
网络的调用等。
这些权限声明在用户安装的过程中进行确认，
仅当用户授权才可以安装应用。&lt;/p&gt;
&lt;p&gt;虽然这点在实际操作过程中有很大变数，哈哈～&lt;/p&gt;
&lt;p&gt;与桌面程序较为不同的是，
Android应用更多依赖于用户的交互，&lt;/p&gt;
&lt;p&gt;在Android应用中事件是一个非常重要的概念，
用户的任何操作都会触发一个事件，
例如手指的滑动，或者是按钮的点击。&lt;/p&gt;
&lt;p&gt;当用户的事件触发时，
Android系统通知应用程序事件的发生，
交由应用进行处理。&lt;/p&gt;
&lt;p&gt;在Android应用的内部，
通过编写对应的回调函数来完成对事件的处理,
例如onClick()函数，
当用户点击按钮时该回调函数就会被调用。
这也就构成了最简单的Android应用形式。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;四大组件基本概念&lt;/h2&gt;
&lt;p&gt;Android应用中存在着四大组件，
分别是Activity、Service、Content Provider和Broadcast Receiver&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Activity&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Android应用通过若干Activity进行组织。&lt;/p&gt;
&lt;p&gt;Activity控制着应用的某个窗口界面，
处理这个界面中的所有事件，
控制与用户的交互。&lt;/p&gt;
&lt;p&gt;Activity有多种状态，
当对应的窗口在屏幕上可见时，
对应的Activity处于活动状态，
接收系统通知的事件消息。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Service&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与Activity不同，
Service没有用户界面，
通常用于处理后台任务，
例如音乐播放等。&lt;/p&gt;
&lt;p&gt;Service的一个特点是可以常驻内存，
Activity被暂停或者停止的情况下不会再运行，
然而Service可以在应用被退到后台后继续执行。&lt;/p&gt;
&lt;p&gt;对于某些消耗高资源却不需要用户交互的任务，
通常的处理方式是用一个单独的子线程跑一个Service处理，
避免过多计算任务交给UI线程。&lt;/p&gt;
&lt;p&gt;UI线程过度忙碌会导致应用的响应过慢甚至无相应，
不仅影响用户体验还有可能被Android系统强退。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Broadcast Receiver&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;顾名思义，
广播接收者。&lt;/p&gt;
&lt;p&gt;在Android系统中发生的许多事件，
系统会通过广播通知感兴趣的应用程序，
例如电话的打入等。&lt;/p&gt;
&lt;p&gt;这个时候应用内需要Broadcast Receiver用于监听事件的发生。
并且在事件发生的时候做对应的处理。&lt;/p&gt;
&lt;p&gt;Android应用内部也可通过广播声明某些事件的产生，
例如网络模块接收完成某些数据，
通过广播告知应用内的其他模块该数据已可用，
由感兴趣的模块自行处理。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Content Provider&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Content Provider说到底是用来操作数据的，
这个没什么好说。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;Android应用的基本运行流程&lt;/h2&gt;
&lt;p&gt;Android应用中充斥着各种回调，
运行的基本流程也大量依赖这些回调函数进行处理。&lt;/p&gt;
&lt;p&gt;最简单的启动情况是应用程序图标被用户点击，
系统启动该应用，
这个时候作为入口的Activity被实例化并且执行。&lt;/p&gt;
&lt;p&gt;在Activity被创建的时候，
onCreate函数可能是最常用的回调了，
在这里可以初始化界面元素，
设置某些界面元素的事件监听回调函数等。&lt;/p&gt;
&lt;p&gt;直到初始化完毕，
入口Activity管理的界面显示在屏幕上，
等待用户操作。&lt;/p&gt;
&lt;p&gt;用户通过与界面元素交互控制应用的执行，
例如点击按钮，
Activity中设定的点击回调函数被触发，
例如onClick函数，
执行相应的操作。&lt;/p&gt;
&lt;p&gt;同时也存在大量情况，
用户点击的某个按钮弹出新的交互界面，
在Android应用中通过在点击事件的回调函数里开启新的Activity实现。&lt;/p&gt;
&lt;p&gt;Android的每个应用都有类似栈结构的Activity调用栈，
保存着Activity之间的调用关系，
当某个Activity被调用显示时会被入栈，
当交互完成时出栈，
栈中的前一个Activity回到前台显示。&lt;/p&gt;
&lt;p&gt;某些情况下应用可能会暂时退到后台，
例如用户点击了Home键，
那么Activity相应的onPause等回调函数被执行，
这个时候需要保存一些相关的应用状态。&lt;/p&gt;
&lt;p&gt;不仅如此，
当Activity启动新的Activity并推到前台后，
原有的Activity也会被停止，
onPause和onStop回调被执行。&lt;/p&gt;
&lt;p&gt;当应用重新回到前台，
onResume等回调被调用，
恢复界面的元素状态并重新显示。&lt;/p&gt;
&lt;p&gt;自然，
也可以启动新的Service，
例如用户点击播放音乐，
Activity启动后台Service进行处理，
其自身继续监听下一个事件。&lt;/p&gt;
&lt;p&gt;在用户交互完成后便准备退出应用了，
当所有的Activity交互完成并退出，
调用栈即为空，
相应的应用也就结束退出了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="intent"&gt;
&lt;h2&gt;Intent的基本知识&lt;/h2&gt;
&lt;p&gt;Intent字面上是意图的意思，
而它也确实用来表达程序作者的意图。&lt;/p&gt;
&lt;p&gt;在应用内部，
可以通过声明Intent并设置适当的参数，
通过调用对应的start函数来启动其他Activity、
调用bind或者start启动一个Service、
或者调用send发送一个Broadcast。&lt;/p&gt;
&lt;p&gt;而Intent的作用还不止在应用内部，
它同样可以通过设置参数声明需要启动的应用类型，
并设置好相关的参数，
扔给Android系统，
在这种情况下，
Android系统会弹出一个实现这个操作的其他应用列表，
由用户决定启动的应用。&lt;/p&gt;
&lt;p&gt;例如某应用需要用户拍一张照片，
应用内部不需要自行实现拍照的功能，
只需要声明一个Intent并交由用户自行选择已有的相机应用拍照，
最终返回获得的图像数据即可。&lt;/p&gt;
&lt;p&gt;十分强大的设计。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;简单来讲，
一堆Activity构成了若干界面交互环境，
一堆回调函数处理事件，
用Service管理后台任务，
用Broadcast处理广播消息，
操作数据使用Content Provider，
最后用Intent将这些东西连接起来，
用调用栈保存Activity之间的关系，
这就是Android应用的基本形态了。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Android"></category></entry><entry><title>C++学习(九)：最大堆与堆排序</title><link href="/CppLearning009-heapsort.html" rel="alternate"></link><updated>2014-04-06T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-04-06:CppLearning009-heapsort.html</id><summary type="html">&lt;p&gt;初次认识堆之后就对堆排序比较有好感，
感觉算法很有趣，
效率也很高。&lt;/p&gt;
&lt;p&gt;谈堆排序就必须对堆的基本原理和性质有所掌握，
因此这里记录一下个人对堆的基本理解。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;二叉堆与最大最小堆&lt;/h2&gt;
&lt;p&gt;二叉堆有如下的基本性质：
首先二叉堆是一棵完全二叉树，
因此二叉堆经常使用数组进行实现。&lt;/p&gt;
&lt;p&gt;在数组实现的二叉堆中，
假设根节点索引值为1，
则有如下性质：
父节点是n号元素，
则其孩子节点索引值分别为2n和2n+1。&lt;/p&gt;
&lt;p&gt;对于根节点为0的二叉堆，
则孩子节点分别为2n+1和2n+2，
均能通过偏移量快速找到孩子节点。&lt;/p&gt;
&lt;p&gt;其次，二叉堆的元素是部分有序的，
每一个父节点和其子节点之间存在某些关系。&lt;/p&gt;
&lt;p&gt;而最大/最小堆则是二叉堆的一种形式，
最大堆的每一个父节点都比子节点的值大，
最小堆则相反，每个父节点都比其子节点的值小。&lt;/p&gt;
&lt;p&gt;这种情况下，最大堆的根节点就是所有节点中的最大元素，
由于这种性质使得快速的排序算法得以实现。&lt;/p&gt;
&lt;p&gt;需要注意的是，
最大/最小堆的大小关系仅存在于父子节点之间，
兄弟节点之间没有直接的大小关系。&lt;/p&gt;
&lt;p&gt;简单起见，以下只讨论最大堆的相关内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;最大堆的构建&lt;/h2&gt;
&lt;p&gt;构建最大堆的基本目标是使数组满足最大堆的性质，
即所有父节点比其子节点的值大。&lt;/p&gt;
&lt;p&gt;一般的做法是定义一种siftdown操作，
siftdown操作某个特定的节点，
将其不断与子节点比较并交换位置直到到达树中正确的位置。&lt;/p&gt;
&lt;p&gt;题外话：博主一直以为是shiftdown...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;siftdown操作的具体实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其具体的思路如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
比较当前节点与其孩子节点的值:
    若当前节点比其孩子节点都大，则该父子节点形成的子树已经满足最大堆性质，算法中止；
    若当前节点不是最大值，则使其与较大的孩子节点交换，使该子树满足最大堆性质；
对于交换过元素的孩子节点继续执行这个算法，直到叶子节点。
&lt;/pre&gt;
&lt;p&gt;代码实现如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
index为当前操作的节点，endindex是数组的结束位置
获取左孩子并检查是否超过边界endindex，如果是说明当前节点没有左孩子，是叶子节点，直接返回
如果有右孩子，则找出左右孩子节点中的较大者，否则直接使用左孩子作为较大者
比较父节点与较大的孩子节点的值，做相应处理
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;shiftdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;endindex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;leftchild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//leaf node&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;leftchild&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;endindex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rightchild&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftchild&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;leftchild&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rightchild&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;endindex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;maxind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;leftchild&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rightchild&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt;
            &lt;span class="n"&gt;leftchild&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rightchild&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxind&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxind&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;shiftdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;endindex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;方便理解所以使用了递归操作处理交换过的子节点，
其实通过循环可以去掉递归提高效率。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大堆构建的实现&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有了siftdown后就可以构建最大堆了，
方法很简单，
从索引最大的非叶子节点开始，
对每一个节点进行siftdown操作，
直到处理完根节点。&lt;/p&gt;
&lt;p&gt;转换为数组的表达便是：
假设数组长度为n，
则从索引为n/2-1的节点开始，
对数组的前半部分节点执行siftdown。&lt;/p&gt;
&lt;p&gt;由于完全二叉树的性质，
我们可以知道数组的前半段为中间节点，
后半段为叶子节点。&lt;/p&gt;
&lt;p&gt;通过上述的操作便可以从最底层的子树开始逐步往上构建最大堆，
直到整个数组满足最大堆的性质。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;buildheap&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;shiftdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;最大堆的效率分析&lt;/h2&gt;
&lt;p&gt;构建最大堆的基本操作是siftdown操作，
需要对数组的前半部分，即所有中间节点操作一遍siftdown，
因此外层循环需要做n/2趟，
siftdown操作的次数与树的高度有关，
完全二叉树的的树高为logn。&lt;/p&gt;
&lt;p&gt;博主数学不好，
书里的分析相当详细，
最终的结果近似为O(n)。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;最大堆的常见用途&lt;/h2&gt;
&lt;p&gt;常见的用途有优先队列和堆排序。&lt;/p&gt;
&lt;p&gt;堆排序使用了堆的特殊性质用以加快排序速度。&lt;/p&gt;
&lt;p&gt;其基本思路是，&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1.构造一个最大堆；
2.交换数组的头尾元素；
3.减小数组的size使被交换出来的当前最大元素不参与接下来的操作；
4.对新的根节点执行一趟siftdown；
5.新的最大堆形成（size比原有size少1）；
6.继续执行2到5，直到堆为空。
&lt;/pre&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;heapsort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;buildheap&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;shiftdown&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;算法的整体时间复杂度为建堆的n加上对n个节点交换后的siftdown，&lt;/p&gt;
&lt;p&gt;总的来说为nlogn，
比上一次介绍的三大简单排序效率好得多。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="C/C++"></category><category term="data structure"></category></entry><entry><title>C++学习(八)：排序啊排序</title><link href="/CppLearning008-sort-one.html" rel="alternate"></link><updated>2014-03-30T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-03-30:CppLearning008-sort-one.html</id><summary type="html">&lt;p&gt;每一本数据结构的课本都会聊九大排序，
作为基础知识掌握这些经典的算法可能是每个搞代码的人必修的一课。&lt;/p&gt;
&lt;p&gt;冒泡、插入和选择作为简单易懂而最基本的三种方式，
常常被用作算法学习的入门课程。&lt;/p&gt;
&lt;p&gt;这里试着以自己的理解总结一下。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;冒泡排序&lt;/h2&gt;
&lt;p&gt;冒泡排序的基本思路如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
从数组头部开始，使用指针遍历每个节点；
对于每个当前节点，将其与相邻节点的值比较；
若前一个节点比后一个节点大，则交换使其有序；
移动指针，对下一个节点继续前述操作；
&lt;/pre&gt;
&lt;p&gt;一个上述的循环作为一趟，
不断将节点两两比较，
使数组趋向有序。&lt;/p&gt;
&lt;p&gt;同时，
可以肯定的是最大的节点经过一趟排序会被交换到数组末尾。
因为最大的节点每次都被操作与后续节点替换，
直到循环结束。&lt;/p&gt;
&lt;p&gt;因此一个循环下来最末的元素必然已被排序成功。&lt;/p&gt;
&lt;p&gt;基于这种性质，
不断循环调用上述过程，
每次缩短排序数组的长度使尾节点不参与排序，
直到参与排序的数组长度为0，
则整个数组的排序过程就完成了。&lt;/p&gt;
&lt;p&gt;基本的代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;bubblesort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;flag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;代码中使用了一个bool标记flag用于优化排序过程，
其思想如下：&lt;/p&gt;
&lt;p&gt;若某一趟排序过程中没有任何节点发生交换，
则说明整个数组已经是有序状态，
这种情况下后续的循环排序操作已经没有意义，
因此检测到未发生交换的一趟则直接跳出，
排序完成。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;插入排序&lt;/h2&gt;
&lt;p&gt;博主以前经常搞混插入和选择排序，
直到某次在某个地方看到对于插入排序的经典介绍：
插入就像打牌时整理手牌的过程。&lt;/p&gt;
&lt;p&gt;豁然开朗～&lt;/p&gt;
&lt;p&gt;基本思路如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
将数组划分为已排序及未排序两部分；
初始状态已排序为第一个元素，未排序为剩余元素；
每次从未排序的数组块中取出第一个元素；
对于当前元素，从已排序的数组块末端往回搜索并每次比较；
    找到第一个比当前元素小的元素，则将当前元素插入到该元素的后面；
    若直到头部仍没有找到更小的元素，则当前元素为最小，插入到数组头部；
每完成一个元素的排序则已排序部分增长一位，未排序部分缩减一位；
循环直到整个数组有序。
&lt;/pre&gt;
&lt;p&gt;在实际实现过程中，
如果是以数组为基础的插入排序，
由于插入的位置后续的所有节点都需要往后移动，
因此通常是在比较的过程中逐个交换节点的位置，
直到到达目标位置。&lt;/p&gt;
&lt;p&gt;而对于链表来说，
可以省去后续节点的两两交换过程，
直接在目标位置插入即可。&lt;/p&gt;
&lt;p&gt;数组实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;insertsort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
                &lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                    &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;对于最简单的单链表，
这种模式的插入排序就显得不适应了，
因为要查找某个节点的前驱非常麻烦，
需要从链表头部开始正向查找，复杂度为O(n)。&lt;/p&gt;
&lt;p&gt;博主想到的方法如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
将链表划分为已排序和未排序两段，且相互独立，各自有头节点；
初始状态已排序为空链表，未排序为整个链表；
每次从未排序链表中取出第一个节点，复杂度为O(1)；
从已排序链表头开始，正向搜索直到找到第一个更大的节点或者找到表尾；
将元素插入目标位置；
循环直到未排序链表为空。
&lt;/pre&gt;
&lt;p&gt;这种方法避开了消耗很大的寻找前驱操作，
同时也能够发挥链表的快速插入优势。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;选择排序&lt;/h2&gt;
&lt;p&gt;选择排序思路非常简单，
但相对其他两种排序可能效率会稍低一些。
其基本思路如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
将数组划分有序和无序两部分；
初始状态有序部分为空，无序部分为整个数组；
遍历无序部分的所有元素找到最小值；
将最小值插入到有序部分的末尾；
循环直到无序部分为空。
&lt;/pre&gt;
&lt;p&gt;在实现的过程中经常使用的方式是外层遍历所有节点，
内层循环找到当前最小值，
与外层当前指向的节点交换，
这样只需要一次交换操作，
避免了由于插入导致的多个元素移位。&lt;/p&gt;
&lt;p&gt;代码实现如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;selectsort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;minind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;compare&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;minind&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                        &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;minind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minind&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里在交换的时候加入一个条件判断，
仅当找到的最小节点不是当前的操作节点的时候才进行交换操作，
避免了无意义的自我交换过程。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;比较与总结&lt;/h2&gt;
&lt;p&gt;以上三种排序都是简单理解但效率较低的算法，
对于较大数据量的处理不适用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间复杂度分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;平均的时间复杂度都为O(n^2)，
但在某些特殊情况下，插入排序的时间复杂度最好情况为O(n)，
即在原始数组已经有序的时候，
每次逆向查找当前节点的正确位置都可以在一次操作中完成，
内层循环复杂度下降到1。&lt;/p&gt;
&lt;p&gt;当然在最好情况下，
使用标记的冒泡排序也可以在一次循环后发现没有发生元素交换而退出，
时间复杂度也可以为O(n)。&lt;/p&gt;
&lt;p&gt;对于选择排序则不行，
不管什么情况选择排序都必须为每个节点遍历一次剩余的数组，
找到当前的最小值，
因此复杂度均为O(n^2)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;交换次数分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;插入排序必须为每个节点的插入操作移动后续的所有节点，
因此平均的交换次数为n^2。&lt;/p&gt;
&lt;p&gt;在最好的情况下，
没有发生交换，
次数为0。&lt;/p&gt;
&lt;p&gt;冒泡排序类似，每次必须将最大的元素移动到数组末尾，
在这个过程中必须移动所有其他元素一遍，
交换次数为n^2。&lt;/p&gt;
&lt;p&gt;同样最好的情况无需交换，次数为0。&lt;/p&gt;
&lt;p&gt;而对于选择排序，
虽然对每个节点都进行了遍历查找操作，
但最终只交换最小节点和当前节点，
因此交换操作的次数为n。&lt;/p&gt;
&lt;p&gt;加入了非自身判断的选择排序在最好的情况下可以省去所有的交换操作。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="C/C++"></category><category term="data structure"></category></entry><entry><title>C++学习(七)：线性表及搜索相关</title><link href="/CppLearning007-array.html" rel="alternate"></link><updated>2014-03-28T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-03-28:CppLearning007-array.html</id><summary type="html">&lt;p&gt;其实这个系列应该归结为数据结构专题的，
但由于记录的都是简单至极的基础知识，
标榜数据结构吸引眼球有点过于隆重，
于是统统放在C++的内容里。&lt;/p&gt;
&lt;p&gt;就算是C++的编程训练罢了。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;数组与链表的归纳总结&lt;/h2&gt;
&lt;p&gt;这些基础概念应该在开始学习编程的时候就有所涉及了，
这里试着总结一下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;基本定义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;朴素意义上，
数组与链表一样都是用来储存若干相同类型元素的数据结构，
其特点就是一个或多个元素以先后顺序保存在内存中。&lt;/p&gt;
&lt;p&gt;根据组织方式上的区别区分数组和链表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;组织区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数组占用了内存中的一段连续的空间，
在这段连续空间上，
通过指定数组的类型确定每一个元素占用的空间大小，
由此将所有元素依次紧密排列存放到对应空间上。&lt;/p&gt;
&lt;p&gt;相对的，
链表不占用连续空间，
通过在每个元素中保存下一个元素所在内存地址，
达到组织的目的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于每个元素占用空间相同，
加上所有元素在同一片连续空间上，
数组可以通过计算某元素相对头元素在内存中的偏移量，
快速访问某个特定的元素。&lt;/p&gt;
&lt;p&gt;而由于相同的原因，
数组在元素的插入和删除操作上比较麻烦，
不管是插入还是删除，
都需要移动所有后续的节点使其重新紧密排列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;链表特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;相对于数组，
由于链表元素是通过指针指向下一个节点，
没有连续空间，
因此插入新节点或删除原有节点在正常情况下只需要操作对应位置的前后元素，
使它们的指针指向正确的位置，
对其他元素没有影响，
因此插入删除操作的效率非常高。&lt;/p&gt;
&lt;p&gt;然而，
在访问某个特定节点时，
以单链表为例，
则必须从头节点开始逐个遍历链上的节点直到达到目标节点，
因此相对数组来说访问的效率较低。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;搜索的相关知识&lt;/h2&gt;
&lt;p&gt;最简单的暴力搜索莫过于直接遍历每个元素查找目标元素是否存在。
时间复杂度为O(n)。&lt;/p&gt;
&lt;p&gt;根据内存组织形式的不同，数组与链表有不同的高速搜索方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最著名的估计就是二分搜索了，
这种方式的前提条件是数组有序。&lt;/p&gt;
&lt;p&gt;基本思路如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
取搜索空间的中间节点；
比较该节点元素与目标元素的大小；
若目标元素的值较小，则搜索原空间的左半部分；
若目标元素值较大，则搜索原空间右半部分；
循环搜索直到找到目标元素或搜索空间为空，则搜索失败。
&lt;/pre&gt;
&lt;p&gt;二分相当于每次减少了一半的搜索空间，
整体算法复杂度下降为O(logn)，
因此搜索大范围的数据速度相当快。&lt;/p&gt;
&lt;p&gt;二分的变种相当多，
虽然基本思路类似但由于实现的功能不同导致代码存在差异。&lt;/p&gt;
&lt;p&gt;另外，
二分思路简单实现很不容易，
尤其是边界问题很喜欢出错。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;链表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;找了一下没有常见的纯链表快速搜索，
很多人的建议是使用二叉查找树。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;二叉查找树方式&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;二叉查找树其实也是二分的思想，
对于每个节点，比较元素值，
若目标较小则搜索左子树，
若目标较大则搜索右子树，
直到找到或着遇到叶子节点。&lt;/p&gt;
&lt;p&gt;另外一种实现是哈希思想。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;哈希方式&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用open hashing，
用数组作为哈希桶的入口节点，
凭借数组的快速定位找到入口，
数组元素指向保存内容的链表上，
最后在链表中线性查找目标元素。&lt;/p&gt;
&lt;p&gt;其实这种方式没有从本质上优化链表的搜索，
只是通过哈希去掉了大部分不同索引节点的搜索过程，
使最终需要查找的节点数量最小化，
达到加快搜索的目的。&lt;/p&gt;
&lt;p&gt;而对于最终链表的查找优化，
博主在数据结构的课本上看到一种方式，
即通过更新节点的相对位置来达到。&lt;/p&gt;
&lt;p&gt;基本思路是将常被访问的节点尽量排列在链表的前部，
较少访问的节点排在尾部，
这样，
长远来看，
总的节点遍历个数会下降。&lt;/p&gt;
&lt;p&gt;至于更新相对位置，
最简单的方式是每次找到目标元素，
就把对应节点与其前驱节点交换，
使其向链表头部靠拢。&lt;/p&gt;
&lt;p&gt;其他的还有很多种更新方式。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="C/C++"></category><category term="data structure"></category></entry><entry><title>Vim经验记录(二):寄存器的相关知识</title><link href="/VimExperience002-registers.html" rel="alternate"></link><updated>2014-03-15T16:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-03-15:VimExperience002-registers.html</id><summary type="html">&lt;p&gt;本文参考一下博文：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://blog.sanctum.geek.nz/advanced-vim-registers/"&gt;http://blog.sanctum.geek.nz/advanced-vim-registers/&lt;/a&gt;&lt;/blockquote&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;基本功能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;概念及基本用法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Vim的寄存器基本功能是个剪贴板，
在寄存器中可以保存文本内容，
更强悍的是可以保存命令记录，
俗称宏记录。&lt;/p&gt;
&lt;p&gt;寄存器有多款，
最简单的是命名寄存器，
键盘上的26个字母可以指向26个不同的命名寄存器。&lt;/p&gt;
&lt;p&gt;在一般模式下通过单个双引号调用寄存器。
双引号后接寄存器名称，
最后是文本操作命令。&lt;/p&gt;
&lt;p&gt;用例子解释最简单：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
将当前文本行复制到a寄存器中：
    &amp;quot;ayy
将b寄存器中的内容粘贴到当前光标处：
    &amp;quot;bp
&lt;/pre&gt;
&lt;p&gt;一目了然，
通过更换其他各种命令自然就能实现多种功能了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查看所有非空寄存器的状态&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在一般模式下敲以下命令：&lt;/p&gt;
&lt;blockquote&gt;
:reg&lt;/blockquote&gt;
&lt;p&gt;可以看到当前所有非空寄存器的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;宏录制与使用&lt;/h2&gt;
&lt;p&gt;这里说的宏是指一系列操作的集合。
Vim中的寄存器也可用于录制用户的宏，
再非常方便的重放，
达到快速完成一系列指令的功能。&lt;/p&gt;
&lt;p&gt;录制宏的操作非常简单，
首先通过q命令进入宏录制模式，
q后接寄存器的名称，比如a。&lt;/p&gt;
&lt;blockquote&gt;
qa&lt;/blockquote&gt;
&lt;p&gt;接着就可以随意操作当前文本了，
你的一举一动Vim都会记录下来并保存到寄存器中。&lt;/p&gt;
&lt;p&gt;最后(记得退出到一般模式中)再按一次q退出宏录制模式。&lt;/p&gt;
&lt;blockquote&gt;
q&lt;/blockquote&gt;
&lt;p&gt;重放宏直接在一般模式下用&amp;#64;关键字加寄存器名称：&lt;/p&gt;
&lt;blockquote&gt;
&amp;#64;a&lt;/blockquote&gt;
&lt;p&gt;录制的操作便会自动重放一遍。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;寄存器的追加操作&lt;/h2&gt;
&lt;p&gt;在默认情况下复制等操作会覆盖掉寄存器中原有的内容，
如果想要在原有内容上追加新的内容，
可将对应名称的寄存器改为大写：&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;Ayy&lt;/blockquote&gt;
&lt;p&gt;上面这句将当前行内容追加到a寄存器的末尾。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;匿名寄存器&lt;/h2&gt;
&lt;p&gt;可能用的最多的是Vim的匿名寄存器了。&lt;/p&gt;
&lt;p&gt;在平常的使用过程中，
默认的复制、剪切等操作都会将选定的内容填充到匿名寄存器中：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
yy: 复制当前行
dd: 剪切当前行
4dd: 剪切四行
&lt;/pre&gt;
&lt;p&gt;所谓的匿名寄存器实际上是名称为双引号的寄存器，
通过查看:reg可以看到当前的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;黑洞寄存器&lt;/h2&gt;
&lt;p&gt;博主不知道怎么翻译，
就随便这样命名了。&lt;/p&gt;
&lt;p&gt;这货就像黑洞一样，
往里面添加任意的内容都会被清空，
就如同Linux中的/dev/null一样。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题外话，
在Linux下，
可以尝试echo一些东西并且重定向到/dev/null中，
那么命令会被执行，
结果输出到/dev/null中，
然后就没有然后了。&lt;/p&gt;
&lt;p&gt;用于处理某些不需要的输出非常有效，
比如将无聊的编译出错信息重定向到那里去，
就不会有恼人的错误信息了。
(-_-)&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;g++ 2&amp;gt;/dev/null&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该寄存器为 _ ，
如果需要剪切特定的行并且不想让其污染匿名寄存器，
可以这样：&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;_dd&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;数字寄存器&lt;/h2&gt;
&lt;p&gt;名称是从0到9的十个寄存器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;复制寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;寄存器0保存了最近复制的内容，
因此复制操作会更新0号寄存器，
但是剪切的内容不会被写到0号寄存器中。&lt;/p&gt;
&lt;p&gt;在某些情况下这货非常有用，
比如复制了一坨东西，
跑去别的地方剪切了一些东西，
这时候想要粘贴刚才复制的东西，
会发现直接p的话剪切的东西就出来了。&lt;/p&gt;
&lt;p&gt;这个时候一种解决方案是使用黑洞剪切不需要的内容;
而如果一时手快忘记使用黑洞了，
不要紧，
刚刚复制的东西在0里面，
因此这样就可以粘贴了：&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;0p&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;剪切寄存器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其他的数字寄存器与0号类似，
不过保存的是最近剪切的内容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;最近插入内容寄存器&lt;/h2&gt;
&lt;p&gt;名称： .&lt;/p&gt;
&lt;p&gt;当从一般模式进入插入模式并敲了一些东西后，
返回一般模式，
最近敲的这坨东西会被保存到.寄存器中。&lt;/p&gt;
&lt;p&gt;不过再次输入同样内容不需要用以下命令：&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;.p&lt;/blockquote&gt;
&lt;p&gt;虽然是可行的。&lt;/p&gt;
&lt;p&gt;直接在一般模式下敲.重复最近一次的命令即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;文件名寄存器&lt;/h2&gt;
&lt;p&gt;名称： %&lt;/p&gt;
&lt;p&gt;简单，保存了文件名。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;学习一下Vim的寄存器还是非常有用的，
可以快速执行非常多的操作。&lt;/p&gt;
&lt;p&gt;这里没有提到的关于系统剪贴板的若干寄存器，
可参考上一篇博文的内容。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Vim"></category></entry><entry><title>实习求职(三)：百田软件开发工程师(技术复试篇)</title><link href="/JobHunting003.html" rel="alternate"></link><updated>2014-03-13T20:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-03-13:JobHunting003.html</id><summary type="html">&lt;p&gt;忐忑了两天之后博主接到了来自百田的二面通知。(^_^)&lt;/p&gt;
&lt;p&gt;先前同去的小伙伴们却都没有消息，
在焦急的等待中过了一天仍然音信全无，
感觉就像被干掉了。&lt;/p&gt;
&lt;p&gt;不过标神早已拿到腾讯广州研究院创新班的录取通知书，
而小超也开始积极准备cvte的面试。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;准备&lt;/h2&gt;
&lt;p&gt;在接到电话后顺便询问了二面的内容，
得到的答复是技术复试。&lt;/p&gt;
&lt;p&gt;这让博主差点抓狂，
要知道博主已经在一面把所有学过的看过的听说过的东西全部拿出来吹了一遍，
复试如果继续探讨技术问题，
不管聊什么都不可能会的。&lt;/p&gt;
&lt;p&gt;想了一下只好死马当作活马医，
总结了上回的劣势，
准备工作以巩固基础为主。&lt;/p&gt;
&lt;p&gt;刚好手头有跟孙少借来的《现代操作系统》，
还有一本数据结构与算法的课本。&lt;/p&gt;
&lt;p&gt;花了一个晚上的时间刷了一遍操作系统，
线程与进程相关、IPC问题、进程调度、内存管理、段与页的理论分析、置换算法、文件系统与i-node...
还花了点时间看了第十章的Linux实例研究。&lt;/p&gt;
&lt;p&gt;再用了一个早上刷了一遍数据结构，
常用的排序算法、外排序的两种思路、二分查找、哈希、索引（2-3树、B树...）、图论的基本常识...&lt;/p&gt;
&lt;p&gt;准备完成也就死而无憾了，
毕竟超过能力的东西实在没办法。&lt;/p&gt;
&lt;p&gt;带着满脑子BC范式第三范式，
博主踏上了开往科韵路的专线公车。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;前戏&lt;/h2&gt;
&lt;p&gt;博主又来早了，
找略显呆萌又万分可爱的前台姐姐交了一份成绩单，
还不到五点，
约的是六点。&lt;/p&gt;
&lt;p&gt;等待的时候与旁边的兄弟搭话，
一问才发现原来是直系师兄，
也是来面软件开发的。&lt;/p&gt;
&lt;p&gt;于是天南地北海聊，
突发奇想询问是否有师兄去了Google，
师兄想了一下说，
有一个同学为了进Google跑去法国留学了。
这让博主想到了某牛人，
一问果然是刘子星师兄...
真是世人皆知的大神级人物啊。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;正戏&lt;/h2&gt;
&lt;p&gt;师兄面完就轮到博主了，
不知道是不是有人放百田鸽子。&lt;/p&gt;
&lt;p&gt;面试官看起来是个很干练的技术牛人，
对博主的简历研究得甚是仔细，
由于简历内容曾经upgrade过，
还被专门要求指出修改了哪些内容。&lt;/p&gt;
&lt;p&gt;开场就聊ACM的获奖事迹，
于是简单描述了一下跟同班同学参加校赛捞水奖的有趣经历。
被问到有没有进集训队，
一下子就砍中软肋，
只好解释由于技术太差被集训队reject了。&lt;/p&gt;
&lt;p&gt;接着谈到了Linux，
面试官以为我是搞内核的。(T_T)
没想到也就是学了一下简单的使用和shell的基本知识而已，
估计他也很失望吧。&lt;/p&gt;
&lt;p&gt;还好拿Vim出来说事，
多少显得比较专业～&lt;/p&gt;
&lt;p&gt;谈到Python，
博主搞项目的时候用Python写过一些文本处理的小工具，
却没有深入学习过Python的高级内容。
好好的Python到博主手里变成搞文本的，唉...
其实自己倒是每天在用Python，
每次开机敲的是startx,接着便是python goagent/proxy.py
(^_^)&lt;/p&gt;
&lt;p&gt;各种方面的问题搞得博主一头雾水，
传说中的技术复试可是聊面向对象，聊内存回收机制的，
网络上的面经都是如此，
而眼下却被问到手头的机器装的是什么系统，
只好硬着头皮回答Arch Linux加虚拟机跑的Win7处理一些文档。&lt;/p&gt;
&lt;p&gt;又聊到了这个粗制滥造的个人网站，
博主介绍了网站的目的主要是记录一些个人学习的总结，
既没有对某方面深入的研究报告，
也不存在系统而清晰的分析文档，
纯粹是兴趣瞎搞而成。&lt;/p&gt;
&lt;p&gt;对界面更有兴趣还是对后台代码更有兴趣，
回答得不明不白差点让面试官以为前端太简单没技术含量，
博主赶紧解释可不是看不起前端，
而是因为代码才是兴趣所在。
毕竟项目里院长死磕cakephp默认css的场景还历历在目，
搞css还是那帮美国佬猛。&lt;/p&gt;
&lt;p&gt;谈了谈平日的爱好，
博主说到了乌云上看的几篇文章，
吹了点代码注入的玩意。
然后出乎意料的事情就出现了，
面试官就这样结束了二面，
笑着说应该很快就会有通知了，
静待消息。&lt;/p&gt;
&lt;p&gt;博主惊奇得还反问了一句“就结束了？”，
事后一想甚是无礼，
幸好感觉面试官没被惹恼。
(~_~)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;整个过程中面试官都很好说话，
气氛也相当融洽。
比较可惜的是忘记询问是否为CTO。&lt;/p&gt;
&lt;p&gt;百田给博主的印象随着了解的增多也一直在加分，
希望能有幸入职吧！&lt;/p&gt;
&lt;/div&gt;
</summary><category term="audition"></category><category term="recruitment"></category></entry><entry><title>实习求职(二)：百田软件开发工程师(初次面试篇)</title><link href="/JobHunting002.html" rel="alternate"></link><updated>2014-03-11T20:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-03-11:JobHunting002.html</id><summary type="html">&lt;p&gt;这是博主第一次参加面试，
兴奋与紧张之情不必言说。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;前戏&lt;/h2&gt;
&lt;p&gt;小超、标神等均顺利通过了笔试的考验，
由于分配到相同的时间面试，
因此组织当天一同乘坐公车前往百田总部。&lt;/p&gt;
&lt;p&gt;由于天气严寒，
连嘴里随意吹出的气体都能蒙上白雾，
因此面试三人组决定卸下原定的正装+皮鞋装扮，
改为牛仔裤加太空衣，
毕竟保命要紧。&lt;/p&gt;
&lt;p&gt;对时间的拿捏也不是非常准确，
仨人都想着不能迟到给面试官留下坏印象，
因此八点便在饭堂集中，
吃完早餐打点行装乘上八点四十的公车立即出发。&lt;/p&gt;
&lt;p&gt;没想到九点二十我们已经站在百田位于二楼的办公地点，
而约定的面试时间是十点半。&lt;/p&gt;
&lt;p&gt;于是被锁在防盗门外，
幸好有某位不知名的漂亮美工姐姐(策划姐姐？)到达，
才得以进入。(对百田的印象瞬间上升一个档次)&lt;/p&gt;
&lt;p&gt;填完表格就没什么事情了，
走来走去发呆上厕所，
等着面试官出现。
在厕所里发现远处多玩游戏的大logo，
后来才知道广州非常多的软件公司都在这个地方，
俗称“天河软件园科韵路园区”。&lt;/p&gt;
&lt;p&gt;从厕所回来发现面试官已经在等着了，
面试正式开始。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;开场&lt;/h2&gt;
&lt;p&gt;两个帅哥，
一个非常开朗很好相处而且经验很足的样子，
另一个看起来技术超级厉害，很秒杀的样子。&lt;/p&gt;
&lt;p&gt;博主的面试比较奇怪，
居然是一个一个来...&lt;/p&gt;
&lt;p&gt;见面自然是以寒暄开始，
两句话便消除了最初的陌生感。&lt;/p&gt;
&lt;p&gt;询问了交通方式，
是否有面试经验，
为何找实习，
是不是学校硬性规定还是有自己的打算。&lt;/p&gt;
&lt;p&gt;吹水的话题博主还是比较擅长的，
于是跟面试官开始东拉西扯。
期间还问到是否耍游戏，
博主非常含蓄的表达自己是跟舍友耍红警的，
年代甚是久远...
至于Dota，
由于技术太差被踢出舍队。&lt;/p&gt;
&lt;p&gt;此外聊到了对百田的了解和印象，
博主差点就开始赞美工和策划的姐姐很漂亮了。
转念一想如此轻浮可能会导致反感，
于是简单描述了一下百田的产品、公司的目标及一些基本情况。&lt;/p&gt;
&lt;p&gt;如同网络上的面经所说，接着开始谈笔试的卷子。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;笔试相关&lt;/h2&gt;
&lt;p&gt;关于笔试内容可参考博主的上一篇博文：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://www.scutlaoyi.tk/JobHunting001.html"&gt;http://www.scutlaoyi.tk/JobHunting001.html&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;主要的内容是每道题的思路，
于是博主用上一篇博文中的基本思路进行介绍。&lt;/p&gt;
&lt;p&gt;期间面试官非常仔细的构造了很多变化的问题，
并询问解决方案。&lt;/p&gt;
&lt;p&gt;例如字符串那道，
便假设如果要求空间尽量小，
该如何解决。&lt;/p&gt;
&lt;p&gt;再比如进制转换的那道，
如果要求转换成任意进制，
现有的代码需要如何修改。&lt;/p&gt;
&lt;p&gt;这里也提到了上一篇中的一个细节，
由于博主一时兴起给bool数组开了27，
于是被询问设置数组大小为27而不是26的原因。
无以应对，
脑袋被门夹了... (-_-)&lt;/p&gt;
&lt;p&gt;在面试结束后跟其他俩人的交流中发现，
他们也被问了一些相似的问题，
或者是现有代码中的漏洞（他们都没去掉进制转换题目中的前导零）。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;项目经验相关&lt;/h2&gt;
&lt;p&gt;可以肯定的是面试会被问到简历中的项目经历，
一番介绍是免不了的，
这里提前准备一下应该会比较好，
至少能够把握重点让对方容易明白自己项目是干什么的。&lt;/p&gt;
&lt;p&gt;介绍完自己的项目重点应该放在自己在项目中的工作，
在完成自己的工作时遇到了什么困难，
如何解决，
以及学习到了什么东西。&lt;/p&gt;
&lt;p&gt;博主也被问及遇到的问题，
由于准备工作比较泛，
一时间没能想到比较有代表性的困难，
回答得不是很突出。&lt;/p&gt;
&lt;p&gt;感觉这种话题一个目的是看看项目是不是很水，
如果没有遇到什么大问题的话说明这种项目也不怎么样。&lt;/p&gt;
&lt;p&gt;而在项目过程中遇到问题和解决问题的过程更是考验面试者各方面的能力。&lt;/p&gt;
&lt;p&gt;据称，当被问到项目的系统如果访问量超过服务器的承受能力，
如何解决时，
标神直接抛出采用分布式架构，
于是话题往分布式架构方向进展，
Hadoop什么的都出来了。&lt;/p&gt;
&lt;p&gt;下面聊的这个方面同样考验面试者的实际能力。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;模拟场景相关&lt;/h2&gt;
&lt;p&gt;与下文的算法相关内容一样，
博主觉得这些问题比较考验面试者的能力。
但与算法不同的是，
这些问题更加贴近实际，
因此不容易通过准备复习算法和数据结构来优化表现。&lt;/p&gt;
&lt;p&gt;开始谈到流行的微博和微信，
博主负责分析这种类似的消息推送功能应该如何实现，
在海量数据的情况下可能会出现的问题。
轮询、推送，新消息的计数，内存限制情况下的优化，
太零碎了在此不一一列举。&lt;/p&gt;
&lt;p&gt;此外谈到了存储空间的拓展等，
博主于是提及STL中存储空间占满的处理，
即申请双倍空间并进行复制操作。&lt;/p&gt;
&lt;p&gt;主题还是基本的数据结构。&lt;/p&gt;
&lt;p&gt;接着谈及计算机网络，
面试官也笑着说这应该是考点，
果然是考点。&lt;/p&gt;
&lt;p&gt;五层协议、MAC地址与IP地址，
重点放在了TCP和UDP，
举例UDP的应用，
博主想到QQ的局域网UDP文件传输。&lt;/p&gt;
&lt;p&gt;同样，
场景的设定继续出现，
一个是UDP的文件完整性检查，
由于这货是尽力而为，
博主印象中完整性检查只能靠上层应用层负责处理，
因此把md5哈希给搬了出来。
其实博主也不知道QQ的文件完整性检查是怎么做的。&lt;/p&gt;
&lt;p&gt;第二个是大文件传输的文件大小确定，
博主继续天马行空(我真不知道实际是怎么样的...)，
用TCP发送包括文件大小等信息，
保证对方能够接收到必要的数据，
再用UDP的高速传输搞定大数据量的文件内容。&lt;/p&gt;
&lt;p&gt;还聊了多线程，
博主这下就没辙了，
这个方面一点接触都没有。
-_-&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h2&gt;算法相关&lt;/h2&gt;
&lt;p&gt;大家对百田的印象貌似有些偏颇，
认为小公司面试时不会探讨太深入的算法问题，
就博主的经历来看，
百田的算法要求还是蛮高的。&lt;/p&gt;
&lt;p&gt;自我介绍时博主聊到了大一时的五子棋，
使用了Alpha-Beta剪枝，
于是被要求介绍Alpha-Beta剪枝的原理，
年代久远加上准备不足，
“如果上一层的MAX点的当前值比当前层搜索下层节点找到的MIN值还要大，
就忽略当前层后续的子节点的搜索，
继续搜索上一层MAX点的下一个子节点...”
绕了半天博主自己都被绕晕了。&lt;/p&gt;
&lt;p&gt;排序算法自然跑不了的，
博主看过的若干面经都提及这个问题，
而博主居然会忘记先刷一遍排序算法再去面试...
这个部分博主无话可说。&lt;/p&gt;
&lt;p&gt;哈希表是第三个被问到的算法问题，
包括了哈希表的实现方式，
其实主要也就那么两种，
closed hashing和open hashing，
分别是用二次哈希和链表处理冲突。
此外是链表过长导致的效率低下如何解决。&lt;/p&gt;
&lt;p&gt;总的来说算法方面由于准备不足导致表现很差，
这是第一次面试的一个大bug。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h2&gt;爱好相关&lt;/h2&gt;
&lt;p&gt;最后面试官也询问了一下平日的爱好，
博主的爱好还是很多的，
阅读啊运动啊，
还喜欢逛技术博客自己研究一些认为有趣的技术问题。&lt;/p&gt;
&lt;p&gt;灵机一动提到了前些天花了一整天搞的XSS，
面试官也很感兴趣地让介绍一下。
于是班门弄斧吹了一些基本的注入方式和原理。
希望能给面试加点分吧...&lt;/p&gt;
&lt;p&gt;后来听说标神和小超甚至被问到了AVL树、B+树，
差点把红黑树拉出来谈，
甚寒...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;初次面试收获与遗憾并存，
自认为最成功的地方是整个过程没有发生手抖的现象。
(-_-)&lt;/p&gt;
&lt;p&gt;说话也算比较流利。&lt;/p&gt;
&lt;p&gt;收获的经验主要有如下几点：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1)必须刷一遍基础知识，操作系统、计算机网络、数据库、数据结构等
2)要能灵活应对问题，能够利用现有的知识去解决实际的问题
3)最初是听到院长说的：即使某些问题自己不会，也要试着去分析，因为思路也是很重要的
4)对于即将去面试的公司要有一定的了解，最好有自己的看法
&lt;/pre&gt;
&lt;p&gt;三天内给消息，
忐忑等待中...&lt;/p&gt;
&lt;/div&gt;
</summary><category term="audition"></category><category term="recruitment"></category></entry><entry><title>实习求职(一)：百田软件开发工程师(笔试篇)</title><link href="/JobHunting001.html" rel="alternate"></link><updated>2014-03-10T20:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-03-10:JobHunting001.html</id><summary type="html">&lt;p&gt;这几天没有更新内容，
因为博主忙着准备资料找工作。&lt;/p&gt;
&lt;p&gt;压力还是很大的，
毕竟在大华工这种地方，
随便路上抓一个人就搞过进化算法，
开发过hadoop服务器集群，
甚至是ACM-ICPC world final选手。&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;笔试&lt;/h2&gt;
&lt;p&gt;先扯几句关于笔试的内容。&lt;/p&gt;
&lt;p&gt;百田在前几天来到学校搞宣讲会，
那天下午好像是和小超在玩cvte的在线测评，
吃完饭回来标神来电话，
说百田招聘现场笔试，
要不要去试水。&lt;/p&gt;
&lt;p&gt;既然有机会就去试一发呗，
于是拿着一张简历一只笔就杀过去。&lt;/p&gt;
&lt;p&gt;现场还出了点状况，
投影坏了，
堂堂大华工，
让人家百田的老大聊了一个小时没有PPT的公司介绍。&lt;/p&gt;
&lt;p&gt;于是笔试开始，
由于是第一份笔试题，
博主也不好说难易程度，
不过从其他同学的口中得知，
腾讯的广研创新班拿去年笔试的题目给大伙做，
整整一份试卷的量，
选择填空什么都有。
相比来说百田的笔试题目就简单明了了，
几道大题，
手写代码即可。&lt;/p&gt;
&lt;p&gt;考的东西与网上的面试经验也有些类似，
字符串处理，
进制转换，
还有一道简单的计算几何学。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串处理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;写个函数，
输入s1和s2两个字符串，
去掉s1中在s2里出现过的所有字符，
并将结果返回。
要求是时间复杂度最低。&lt;/p&gt;
&lt;p&gt;由于给定了限制条件所有字符都是字母，
于是直接长度26的bool数组标记s2的所有字符，
扫一遍s1去掉所有出现的字符，
时间复杂度O(n)，
博主水平有限，感觉没法再快了。&lt;/p&gt;
&lt;p&gt;后来在跟院长聊天时得到一个说法，
笔试中的代码风格会影响自己给面试官的看法，
因此像博主这种26一类的魔数最容易让自己被扣分。&lt;/p&gt;
&lt;p&gt;更糟糕的是博主还刻舟求剑，给了个27，
后来面试的时候让面试官笑话了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;进制转换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;再写个函数，
输入一个字符串，
内容是十六进制的一坨数据，
转换成二进制的字符串并返回。&lt;/p&gt;
&lt;p&gt;博主思路呆滞，
没想到什么神奇的方法，
于是用感觉比较蠢的办法处理。&lt;/p&gt;
&lt;p&gt;首先按每一个字符处理，
转换成为十进制的整型值，
0-9分别是0-9,
a-f就是10-15。&lt;/p&gt;
&lt;p&gt;之后再转换为二进制，
这就简单了，
由于已经被转为十进制的整型值，
直接来四个模二和除以二得到每一个位的值。&lt;/p&gt;
&lt;p&gt;最后连接并判掉前导的零。&lt;/p&gt;
&lt;p&gt;考完跟标神一聊发现他们更无耻，
直接暴力把每个十六进制映射到对应的二进制字符串去，
转都不用转...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多边形面积计算&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最后这道比较麻烦一些。&lt;/p&gt;
&lt;p&gt;还是写一个函数，
求多边形面积，
传入的是一个points结构，
按顺序存放了每个顶点。&lt;/p&gt;
&lt;p&gt;要求是points结构自行定义，
另外给了两道公式用于求三角形面积。&lt;/p&gt;
&lt;p&gt;博主的基本思路是把多边形拆分为多个三角形，
应用已知的三角形面积公式，
计算每个三角形面积再求和。&lt;/p&gt;
&lt;p&gt;由于给的顶点是顺序的，
因此方案可行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;总结&lt;/h2&gt;
&lt;p&gt;感觉对编码能力的考验比较大，
对算法的要求不是特别刁钻。
基本功扎实，思路清晰，同时思维活跃如标神者半个小时搞定交卷。&lt;/p&gt;
&lt;p&gt;不得不说百田的效率是非常高的，
隔天晚上就收到了面试通知，
hr姐姐的声音非常好听。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="audition"></category><category term="recruitment"></category></entry><entry><title>C++学习(六)：栈的实现及若干算法</title><link href="/CppLearning006.html" rel="alternate"></link><updated>2014-03-04T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-03-04:CppLearning006.html</id><summary type="html">&lt;p&gt;事情一多就需要细致分配时间，
心情一迷茫就总会没有效率，
越攒待办事项就越多。&lt;/p&gt;
&lt;p&gt;就像发送速率比入队速率慢的路由器似的。&lt;/p&gt;
&lt;p&gt;整个一丢包的赶脚。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;栈的实现&lt;/h2&gt;
&lt;p&gt;栈的实现是比较简单的，
博主使用的是线性表构造的栈，
通过复用前几篇实现的节点数据类型，
很容易就搞定栈的实现，
同时写了基本的push、pop等函数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;LinkStack&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;protected:&lt;/span&gt;
    &lt;span class="n"&gt;Freelist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;freelist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;LinkStack&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;isempty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;insertatbottom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;LinkStack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;
        &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;temptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;freelist&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;newnode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;temptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;temptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;LinkStack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isempty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;temptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;freelist&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;delnode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;LinkStack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isempty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;top指针指向栈的顶部，
当栈空的时候top为null。&lt;/p&gt;
&lt;p&gt;加入新节点则将新节点指向top，
再更新top使其指向新的顶端。&lt;/p&gt;
&lt;p&gt;弹出节点时作反向操作，top指向它的next，
暂存并释放原来的顶部节点。&lt;/p&gt;
&lt;p&gt;当获取或者弹出元素时需要判断栈是否为空。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;在栈底插入元素&lt;/h2&gt;
&lt;p&gt;使用线性表的话其实非常简单，
用一个指针遍历到末尾插入即可。&lt;/p&gt;
&lt;p&gt;这里使用了一种不用循环而是用递归搞定的方法。&lt;/p&gt;
&lt;p&gt;当栈不为空的时候，
首先将当前栈顶的元素暂存并pop掉，
递归调用自身，参数依然是等待插入的元素，&lt;/p&gt;
&lt;p&gt;递归终止条件是栈为空，
此时插入栈底其实就是push。&lt;/p&gt;
&lt;p&gt;完成下层的递归调用再将暂存的元素push回去。&lt;/p&gt;
&lt;p&gt;这样就可以通过push、pop及isempty三个操作完成栈底的插入。&lt;/p&gt;
&lt;p&gt;同时对于使用数组实现的栈，
这种实现方式也可以成功。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;LinkStack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;insertatbottom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;isempty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insertatbottom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;递归完成栈的逆转&lt;/h2&gt;
&lt;p&gt;使用了上述的栈底插入函数协助完成。&lt;/p&gt;
&lt;p&gt;递归的思路是这样的，
当栈不为空的时候，
首先将当前顶端节点暂存，
然后递归调用自身让剩下的子栈逆转，
最后将自身节点插入到栈底。&lt;/p&gt;
&lt;p&gt;这种递归会逐层深入到栈底，
在栈为空的时候停止递归并返回。
最后逐层上升并将元素逐个插入到栈底，
完成整个栈的逆转。&lt;/p&gt;
&lt;p&gt;博主能力有限，递归这种东西总感觉有点说不清道不明。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;LinkStack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;insertatbottom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;检测括号匹配&lt;/h2&gt;
&lt;p&gt;这是栈的一个用途，
检测一段文本中括号是否匹配。&lt;/p&gt;
&lt;p&gt;基本算法是很好理解的，
扫描整个文本:&lt;/p&gt;
&lt;p&gt;1.遇到左括号('(','['及'{')则将其push入栈。&lt;/p&gt;
&lt;p&gt;2.遇到右括号将其与栈顶元素比较，
如果匹配则将对应括号弹出删掉;
否则直接就检测出匹配失败。&lt;/p&gt;
&lt;p&gt;3.扫描完成，
如果栈非空，
说明还有一些左括号没有被匹配，
则匹配失败;
否则匹配成功。&lt;/p&gt;
&lt;p&gt;4.还有一种情况，
扫描过程中找到右括号，
但栈已空，
则无法匹配右括号，
同样判定为匹配失败。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;mapchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;:&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;[&amp;#39;&lt;/span&gt;:&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;{&amp;#39;&lt;/span&gt;:&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nl"&gt;default:&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//......&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;check&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;{&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;[&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
            &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;(&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;mapchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;isempty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;check&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;用于检测的字符串全部都是括号，
因此没有添加判定括号的代码，
直接扫描过去。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;检测下一个较大的元素&lt;/h2&gt;
&lt;p&gt;给定一个数组，
要求找出对于数组中的每一个元素下一个更大的元素。&lt;/p&gt;
&lt;p&gt;一般的方法是暴力搜索，
对于每一个元素遍历一遍剩余元素，
每次比较并找出第一个更大的元素。&lt;/p&gt;
&lt;p&gt;时间复杂度是O(n^2)&lt;/p&gt;
&lt;p&gt;一个更优的办法是使用栈，
同样遍历数组：&lt;/p&gt;
&lt;p&gt;对于每一个元素current，
将其与栈顶的元素top依次比较，
若栈顶元素top较小，则弹出top，
并确定该top元素的下一个较大元素就是当前检测的元素current;&lt;/p&gt;
&lt;p&gt;继续比较栈顶元素top1，top2......
直到栈空或者找到topn比current大，
此时将current推入栈。&lt;/p&gt;
&lt;p&gt;逐项处理数组，直到完成。&lt;/p&gt;
&lt;p&gt;此时栈中剩余的元素就是没有下一个较大元素的那些，
按要求处理之。&lt;/p&gt;
&lt;p&gt;时间复杂度是O(n)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//ptr:遍历数组的指针&lt;/span&gt;
&lt;span class="c1"&gt;//buf:输入数据的缓冲数组&lt;/span&gt;
&lt;span class="c1"&gt;//size:buf数组大小&lt;/span&gt;
&lt;span class="c1"&gt;//curelement:当前栈顶的元素&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;curelement&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curelement&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curelement&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d -&amp;gt; %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curelement&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curelement&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d -&amp;gt; -1&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curelement&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="stock-span"&gt;
&lt;h2&gt;Stock Span问题&lt;/h2&gt;
&lt;p&gt;搞不清楚是什么意思，
google说这个字面上叫做”股票跨度“，
莫名其妙。&lt;/p&gt;
&lt;p&gt;总之，将所有乱七八糟的描述全部去掉，
问题就归结为，
给定一个数组，
对于每个元素，
计算在其之前的所有连续的比该元素小的元素总数。&lt;/p&gt;
&lt;p&gt;例如数组{100, 80, 60, 70, 60, 75, 85},
则计算结果为{1, 1, 1, 2, 1, 4, 6}&lt;/p&gt;
&lt;p&gt;一般方法自然是暴力搜索，不再赘述。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;突然想到一句经典的话：“拿不准，就穷举！”(When in doubt, use brute force)&lt;/p&gt;
&lt;p&gt;谁说的来着...Ken Thompson!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;回到栈，
实现的方式类似上面的算法，
不过这次需要保存一些额外的信息。&lt;/p&gt;
&lt;p&gt;遍历数组，
对于每个元素current，
初始化计算值为1（自身），
比较栈顶元素top1的大小，
若比该current小，
则将current的计算值加上top的计算结果。
弹出top1，继续比较top2，top3...
直到栈空或找到topn比current大。&lt;/p&gt;
&lt;p&gt;保存current的最终计算结果，
将current推入栈，
继续遍历。&lt;/p&gt;
&lt;p&gt;刚发现代码可以优化，
太晚了，下次再搞。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Stock&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//保存计算值&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//保存在原始数组中对应的索引值&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;//curvalue: 当前元素的计算值&lt;/span&gt;
&lt;span class="c1"&gt;//curstock: 当前栈顶元素&lt;/span&gt;
&lt;span class="c1"&gt;//price: 保存所有原始数值的数组&lt;/span&gt;
&lt;span class="c1"&gt;//result: 保存所有计算结果的数组&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;curvalue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;peek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curstock&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;curstock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;curvalue&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;curstock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curvalue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;curstock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;curstock&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;curvalue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curstock&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Result:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;搞定，睡觉。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="C/C++"></category><category term="data structure"></category></entry><entry><title>C++学习(五)：有序线性表的点滴记录</title><link href="/CppLearning005.html" rel="alternate"></link><updated>2014-02-25T16:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-02-25:CppLearning005.html</id><summary type="html">&lt;p&gt;在线性表的基础上开始构建有序线性表。
使用的是单next指针结构的线性表。&lt;/p&gt;
&lt;p&gt;后续将考虑在数组的基础上构建能够高效插入和搜索的数据结构。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;基本结构&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SortedLinklist&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Linklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;SortedLinklist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;comp&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;SortedLinklist&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="nl"&gt;protected:&lt;/span&gt;
    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;insertafter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;comparefunc&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;mergewithotherlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SortedLinklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;removeduplicates&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;SortedLinklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;intersectionwith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SortedLinklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;anotherlist&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;从基类直接继承了内置的链表数据结构，
在此基础上首先屏蔽了部分随机插入的函数接口，转为protected，
其次重载了基类的插入函数，
提供有序插入的功能。&lt;/p&gt;
&lt;p&gt;其次，
添加了一个protected的函数指针成员，
在构造函数中接收外部传入的比较函数指针，
并储存到该成员中。
达到的目的是可以自定义排序，
此举是收到STL中qsort的启发，
其实标准库中的很多东西都能够自定义比较函数。&lt;/p&gt;
&lt;p&gt;最后加入了若干有序线性表独有的新函数，
合并，去重，以及查找与另一有序线性表的交集。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;有序的实现&lt;/h2&gt;
&lt;p&gt;非常简单的做法，
在插入新元素时，
从头部开始搜索直到找到一个比该元素大的元素，
或者找到链表末尾，
那么就在该节点前插入目标元素。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;SortedLinklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;comparefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;tempnex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freelist&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;newnode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tempnex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;合并两个有序线性表&lt;/h2&gt;
&lt;p&gt;基本套路是从两个表的头开始，
每次比较当前的两个指针，
将小的提取出来并将对应指针往前移动。
直到某个指针到达尾部。&lt;/p&gt;
&lt;p&gt;最后处理剩下的(如果有)另一个链表的剩余元素，
全部接到新的链表中即可。&lt;/p&gt;
&lt;p&gt;博主的解决方案将传入的链表节点全部有序插入到原链表中，
最终的结果是两个链表合并为同一个链表，
传入的链表将被清空。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;SortedLinklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;mergewithotherlist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SortedLinklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;listptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="n"&gt;listptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//two pointer for each list and one for the new list.&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;listptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptrb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;traveller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//merge, smaller first&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptra&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;ptrb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comparefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptra&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptrb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;traveller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptrb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ptrb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptrb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;traveller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptra&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;ptra&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptra&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;traveller&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traveller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;//some nodes left, append to the end of list&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptra&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;traveller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptra&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptrb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;traveller&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptrb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;//clear the other list&lt;/span&gt;
    &lt;span class="n"&gt;listptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;去重的实现&lt;/h2&gt;
&lt;p&gt;目标是去除所有重复的元素。
处理的方式是遍历链表，
将所有与前一个元素相同的元素节点删除。&lt;/p&gt;
&lt;p&gt;需要关注一下头节点，
以及链表为空的情况。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;SortedLinklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;removeduplicates&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nexptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nexptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;comparefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nexptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nexptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freelist&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;delnode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nexptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nexptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;nexptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;检测与其他有序链表的交集&lt;/h2&gt;
&lt;p&gt;由于是有序的因此比较简单，
方法类似于合并，但这里是找到所有相同的元素。&lt;/p&gt;
&lt;p&gt;因此使用两个指针，从头部开始，
依次比较指针指向的元素，
如果相同，则找到一个相交的节点，记录;
如果不同，则指向小元素的指针前移。
直到某个指针指向表尾。&lt;/p&gt;
&lt;p&gt;博主在敲代码的时候忘记在找到相交元素后两个指针需要同时前移，
卡了一段时间。
因此做事还是要小心谨慎为好。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;taila&lt;/span&gt;  &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;tailb&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;comparefunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;taila&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tailb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;newtail&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;freelist&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;newnode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;taila&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;newtail&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newtail&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;taila&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;taila&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;tailb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tailb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;tailb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tailb&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;taila&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;taila&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;杂记&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关于this指针&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;遇到一个犄角旮旯的问题：&lt;/p&gt;
&lt;p&gt;在类模板的情况下，
子类继承父类，
在子类中调用父类的protected或public成员时，
需要显式指定this指针，
否则编译报错，
g++中显示未声明的符号。&lt;/p&gt;
&lt;p&gt;博主被这个问题卡了一段时间，
测试时将变量复制并粘贴一遍到子类中则可以解决问题，
否则一直显示未声明符号。&lt;/p&gt;
&lt;p&gt;最后在stackoverflow上找到了问题的答案。&lt;/p&gt;
&lt;p&gt;由于涉及到编程语言C++的内部结构问题，
貌似有点复杂，
因此没有找到问题的原理。&lt;/p&gt;
&lt;p&gt;反正加一个this-&amp;gt;就可以了。
(-_-)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="C/C++"></category><category term="data structure"></category></entry><entry><title>web概念学习：XSS跨站代码注入攻击</title><link href="/xss_basic.html" rel="alternate"></link><updated>2014-02-17T20:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-02-17:xss_basic.html</id><summary type="html">&lt;p&gt;今天看到乌云知识库关于XSS文章，心血来潮学了一下一些概念，还是蛮好玩的。^_^&lt;/p&gt;
&lt;p&gt;维基百科关于XSS的介绍在这里：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cross-site_scripting"&gt;https://en.wikipedia.org/wiki/Cross-site_scripting&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;XSS的全称是Cross-site scripting，中文可以翻译为跨站脚本攻击。&lt;/p&gt;
&lt;p&gt;基本的入侵方式是在目标网页的生成过程中注入代码，
然后让用户浏览目标网页，
这个过程中目标网页的代码也就被执行了，
达到目的。&lt;/p&gt;
&lt;p&gt;通常说来注入的代码为JavaScript，因为需要在客户端浏览器运行，
所以可以是客户端脚本。
不过也看到有些直接拿HTML来玩的。&lt;/p&gt;
&lt;p&gt;常见的有反射型XSS，DOM型XSS以及持续型XSS。&lt;/p&gt;
&lt;div class="section" id="reflected"&gt;
&lt;h2&gt;反射型(Reflected)&lt;/h2&gt;
&lt;p&gt;反射型的XSS基本流程如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1. 找到一个存在XSS漏洞的页面
2. 通过构造URL，在目标页面的URL后追加注入的代码并绕过服务器过滤(如果有的话)
3. 将构造出来的URL发布并引诱受害者点击
4. 用户点击该URL，跳转到目标页面，服务器将注入的代码写入最终页面，返回用户浏览器
&lt;/pre&gt;
&lt;p&gt;简单的例子：&lt;/p&gt;
&lt;p&gt;假设有一个页面接受用户的输入并将内容输出在原页面上，
php代码如下(假设文件名是test.php)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
 &lt;span class="nv"&gt;$user_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nv"&gt;$_GET&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="k"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello! Input is: &lt;/span&gt;&lt;span class="si"&gt;$user_input&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;php的双引号内参数会被替换为变量的值，因此user_input的内容会被显示在最终的浏览页面上。&lt;/p&gt;
&lt;p&gt;这个时候有趣的东西来了，如果构造一个URL像这样的话：&lt;/p&gt;
&lt;blockquote&gt;
test.php?user_input=szy1993&amp;lt;script&amp;gt;alert(&amp;quot;Hello,world!&amp;quot;)&amp;lt;/script&amp;gt;&lt;/blockquote&gt;
&lt;p&gt;那么szy1993后面的JavaScript代码就会被注入到页面上了。&lt;/p&gt;
&lt;p&gt;而实际执行的时候页面首先会alert一个窗口，内容是Hello,world!&lt;/p&gt;
&lt;p&gt;当然没有人拿一个alert去干坏事，但发挥想象力这种漏洞可以产生无限可能。
另外直接的明文URL太显眼，通过编码等方式可以把后面的内容改得面目全非，完全没有可读性，例如：&lt;/p&gt;
&lt;blockquote&gt;
test.php?user_input=szy1993%3c%73%63%72%69%70%74%3e%61%6c%65%72%74%28%22%48%65%6c%6c%6f%2c%77%6f%72%6c%64%21%22%29%3c%2f%73%63%72%69%70%74%3e&lt;/blockquote&gt;
&lt;p&gt;题外话，写个C的小程序就可以快速转换了，把字母换成对应的ASCII码输出，注意是十六进制。&lt;/p&gt;
&lt;p&gt;反射型XSS的注入代码包含在用户的请求中，在服务器被处理，嵌入到页面并返回客户端。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="domxss"&gt;
&lt;h2&gt;基于DOM的XSS代码注入&lt;/h2&gt;
&lt;p&gt;基于DOM的XSS与反射型XSS类似，
区别在于这款XSS本身依赖JavaScript自身完成代码的注入。&lt;/p&gt;
&lt;p&gt;假设页面代码是这样的(index.html)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;display&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;initial code&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;location&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;href&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;input=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;display&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过JavaScript获取数据写到id为display的元素里。
如下的URL：&lt;/p&gt;
&lt;blockquote&gt;
index.html?input=abc&lt;/blockquote&gt;
&lt;p&gt;显示内容abc&lt;/p&gt;
&lt;p&gt;构造这样的URL：&lt;/p&gt;
&lt;blockquote&gt;
index.html?input=abc&amp;lt;script&amp;gt;alert(&amp;quot;hacked!&amp;quot;);&amp;lt;/script&amp;gt;&lt;/blockquote&gt;
&lt;p&gt;就可以把代码注入到页面里去了。&lt;/p&gt;
&lt;p&gt;这种注入的优势在于代码没有经过服务器，
因此更加难以通过服务器端的过滤进行处理。&lt;/p&gt;
&lt;p&gt;不过这种方式的XSS在现在的浏览器貌似都没有效果，
博主在自行测试的时候不管是Linux下的Firefox或者Windows下的IE8都无法使用这种方式进行注入。&lt;/p&gt;
&lt;p&gt;所有代码均被直接编码并作为HTML内容文本输出。&lt;/p&gt;
&lt;p&gt;或者是博主拿键盘的姿势不对？&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="persistent-xss"&gt;
&lt;h2&gt;持续(Persistent)型XSS&lt;/h2&gt;
&lt;p&gt;方法类似，
但注入的位置不同。&lt;/p&gt;
&lt;p&gt;持续型XSS将代码写入到某些稳定持续的存储设备上，
例如数据库里。&lt;/p&gt;
&lt;p&gt;某些网站对用户的输入没有进行必要的过滤，
因此允许携带代码的输入存储到数据库中。&lt;/p&gt;
&lt;p&gt;例如某些用户信息的表单，
假设是一个textarea(我忘记是什么了)，
用户输入的信息直接写入数据库。&lt;/p&gt;
&lt;p&gt;当其他人（管理员等）浏览记录时，
数据库读取记录并显示到页面上，
这个时候如果被注入了代码，
则代码也会被提取并执行。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="xss"&gt;
&lt;h2&gt;XSS的用途&lt;/h2&gt;
&lt;p&gt;用途甚为广泛，
通过注入代码可以修改页面的内容，
构造post到其他服务器的输入框，
或者结合Ajax等技术可以窃取用户输入的帐号密码。&lt;/p&gt;
&lt;p&gt;另外，
由于浏览器的Same Origin Policy(同源策略？随手意译的..)，
正常情况下两个不同源的网页之间是不能共享用户数据的，例如敏感的cookie信息。&lt;/p&gt;
&lt;p&gt;但是通过XSS代码注入，
由于没有跳转到其他站点上，
因此可以绕过浏览器的SOP检测，
窃取用户登录的cookie并伪造用户身份进入目标站点。&lt;/p&gt;
&lt;p&gt;貌似最近这门技术非常热门来着。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;参考链接&lt;/h2&gt;
&lt;p&gt;主要参考了如下的站点介绍，
同时又收获了好几个不错的技术站点。 ^_^&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.codeproject.com/Articles/573458/An-Absolute-Beginners-Tutorial-on-Cross-Site-Scrip"&gt;http://www.codeproject.com/Articles/573458/An-Absolute-Beginners-Tutorial-on-Cross-Site-Scrip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://excess-xss.com/"&gt;http://excess-xss.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29"&gt;https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.thegeekstuff.com/2012/02/xss-attack-examples/"&gt;http://www.thegeekstuff.com/2012/02/xss-attack-examples/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="xss"></category></entry><entry><title>C++学习(四)：线性表的奇技淫巧(二)</title><link href="/CppLearning004.html" rel="alternate"></link><updated>2014-02-16T21:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-02-16:CppLearning004.html</id><summary type="html">&lt;p&gt;这两天去玩了，
进度比较慢。&lt;/p&gt;
&lt;p&gt;无序线性表终于算是搞了个大概，
有些过于繁琐的就没有管了。&lt;/p&gt;
&lt;p&gt;准备入手有序线性表，
把一些牛逼的算法也弄进去，
二分、堆排序、归并排序什么的。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;奇技淫巧大收集（续）&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;线性表判环&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就是判别一个线性表中有没有出现环。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单标记方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;几种标记都可以。&lt;/p&gt;
&lt;p&gt;如果是不重复的整数并且范围比较小的话，
直接开个bool型的数组，用下标表示某个特定的数，
对应值为1指定该值出现过，
对应值为0指定该值没有出现。&lt;/p&gt;
&lt;p&gt;整数下标的数组搞不定则可以考虑弄个标准库的哈希表。&lt;/p&gt;
&lt;p&gt;总之，思路就是遍历链表，
把出现过的标记起来，
当遍历过程中再次碰到被标记过的节点说明链表有环，
否则肯定能搜索到链表的表尾并结束。&lt;/p&gt;
&lt;p&gt;需要一些额外的空间及计算量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Floyd方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;感觉搞数学的家伙总能找到一些神奇的方法解决某些奇怪的问题。&lt;/p&gt;
&lt;p&gt;开两个指针fast, slow，均初始化为头节点，
fast每次移动两个节点，slow每次移动一个节点。&lt;/p&gt;
&lt;p&gt;单步运行，直到：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、fast指针到达表尾，无环；&lt;/p&gt;
&lt;p&gt;2、fast指针与slow指针在某一步指向同一个节点，有环；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;线性表除环&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单办法就直观了，
直接每个节点检查，
很蠢，不详谈。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高效方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先，用上述的Floyd算法找到环，
这个时候fast指针(或者slow指针)肯定是在环里面的某个节点。&lt;/p&gt;
&lt;p&gt;利用这个特性，统计，用指针移动统计环中节点的个数，假定为n。&lt;/p&gt;
&lt;p&gt;显而易见，
环的出现肯定是在链表的尾部，
因此去除环相当于将链表的尾节点与环中的连接节点切断。&lt;/p&gt;
&lt;p&gt;那么尾节点现在与哪个节点相连呢？
明显是倒数第n个，因为环有n个节点。&lt;/p&gt;
&lt;p&gt;再利用上一篇博文讲过的从头指针查找倒数第n个节点的办法，
加以变通，
当两个指针在某次移动中指向同一个节点的时候，
说明那里是环的入口。&lt;/p&gt;
&lt;p&gt;接下去就简单了，找到入口就找到了尾节点，
把它的next赋值为0即可搞定。&lt;/p&gt;
&lt;p&gt;太麻烦了博主就没实现... -_-&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;逆向输出&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不同于直接逆向链表，
这个只是逆向输出所有值，链表本身没有变化。&lt;/p&gt;
&lt;p&gt;方案其实不复杂，
递归嘛，谁不会。&lt;/p&gt;
&lt;p&gt;实现的时候偷懒，
不想搞两个函数一个内部递归一个外部调用，
因此用了一个默认参数0给curptr初始值，
外部调用时只传入第一个函数指针用于输出。&lt;/p&gt;
&lt;p&gt;检测到节点指针为0说明是外部第一次调用，
指针初始化为头节点。&lt;/p&gt;
&lt;p&gt;否则说明是递归过程，
则做对应处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Linklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;listprintreverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nodeprinter&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;curptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;curptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;curptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;listprintreverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodeprinter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;listprintreverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodeprinter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;curptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;nodeprinter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;curptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;旋转链表&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以某个节点旋转链表，
比如1-2-3-4-5,
以节点2旋转，则变成3-4-5-1-2&lt;/p&gt;
&lt;p&gt;用链表实现这货就非常简单啦，
头尾指针处理一下即可搞定。&lt;/p&gt;
&lt;p&gt;不过要注意边界情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Linklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;rotatefrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_getnth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getend&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;关于输出&lt;/h2&gt;
&lt;p&gt;由于使用了模板，
无法确定节点的值是什么类型，
因此在处理遍历输出的时候就没法在类模板中把输出语句预先定义死。&lt;/p&gt;
&lt;p&gt;使用函数指针解决这个问题，
从外部传入输出特定类型节点值的函数，
遍历函数直接调用外部传入的函数进行最终的输出工作。&lt;/p&gt;
&lt;p&gt;第一次使用C++的函数指针，还是蛮好玩的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Linklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;listprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nodeprinter&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;nodeprinter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</summary><category term="C/C++"></category><category term="data structure"></category></entry><entry><title>Vim经验记录(一):与系统共享剪贴板</title><link href="/VimExperience001.html" rel="alternate"></link><updated>2014-02-13T12:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-02-13:VimExperience001.html</id><summary type="html">&lt;p&gt;这几天玩剪贴板搞得灰头土脸，
幸好现在终于找到最佳的解决方案了，
虽然好用，方法还是有点猥琐。&lt;/p&gt;
&lt;p&gt;博主主要的目的在于多个Vim之间可以共享剪贴板。
写博文的时候，
像上一篇博文中就有非常多的代码片段，
因此需要快捷的复制粘贴操作。&lt;/p&gt;
&lt;p&gt;目标：&lt;/p&gt;
&lt;blockquote&gt;
找到一种方法方便快速地访问系统剪贴板，
使Vim支持从系统剪贴板中复制粘贴数据，
通过系统剪贴板快捷地与其他应用程序交换数据，
如Firefox中网页的某些文本框，
或者与其他Vim进程交换数据。&lt;/blockquote&gt;
&lt;p&gt;环境：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OS: Arch Linux(x64)
Window Manager: X11
DesktopEnvironment: LXDE
Package Manager: Pacman
&lt;/pre&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;鼠标解法&lt;/h2&gt;
&lt;p&gt;最初遇到这个问题时想到了上学期在工作室的Ubuntu系统，
通过配置标神找到的vimrc文件，
可以直接支持鼠标点击、鼠标选择、右键复制粘贴甚至是滚轮翻页。&lt;/p&gt;
&lt;p&gt;不知道是因为桌面环境不一样还是系统问题，
原有的配置文件在Arch Linux加LXDE的环境里会导致Vim出错。&lt;/p&gt;
&lt;p&gt;重新配置了vimrc使现在的Vim支持原有的大部分功能，
然而鼠标的功能还是没有以前那么强悍了。&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set mouse=a         &amp;quot; Enable the use of the mouse.
set selection=exclusive
set selectmode=mouse,key
set nocompatible    &amp;quot; No vi mode
&lt;/pre&gt;
&lt;p&gt;上面的配置语句让Vim支持鼠标选择及滚轮翻页，
然而当想使用右键复制的时候却会发现复制是没有效果的。&lt;/p&gt;
&lt;p&gt;当然这还是一部分解决了粘贴问题，
首先从别的地方复制，
切换到Vim把光标移动到需要粘贴的地方，
进入插入(insert)模式，
这个时候鼠标点右键并粘贴，
东西就进去了。&lt;/p&gt;
&lt;p&gt;但这样还是会有问题，
如果给Vim设定了自动括号补全一类的功能，
粘贴的过程中Vim也会画蛇添足地给粘贴的内容再补全一遍，
如果刚好粘贴的是代码一类的东西，带很多括号，
粘贴完成后需要手动处理多出来的内容。&lt;/p&gt;
&lt;p&gt;而且也太不雅观了。&lt;/p&gt;
&lt;p&gt;这个问题其实在之前Ubuntu中也出现过，
于是博主上Google寻找更加优雅的解决方案。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;寄存器解法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Vim之间的共享数据&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stack Overflow上的更优方案是使用Vim的寄存器。
首先在vimrc里加入一行:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
set clipboard=unnamed
&lt;/pre&gt;
&lt;p&gt;这句将Vim的系统剪贴板指定到匿名寄存器中。&lt;/p&gt;
&lt;p&gt;这样多个Vim之间便可以共享匿名寄存器的数据了，
直接在某个Vim进程中复制（例如yy）一段文本，
在另外的Vim中直接粘贴（p）即可搞定。&lt;/p&gt;
&lt;p&gt;但是这并不是共享操作系统的剪贴板，
因此通过鼠标在其他程序中复制的文本用这种方法无法粘贴，
同时在Vim中复制出来的文本也没有办法共享到其他的程序中去。&lt;/p&gt;
&lt;p&gt;因此需要更加生猛的直接控制操作系统剪贴板的方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;与其他程序的共享剪贴板&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实也非常简单，
Vim的一个特定的寄存器与系统的剪贴板是联动的，
在X11中是加号（+）寄存器。&lt;/p&gt;
&lt;p&gt;因此复制当前行到操作系统的剪贴板中可以这样：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;+yy
&lt;/pre&gt;
&lt;p&gt;然后在其他地方（如Firefox）直接粘贴即可。&lt;/p&gt;
&lt;p&gt;同样，
粘贴到Vim里面去也可以通过操作对应寄存器搞定：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;quot;+p
&lt;/pre&gt;
&lt;p&gt;博主被卡了两天的地方在于，
资料都是这样的解决方案，
博主自己实现的时候却发现一直没有效果。&lt;/p&gt;
&lt;p&gt;最终了解到，vi、vim、gvim是三款不一样的东西。&lt;/p&gt;
&lt;p&gt;只有部分vim的版本是支持桌面环境的剪贴板的，
据称Ubuntu的Gnome环境下有vim-gnome及vim-gtk支持这种操作，
特别注意的是，默认的Vim是不行的...&lt;/p&gt;
&lt;p&gt;Arch就更不用说了，
连make都没有，哈哈～&lt;/p&gt;
&lt;p&gt;解决方案有俩，
一个是装vim-X11 的包，
一个是直接装gvim。&lt;/p&gt;
&lt;p&gt;由于博主已经安装了gvim，
内置了vim-X11包，
因此没法测试直接安装上述的包是否能解决问题。&lt;/p&gt;
&lt;p&gt;不过可以肯定的是，
用gvim可以非常完美的支持剪贴板。&lt;/p&gt;
&lt;p&gt;安装完gvim之后继续像原来一样使用Vim，
gvim会提供给Vim一些强化的功能，
包括剪贴板。&lt;/p&gt;
&lt;p&gt;查看当前Vim是否支持剪贴板可以在终端里敲这个：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
vim --version | grep clipboard
&lt;/pre&gt;
&lt;p&gt;如果有&amp;quot;+xterm_clipboard&amp;quot;说明支持，
如果是&amp;quot;-xterm_clipboard&amp;quot;说明不行。&lt;/p&gt;
&lt;p&gt;剪贴板问题就到此为止了，
下一次记录一下寄存器的一些东西。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Vim"></category></entry><entry><title>C++学习(三)：线性表的奇技淫巧(一)</title><link href="/CppLearning003.html" rel="alternate"></link><updated>2014-02-11T21:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-02-11:CppLearning003.html</id><summary type="html">&lt;p&gt;在Github上建了一个新仓库练习数据结构，
地址在这里：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://github.com/scutLaoYi/data-structure"&gt;https://github.com/scutLaoYi/data-structure&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;clone的话记得在后面加.git后缀(没什么好clone的)。&lt;/p&gt;
&lt;p&gt;我觉得莫名其妙的是代码类型居然被判为57%的C、25%的C++，
以及18%的Objective-C。&lt;/p&gt;
&lt;p&gt;学习的资料上一篇博文已经说过了，是个好地方。&lt;/p&gt;
&lt;p&gt;从线性表学起，实现了资料里说的一些问题，
光看不写的话感觉倒是容易看懂，不过真的写起来总是一大堆问题。&lt;/p&gt;
&lt;p&gt;上哪都一样。&lt;/p&gt;
&lt;p&gt;线性表才看了一半不到，
总结一下自己用的一些实现方法及若干这几天见到的牛逼技术。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;数据结构的实现&lt;/h2&gt;
&lt;p&gt;自己的实现方案使用了类模板，
首先定义了一个节点的结构：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;包含一个节点值及一个指向下一个节点的指针。
构造函数用于初始化指针，赋值为0。&lt;/p&gt;
&lt;p&gt;然后搞了一个freelist用于处理内存。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Freelist&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;Freelist&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;Freelist&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;*&lt;/span&gt; &lt;span class="n"&gt;newnode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;delnode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个搞法是以前学习数据结构大作业的时候了解到的，
delete和new的效率比较低，
因此自定义了节点的申请和释放，
用一个自由链表储存所有闲置的节点，
当某个节点被删除的时候暂存到自由链表里，
当需要新节点的时候先去看有没有空闲的，
没有再new新的节点。&lt;/p&gt;
&lt;p&gt;带来的坏处是内存的占用会比较大。&lt;/p&gt;
&lt;p&gt;在此基础上开始构建线性表。&lt;/p&gt;
&lt;p&gt;此外需要注意的是类模板的实现问题，
以前也遇到过结果时间长了又给忘了。
简单说来不能把template的实现放在cpp文件中，
不然编译的时候会出现符号错误。
最方便的处理方式是把实现贴到头文件的下面去，
去掉cpp文件。&lt;/p&gt;
&lt;p&gt;我记得不同编译器对这个问题的解决方案有些差异，
以前用VC++编译器的时候是在需要使用模板的文件里，
把cpp文件也include进去。
不过这种做法在g++里貌似搞不定，
最终把东西都扔进头文件里了事。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;线性表&lt;/h2&gt;
&lt;p&gt;类的结构倒是非常简单，
搞一个自由链表用于处理节点，
保存一个头节点的指针即可。&lt;/p&gt;
&lt;p&gt;博主的搞法是用一个空值的节点作为头节点，
头节点的nex指针指向第一个有值的节点，
如果链表为空的话头节点的nex指向null。
与教学材料中的不同，
这种搞法的好处是头节点将永远存在，
因此少了非常多的特判，
也不容易出错。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Linklist&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Freelist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;freelist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;实现了几个私有的函数用于处理常见的操作，
简化代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Linklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;step步进函数，
让指针指向自身的nex，
返回布尔值指示结果。&lt;/p&gt;
&lt;p&gt;其他的还包括getend函数获取链表尾节点，
_getnth函数获取某个特定的节点。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;奇技淫巧大收集&lt;/h2&gt;
&lt;p&gt;接下来就是若干特定问题处理的收获了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取链表中间位置值&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个问题在数组里非常容易处理，
直接长度的一半去偏移头指针即可。&lt;/p&gt;
&lt;p&gt;但是在没有保存链表长度的线性表中就比较麻烦，
因为不知道长度所以没有办法知道哪一个是链表中间位置的节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单方案非常直观，
首先遍历链表，数一遍知道链表总长度，
算出中间位置是哪个，
然后再遍历链表到中间位置即可。&lt;/p&gt;
&lt;p&gt;简单方案感觉有点蠢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高效方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两个指针，均从头节点开始，
一个快的指针每次移动两个节点，
一个慢的指针每次移动一个节点。&lt;/p&gt;
&lt;p&gt;当快的指针移动到链表尾部的时候，
慢的指针刚好就在链表的二分之一的位置。&lt;/p&gt;
&lt;p&gt;要多考虑一些边界情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Linklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;getmiddle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;fast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;fast&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slow&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;获取倒数第n个节点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同样，数组的话算一下偏移量直接就出来了。
对于没有长度记录的线性表还是难搞。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;同样是先遍历一遍数长度，
得到长度后再找到目标节点。
根据长度判一下有没有倒数第n个节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高效方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;还是两个指针，
一个在头，
一个在头指针后n个节点的位置。&lt;/p&gt;
&lt;p&gt;同时移动两个指针，每次一个节点，
直到后面那个指针到达线性表的尾部，
此时前面的指针就指向了倒数第n个节点。&lt;/p&gt;
&lt;p&gt;如果一开始就没办法移动到第n个位置则说明线性表没那么长。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;Linklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;getnthfromend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Type&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mainptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;referptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;mainptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;_getnth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ind&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;referptr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;referptr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mainptr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;buf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mainptr&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;反转链表&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就是整个反过来，
数组的话有多种方案可以搞，
比如搞个缓冲区，
两个指针分别从头尾向中间移动，
每次交换两个指针的值，
那么可以交换n/2次，占用额外一个空间搞定。&lt;/p&gt;
&lt;p&gt;链表的话...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;额外的O(n)空间作缓冲区，
遍历一遍原链表，
把内容暂存到缓冲区中，
再遍历一遍链表把内容反向刷新进去。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;高效方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;新建三个指针，
prev, cur, nex。&lt;/p&gt;
&lt;p&gt;直接操每个节点的nex指针，
遍历链表，
每次将cur-&amp;gt;nex赋值给nex，保存下一个需要处理的节点；
将prev赋值给cur-&amp;gt;nex，把当前指针的nex反向指向父节点；
将cur赋值给prev，nex赋值给cur，移动并处理下一个节点。&lt;/p&gt;
&lt;p&gt;最终最后一个节点变成头节点，搞定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;Linklist&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prev&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;prev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;//have some more to deal with&lt;/span&gt;
            &lt;span class="n"&gt;cur&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="c1"&gt;//reach the end of the list&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;nex&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cur&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;写这货还学了一下vim操剪贴板的技术，
研究了有些时日现在终于有比较好的解决方案了，
下次来记录一下。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="C/C++"></category><category term="data structure"></category></entry><entry><title>C++学习(二)：大家一起来Makefile</title><link href="/CppLearning002.html" rel="alternate"></link><updated>2014-02-08T16:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-02-08:CppLearning002.html</id><summary type="html">&lt;p&gt;由于一直没找到好的材料，C++的学习拖了好几天没什么进展。
主要遇到的问题是白书的题目(UVAoj)有些麻烦，之前刷了十几道水题一直很顺利，
到了数据结构系列突然每道题都有点难以理解（难道是自己英语水平突然掉了...），
刷了几天进展很慢，加上每道题都有针对性的代码，对于我这种目标是复习数据结构的不太合适。&lt;/p&gt;
&lt;p&gt;然后玩了两天JavaScript（每页一句模块实现），玩了一天游戏...&lt;/p&gt;
&lt;p&gt;找到一个好地方学习数据结构：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://www.geeksforgeeks.org/data-structures/"&gt;http://www.geeksforgeeks.org/data-structures/&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;今天开始敲了一下线性表，过几天再写点总结。&lt;/p&gt;
&lt;p&gt;然后终于到了这篇的主题，makefile的编写。&lt;/p&gt;
&lt;div class="section" id="make"&gt;
&lt;h2&gt;make&lt;/h2&gt;
&lt;p&gt;所谓的make，是便于编译多个文件的工具，用make可以实现自动化构建软件。
同时使用make可以根据依赖关系自动编译，简化手工操作。
具体的介绍可以查一下make的手册页。&lt;/p&gt;
&lt;p&gt;很多的IDE现在都实现了make的功能，
比如之前用过的Visual Studio系列，Code::block，甚至是Qt SDK的开发环境，
只要建立一个工程，就可以让IDE自动完成多文件编译和依赖检查。&lt;/p&gt;
&lt;p&gt;但Linux下的很多软件还是使用make协助软件的部署，
而像博主这种懒得用IDE的家伙，
手头就一个Vim写代码，一个g++编译（写C++的话），
有时用用gdb调试一番（更多时候是暴力调试...)，
再用上方便的make其实也就差不多了。&lt;/p&gt;
&lt;p&gt;开源社区中也有许多软件是用make的，
就像博主这个网站使用的Pelican，
从源文档加载主题文件（CSS，JS等）转换成静态的HTML页面，
这个过程就使用了make，从而省去了大量的重复命令。&lt;/p&gt;
&lt;p&gt;make默认情况下读取当前文件夹中的makefile文件，
makefile相当于配置文件，
指导make执行命令完成目标代码的编译。&lt;/p&gt;
&lt;p&gt;make不限于特定的语言，
博主把它放在C++栏目中是因为历史上很多很多人用make协助编译C/C++代码。&lt;/p&gt;
&lt;p&gt;举个例子：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
假设要编译三个文件：main.cpp test.h test.cpp，输出为a.out
那么默认情况下每次要这样写：
g++ main.cpp test.h test.cpp -o a.out
如果写好了makefile，每次只需要这样：
make
并且会自动检查依赖，忽略某些未改变的项，提高编译速度
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;获取make&lt;/h2&gt;
&lt;p&gt;据称很多Linux发行版中都自带了make，
我不知道其他人的是什么情况，
反正博主手头的Arch Linux没有...(=_=)&lt;/p&gt;
&lt;p&gt;不过不要紧，pacman -S装一下就有了，非常方便&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="makefile"&gt;
&lt;h2&gt;makefile文件的编写&lt;/h2&gt;
&lt;p&gt;makefile文件的基本语法如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[target]:[dependencies]
[tab]   command
&lt;/pre&gt;
&lt;p&gt;其中target为目标，调用命令make时指定目标即可实现不同的执行过程。&lt;/p&gt;
&lt;p&gt;dependencies为依赖项，make执行时首先检查对应目标的依赖是否满足，
如果搜索到存在对应的文件，且在上次执行后没有被更改，则认定该项依赖满足，
否则搜索查找对应依赖项的目标并首先执行它，获取目标依赖。
当所有依赖满足后执行最终目标。&lt;/p&gt;
&lt;p&gt;tab就是一个tab制表符。&lt;/p&gt;
&lt;p&gt;command才是最终被执行的命令语句，如&amp;quot;g++ main.cpp -o a.out&amp;quot;之类。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一个最简单的makefile&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
all:
    g++ main.cpp test.h test.cpp -o a.out -Wall -g
&lt;/pre&gt;
&lt;p&gt;all是默认make的目标。
上面这两行定义了最简单的makefile，将它保存并执行如下语句：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make
&lt;/pre&gt;
&lt;p&gt;make后不加参数，因此make执行makefile文件;
由于没有设定目标，因此选择默认目标all;
由于all目标没有依赖项，因此可以直接执行;
最终那句g++被执行，完成编译（输出a.out，显示警告，添加debug信息用于gdb调试）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;多目标带依赖项的makefile&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
all: main

main: main.o test.o
    g++ main.o test.o -o a.out -Wall -g

main.o: main.cpp
    g++ -c main.cpp

test.o: test.cpp test.h
    g++ -c test.h test.cpp
&lt;/pre&gt;
&lt;p&gt;基本上一目了然，
默认目标依赖main目标，
mian目标依赖main.o和test.o，
两个o文件依赖对应的源文件和头文件。&lt;/p&gt;
&lt;p&gt;这种情况下首次执行make，由于所有依赖都不满足，
因此最先被执行的是编译main.cpp，
其次执行编译test.cpp和test.h，
最后编译出a.out。&lt;/p&gt;
&lt;p&gt;而在所有文件都没有变化的情况下再次执行make，
由于两个依赖都存在，
因此只有编译a.out的那句被执行了一次。&lt;/p&gt;
&lt;p&gt;make自动检测文件变化，
因此会自动重新编译被修改过的文件。&lt;/p&gt;
&lt;p&gt;此外，还可以指定make目标以编译部分文件，指定目标的命令如下：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make main.o
&lt;/pre&gt;
&lt;p&gt;这句指定编译main.o目标。&lt;/p&gt;
&lt;p&gt;如果目标已经存在并且是最新，则make会提示：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make: 'main.o' is up to date.
&lt;/pre&gt;
&lt;p&gt;插句话，-c选项让g++编译并不链接文件，生成的文件为原文件名替换上.o后缀。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;带参数和注释的makefile&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可以在makefile中指定参数，
同时可以写注释。&lt;/p&gt;
&lt;p&gt;感觉比较简单，贴个例子就可以了：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
#这是注释，用井号开头就可以了
#声明参数要像下面这样
OUTPUT=a.out
#使用的话是这样：

all:
    g++ main.cpp -o $(OUTPUT) -Wall -g
&lt;/pre&gt;
&lt;p&gt;上面的例子就定义了输出文件名参数，
这样在多个地方都可以通过“钱+小括号”的形式使用参数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不想用makefile做文件名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;随便搞，只要在make的时候麻烦一点给个参数指定文件名即可：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make -f my_makefile
&lt;/pre&gt;
&lt;p&gt;使用my_makefile文件作为配置文件。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;make的各种功能&lt;/h2&gt;
&lt;p&gt;学会写makefile之后应该能够看出来，
make其实是通过构造shell命令执行功能的，
因此发挥想象力，用make可以搞定非常多的东西。&lt;/p&gt;
&lt;p&gt;一个非常简单的例子是自动清空当前文件夹的编译过程文件：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
all:
#......

clean:
    rm -rf *.o *.gch
&lt;/pre&gt;
&lt;p&gt;这样，执行&lt;/p&gt;
&lt;pre class="literal-block"&gt;
make clean
&lt;/pre&gt;
&lt;p&gt;即可搞定清扫工作。&lt;/p&gt;
&lt;p&gt;当然&amp;quot;rm -rf&amp;quot;是比较狠的，使用要小心。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="C/C++"></category></entry><entry><title>md5 generator</title><link href="/md5-generator.html" rel="alternate"></link><updated>2014-02-04T11:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-02-04:md5-generator.html</id><summary type="html">
        &lt;p&gt;一个非常好用的md5散列计算工具&lt;/p&gt;
        &lt;p&gt;从网上搜刮的一个JavaScript实现的md5算法，许可协议为BSD License。URL在这里：
        &lt;a href="http://pajhome.org.uk/crypt/md5/index.html"&gt;JavaScript md5&lt;/a&gt;
        &lt;/p&gt;
        &lt;p&gt;恢复函数是博主用JavaScript做的，倒计时十秒。&lt;/p&gt;
        &lt;br /&gt;
        &lt;input type="password" id="strInput"&gt;&lt;/input&gt;
        &lt;br /&gt;
        &lt;button onclick="getHash()"&gt;Hash dear, hash!&lt;/button&gt;
        &lt;br /&gt;
        &lt;h4 id="resultlabel"&gt;No result yet.&lt;/h4&gt;
        &lt;h4 id="timerlabel"&gt;&lt;/h4&gt;
        &lt;br /&gt;

    &lt;script src="add_ons/md5-min.js"&gt;&lt;/script&gt;
    &lt;script&gt;
        var TIMEOUT = 10;// ten seconds.
        var md5timer;
        var timerlabel = document.getElementById("timerlabel");
        var resultlabel =document.getElementById("resultlabel"); 

        function cleartimer()
        {
            clearInterval(md5timer);
            resultlabel.innerHTML="No result yet.";
            timerlabel.innerHTML="Timer stop.";
        }

        function settimeout()
        {
            var timecounter = 0;
            md5timer = setInterval(function(){
                    timecounter += 1;
                    timerlabel.innerHTML = ("time remaining:"+
                        (TIMEOUT-timecounter)+
                        " second(s)");
                    if(timecounter &gt; TIMEOUT)
                        cleartimer();
                    }, 1000);
        }
            
        function getHash()
        {
            var source = document.getElementById("strInput");
            var result = hex_md5(source.value);
            resultlabel.innerHTML = result;
            settimeout();
        }
    &lt;/script&gt;
    </summary><category term="md5"></category></entry><entry><title>C++学习(一):白书基础总结</title><link href="/CppLearning001.html" rel="alternate"></link><updated>2014-01-31T16:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-31:CppLearning001.html</id><summary type="html">&lt;p&gt;装完Arch Linux最近开始复习一下C++和数据结构，为下学期做好准备。&lt;/p&gt;
&lt;p&gt;用白书刷一些简单的题目复习基本语法，发现自己太不注重基本的东西了，之前瞎搞ACM的时候也是，好多方便有效的工具都不认识。&lt;/p&gt;
&lt;p&gt;因此记录一下标准库的一些基本的工具和输入输出的简单总结。&lt;/p&gt;
&lt;p&gt;本篇主要记录一些C语言的常用工具。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;输入输出及文件操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;scanf&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这货读取输入并对相应的内存地址赋值。
分割符是空格、回车及制表符等。&lt;/p&gt;
&lt;p&gt;返回值是一个整型表示成功读取到的数据量。
读取失败或者EOF文件结束都会停止。&lt;/p&gt;
&lt;p&gt;默认情况下scanf不会吃掉行尾的回车，
需要让它吃掉行尾回车的话可以这样：&lt;/p&gt;
&lt;p&gt;scanf(&amp;quot;%d\n&amp;quot;, &amp;amp;num)&lt;/p&gt;
&lt;p&gt;上面这句首先读了一个整型值给变量num，并且吃掉了后面的一个\n&lt;/p&gt;
&lt;p&gt;当然这种搞法的缺陷在于只能用于Linux类型系统，
因为windows和Mac OS的回车符都不一样。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;sscanf/fscanf&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;scanf的姊妹版本，分别读取字符串或者文件。&lt;/p&gt;
&lt;p&gt;sscanf使用的时候加入第一个参数指定输入的源字符串。&lt;/p&gt;
&lt;p&gt;fscanf使用的时候加入第一个参数指定输入的源文件指针。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;fgets(buffer, size, source)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从输入源source中读入一行字符数据到buffer缓冲区中，最大长度为size。
超过size部分会被忽略。&lt;/p&gt;
&lt;p&gt;buffer为一个char数组，size为整型值定义长度。&lt;/p&gt;
&lt;p&gt;source可以为文件等，默认的终端标准输入(standard input)是这个： stdin&lt;/p&gt;
&lt;p&gt;fgets与scanf混用的话由于scanf默认不吃掉行尾回车，会导致scanf之后fgets第一行没有内容。
处理方法就是上面说的改进版本scanf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;fgetc(source)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从source中读取一个字符并返回。
注意返回值是int。&lt;/p&gt;
&lt;p&gt;使用fgetc需要检查返回值不是EOF，然后再转换为char获取得到的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;重定向版本的文件操作&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;从文件读取数据可以使用多种方法，
最简单的是输入重定向，
将stdin指向文件。&lt;/p&gt;
&lt;p&gt;一、&lt;/p&gt;
&lt;p&gt;freopen(&amp;quot;filename&amp;quot;, &amp;quot;r&amp;quot;, stdin);&lt;/p&gt;
&lt;p&gt;将filename文件以读(r)方式打开，并重定向到stdin中。
后续的操作便可以直接scanf搞定。&lt;/p&gt;
&lt;p&gt;同样，输出也可以这么搞：&lt;/p&gt;
&lt;p&gt;freopen(&amp;quot;outputfilename&amp;quot;, &amp;quot;w&amp;quot;, stdout);&lt;/p&gt;
&lt;p&gt;二、&lt;/p&gt;
&lt;p&gt;此外，白书没有说的一种方式是直接在终端里运行程序的时候重定向。&lt;/p&gt;
&lt;p&gt;./a.out &amp;lt; data &amp;gt; out&lt;/p&gt;
&lt;p&gt;其中a.out是可执行文件，利用&amp;lt;将data数据文件作为输入，利用&amp;gt;将输出重定向到out文件&lt;/p&gt;
&lt;p&gt;这种搞法的好处是随时可以指定输入输出，不用重新编译。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;文件流版本的文件操作&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;标准的文件操作，包含打开文件、操作文件和关闭文件。&lt;/p&gt;
&lt;p&gt;FILE * fin = fopen(&amp;quot;filename&amp;quot;, &amp;quot;mode&amp;quot;)&lt;/p&gt;
&lt;p&gt;打开filename文件，mode可以为r或者w，加上b的话貌似是二进制方式操作。
返回值是一个FILE *类型的指针，指向打开的文件。&lt;/p&gt;
&lt;p&gt;用fscanf替换scanf，添加第一个参数指定输入的文件指针，例如：&lt;/p&gt;
&lt;p&gt;fscanf(fin, &amp;quot;%d&amp;quot;, &amp;amp;num)&lt;/p&gt;
&lt;p&gt;从fin这个FILE *中读取一个整型值给num变量&lt;/p&gt;
&lt;p&gt;fgets的话直接就可以用了：&lt;/p&gt;
&lt;p&gt;fgets(buf, size, fin)&lt;/p&gt;
&lt;p&gt;最后记得关闭文件&lt;/p&gt;
&lt;p&gt;fclose(fin)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;printf/sprintf/fprintf&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
相当那个scanf三兄弟，不再赘述。&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;标准库的一些方便的工具&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;cstring&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;字符串一类的操作就不用说了，strcmp啦strcpy啦strcat啦都非常方便。&lt;/p&gt;
&lt;p&gt;此外strstr返回目标串中某子串最早出现位置的指针，有时能有奇效。&lt;/p&gt;
&lt;p&gt;这里主要想记录的是两个内存操作的工具：&lt;/p&gt;
&lt;p&gt;memset(void *ptr, int value, size_t size)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查了相关的资料，memset是按字节操作的，虽然传入的value是一个int，
但处理的时候会被转换成unsigned char进行赋值。&lt;/p&gt;
&lt;p&gt;因此处理字符数组是没有问题的，比如给一个字符数组刷二十个字符'a':&lt;/p&gt;
&lt;blockquote&gt;
memset(target, 'a', 20)&lt;/blockquote&gt;
&lt;p&gt;但是处理数字的时候就存在问题了，例如常用的int占四个字节，照着原理来讲0或者-1是可以的。
因为按照数字的储存方式（补码）来说，0的话所有位都是0，-1的话所有位都是1，
刚好绕过了int与byte之间的大小区别。
因此可以用memset刷int型数组：&lt;/p&gt;
&lt;blockquote&gt;
memset(numAry, 0, sizeof(numAry)) //将数组的所有元素刷成0&lt;/blockquote&gt;
&lt;p&gt;这里就需要注意刷的内存块的大小，
因为是按字节操作，因此总的大小应该是每个int的大小(sizeof(int))乘上需要刷的元素个数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;memcpy(void *dis, void *source, size_t size)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;仍然是按字节操作，
从source指针指向的地址开始，
将size个字节复制，
存储到从dis指向的地址开始的后size个字节。&lt;/p&gt;
&lt;p&gt;由于这货直接操某块内存，因此不仅能用于复制数组：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
int ary1[] = {1,2,3,4,5};
int ary2[5];
memcpy(ary2, ary1, sizeof(int) * 5);
&lt;/pre&gt;
&lt;p&gt;还能直接搞结构体：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
struct MyStr{
    int num,
    char str[100]
};
MyStr str1, str2;
//...
memcpy(&amp;amp;str2, &amp;amp;str1, sizeof(str1));
&lt;/pre&gt;
&lt;p&gt;注意要取址符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;cctype&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这货非常方便，拥有一堆检测的库函数。&lt;/p&gt;
&lt;p&gt;常用的有以下几个：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
isdigit:检测是否数字
isalpha:检测是否字母（含大小写）
isupper:检测是否大写字母
islower:检测是否小写字母
&lt;/pre&gt;
&lt;p&gt;还有俩牛逼的货色：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
toupper:将字母转换成大写
tolower:将字母转换成小写
&lt;/pre&gt;
&lt;p&gt;博主比较懒，有时不检测就直接tolower操数据，
发现这货健壮性很好，数字什么的进去也就原样出来，不会死掉，方便！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;cstdio&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;上面说的输入输出基本都是这个库的东西。&lt;/p&gt;
&lt;p&gt;此外还有一个有用的函数：&lt;/p&gt;
&lt;blockquote&gt;
feof(source)&lt;/blockquote&gt;
&lt;p&gt;检测source源是否为EOF状态。
source可以是文件指针也可以是stdin。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;cstdlib&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个用得多的是快排：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
void qsort (void* base, size_t num, size_t size,
        int (*compar)(const void*,const void*));
&lt;/pre&gt;
&lt;p&gt;然后在写这篇博文的时候发现居然还有这个：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
void* bsearch (const void* key, const void* base,
               size_t num, size_t size,
              int (*compar)(const void*,const void*));
&lt;/pre&gt;
&lt;p&gt;随机数，常用的，先用时间作为随机种子，然后用库函数获取随机值：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
//首先需要包含ctime头文件
//然后将当前时间作为随机种子
srand(time(NULL));
//获取一个小于100的随机值
int randVal = rand() % 100
&lt;/pre&gt;
&lt;p&gt;rand函数随机值的范围与库的实现有关，但可以保证最小值为0，最大值不小于32767的整数&lt;/p&gt;
&lt;p&gt;越看越神奇，还有一堆字符串转换的函数，以后处理字符串都调标准库算了：
atoi, atof, atol......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好多东西，记多也记不住，还是要多在实践中应用。&lt;/p&gt;
&lt;p&gt;发现写博客的好处在于,当你要讲明白一个东西时，要花更多的时间去搞清楚这货的各个方面。
有时第一次使用的时候只是知道能这么用，但在写博客的时候却要弄清楚更深入一些的原理。
既有助于加深理解，也有助于整理思路。&lt;/p&gt;
&lt;p&gt;不过博主整天只会写一些基础学习，东拼西凑再随便写点个人理解～ (=_=)&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;最后，大年初一，大家新年快乐！ (^_^)&lt;/p&gt;
&lt;/div&gt;
</summary><category term="C/C++"></category></entry><entry><title>Arch Linux学习：Arch Linux启动二三事</title><link href="/Arch005.html" rel="alternate"></link><updated>2014-01-20T11:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-20:Arch005.html</id><summary type="html">&lt;p&gt;本系列博文记录学习Arch Linux这个Linux发行版过程中的总结与收获。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="arch"&gt;
&lt;h2&gt;关于Arch的启动流程&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;基本流程&lt;/h3&gt;
&lt;p&gt;在BIOS主板下，
Arch Linux的启动流程大致有以下几个步骤：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1. 电源接通，系统开机自检
2. BIOS搜索并根据配置调用对应的硬件进行启动
3. 假设装有Arch的硬盘作为优先启动项，则硬盘的MBR被BIOS读取执行
4. MBR接管，读取数据启动bootloader
5. bootloader启动，初始化数据及配置文件等
6. bootloader启动完毕，载入linux kernel及initramfs，并启动kernel
7. kernel启动，解包initramfs，初始化早期的用户空间，启动/init作为首个进程
8. initramfs作为临时的根文件系统，载入所有运行系统必须的模块，用于启动引导系统的设备
9. 相应的模块启动成功，系统继续引导，真实的根目录挂载并替换初始化根文件系统
10./sbin/init替换/init继续引导过程，systemd启动
11.进程调用getty，提供登录窗口等待用户登入
12.getty获取用户输入，与/etc/passwd匹配，并根据配置初始化用户的环境
&lt;/pre&gt;
&lt;p&gt;至此，基本的系统启动流程就完成了，
后续的用户登入后的图形界面启动等过程则因人而异。&lt;/p&gt;
&lt;p&gt;UEFI模式的主板由于没有接触，
在此暂时不讨论。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mbr"&gt;
&lt;h3&gt;MBR&lt;/h3&gt;
&lt;p&gt;存储设备的头440字节，
储存特殊的启动数据，
以及磁盘的相关信息。&lt;/p&gt;
&lt;p&gt;详细：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Master_Boot_Record"&gt;https://wiki.archlinux.org/index.php/Master_Boot_Record&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="bootloader"&gt;
&lt;h3&gt;Bootloader&lt;/h3&gt;
&lt;p&gt;根据IBM相关资料的说法，
Bootloader紧跟在MBR之后，
负责启动kernel并传入相应参数，
以及initramfs的载入。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Boot_Loaders"&gt;https://wiki.archlinux.org/index.php/Boot_Loaders&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="kernel"&gt;
&lt;h3&gt;Kernel&lt;/h3&gt;
&lt;p&gt;操作系统的核心，
沟通应用程序与系统硬件之间的桥梁，
管理系统资源。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Kernel"&gt;https://wiki.archlinux.org/index.php/Kernel&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="initramfs"&gt;
&lt;h3&gt;Initramfs&lt;/h3&gt;
&lt;p&gt;支撑系统启动的一个重要的环节。
这货据称用于创建一个早期的用户空间，
启动所有必备的模块，
包括但不限于IDE设备，SCSI设备，SATA设备及USB设备等。
当系统被储存在USB等设备上时，
支撑USB设备的模块必须首先被启动，否则系统没有办法从USB上读取接下去的数据。
因此initramfs专门用于处理这种模块的启动。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/initramfs"&gt;https://wiki.archlinux.org/index.php/initramfs&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="getty"&gt;
&lt;h3&gt;Getty&lt;/h3&gt;
&lt;p&gt;不是一个东西，
是一类终端管理器的总称。
提供了系统登录、用户验证等功能。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Getty"&gt;https://wiki.archlinux.org/index.php/Getty&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="systemd"&gt;
&lt;h3&gt;systemd&lt;/h3&gt;
&lt;p&gt;Linux系统的系统和服务管理器。
提供一个抢占式的系统并行处理能力，
同时还提供了多种系统快照和恢复的功能。&lt;/p&gt;
&lt;p&gt;systemd的终端控制命令为&lt;/p&gt;
&lt;blockquote&gt;
systemctl&lt;/blockquote&gt;
&lt;p&gt;可以通过man详细了解一下。&lt;/p&gt;
&lt;p&gt;感觉这货什么东西都能够管理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/systemd"&gt;https://wiki.archlinux.org/index.php/systemd&lt;/a&gt;&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;概念一多有些都搞得有点乱。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;图形化启动界面&lt;/h2&gt;
&lt;p&gt;不知道grub的bootloader默认的启动界面是怎么样的，
之前用ubuntu的时候还是挺好看的，
背景是一个地球以及debian的logo。&lt;/p&gt;
&lt;p&gt;syslinux就有点难看了，
蓝色的底色，白色的字，
没有背景图。&lt;/p&gt;
&lt;p&gt;好在syslinux提供了启动界面的图形化显示，
就像live cd默认的那种style。
更换起来也非常简单。&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/syslinux"&gt;https://wiki.archlinux.org/index.php/syslinux&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;教程中有详细的说明，
基本的处理是改配置文件。&lt;/p&gt;
&lt;p&gt;首先需要一份vesamenu.c32，
在我的系统里目录下本来就已经有了，
因此这一步被我跳过。&lt;/p&gt;
&lt;p&gt;然后把配置文件/boot/syslinux/syslinux.cfg内容更换一下，
主要的点在于UI那个部分，
从原来的menu.c32更换成刚才复制的那个vesamenu.c32，
还有设置了一些菜单的位置啊色彩啦之类的。&lt;/p&gt;
&lt;p&gt;接着要弄一张背景图片。
博主太懒了，感觉live cd的那个图片还挺好看，
就直接从live cd里相同文件夹里面的splash.png复制了过来，
然后在配置文件里有一项设置背景图片：&lt;/p&gt;
&lt;blockquote&gt;
MENU BACKGROUND splash.png&lt;/blockquote&gt;
&lt;p&gt;即可。&lt;/p&gt;
&lt;p&gt;最后博主还小小改动了一把，
将menu的title换成自己的名字，
效果不错。
^_^&lt;/p&gt;
&lt;p&gt;建议在更改的时候备份一下原文件，
在出问题进不了系统的时候可以用live cd引导，
去相同目录里面把新的配置文件干掉，
恢复原来的配置文件，
即可解决问题。&lt;/p&gt;
&lt;p&gt;修改bootloader的启动界面，完毕。&lt;/p&gt;
&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;一些感受&lt;/h2&gt;
&lt;p&gt;这么些天的学习逐渐了解了一些unix哲学，
像上述的配置文件风格，
在自行geek系统的时候提供了非常大的方便。&lt;/p&gt;
&lt;p&gt;而简单、单一并且强大的程序设计风格也非常令人赏心悦目。
接口定义良好、内部严谨的程序为多个程序的协作提供了非常方便的平台，
很多时候我们需要的只是一个管道，
便可完成非常复杂的处理。&lt;/p&gt;
&lt;p&gt;系统部件之间的耦合度降低也很有利于整体结构的清晰，
通过强大的管理器（pacman之类），
新增或者删除某些部件不会对其他无关的组件造成影响。
同时这也让删除操作更加彻底，
就像pacman，除了一些配置文件，
系统能够自动分析并删除所有属于被删除组件的文件。
不像某Xindows，
藏污纳垢，程序之间一大堆错综复杂的关系，
还需要专门的工具进行垃圾清理...
最经典的实例来自同学安装SQL server的时候，
由于Visual Studio的SQL server lite部件没有彻底删除导致新的SQL server无法安装，
处理了好几天才搞定。&lt;/p&gt;
&lt;p&gt;在此之上的arch linux不仅传承了unix哲学的精华，
还将simple的style更加发扬光大。&lt;/p&gt;
&lt;p&gt;基础性简单性的安装给用户提供了非常透明的基本系统，
让用户随时掌握当前的状态并随时能够作出调整；
同时，最大限度的自由选择和自由配置让用户能够随时geek属于自己的最适合的系统，
相比某dows的系统结构，虽然给一般用户非常简单的上手，
但在图形界面没有相关功能或者崩溃了的情况下用户许多时候却束手无策。
所以博主经常被拉去帮忙重装系统...&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Arch"></category></entry><entry><title>Arch Linux学习：Repository与Pacman小记</title><link href="/Arch004.html" rel="alternate"></link><updated>2014-01-17T19:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-17:Arch004.html</id><summary type="html">&lt;p&gt;本系列博文记录学习Arch Linux这个Linux发行版过程中的总结与收获。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="arch-linux"&gt;
&lt;h2&gt;Arch Linux 仓库&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;仓库的分类&lt;/h3&gt;
&lt;p&gt;Arch Linux的官方仓库包含如下的五个类别：
Core, Extra, Community，Multilib，Testing&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;仓库简介&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;core&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;core仓库包含了所有系统必备的包。
例如bootloader，kernel，building packages等。
貌似安装系统的时候敲pacstrap的时候就是通过连接镜像站点并获取core内容完成本地系统安装的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;extra&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;extra仓库包含了所有不是系统必须的包。
类似于Firefox啦X11图形界面啦mplayer啦都在里面。
另外Python之类的也属于extra的内容。
据说这个仓库比较庞大，毕竟许多常用的东西都在里面。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;community&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个仓库存放了所有社区中可信用户提交并获得投票通过的包。&lt;/p&gt;
&lt;p&gt;社区中用户可以提交自己的包到AUR中，
所谓的AUR全称是Arch User Repository，
用户可以在AUR中下载并编译别人写的包，
再让pacman安装到自己的系统中。&lt;/p&gt;
&lt;p&gt;经过大家的使用鉴定，
可以通过投票表决某些好用的包进入community仓库。&lt;/p&gt;
&lt;p&gt;AUR和community的关系就显而易见了，
pacman只能直接获取community的内容，
AUR的东西需要自行下载安装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;multilib&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有点神奇的仓库，
存放了许多32位的库文件，
针对64位系统提供32位软件的构建和执行的能力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;顾名思义，
正在测试的包可以在这个仓库里找到。
一个包被弄进testing的原因一种是可能会破坏当前的系统，因此需要测试；
或者是正等待其他依赖的包重新构建。&lt;/p&gt;
&lt;p&gt;testing中的包最终会被弄进core或者extra里面去。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;博主查看了本地的pacman设置文件，
默认情况下pacman只启用core,extra和community三个仓库。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pacman"&gt;
&lt;h2&gt;Pacman的简介、配置与基本命令&lt;/h2&gt;
&lt;p&gt;Pacman是Arch Linux的包管理器，
类似于Ubuntu的apt，
提供了自动化的依赖关系管理维持、
自动化的仓库更新和本地系统更新，
以及本地的包管理。&lt;/p&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;相关文件&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
pacman的日志记录：/var/log/pacman.log
pacman的配置文件：/etc/pacman/pacman.conf
pacman的镜像列表：/etc/pacman.d/mirrorlist
pacman的本地cache文件夹：/var/cache/pacman/pkg/
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;配置&lt;/h3&gt;
&lt;p&gt;pacman的配置文件在这里: /etc/pacman.conf&lt;/p&gt;
&lt;p&gt;可以查man pacman.conf看到所有配置的字段。&lt;/p&gt;
&lt;p&gt;在Repository块中去掉对应的项前面的注释便可以启用相应的仓库，
包括testing、multilib等。
注意使用testing的时候需要把它放置在仓库列表的最上一项，
因为testing中的包与其他仓库的包可能重名。&lt;/p&gt;
&lt;p&gt;没事还是别拿testing开玩笑的好。&lt;/p&gt;
&lt;p&gt;另外在IgnorePkg后面的包将会被pacman无视，不会自动更新。
在IgnoreGroup后面的组也不会被更新。&lt;/p&gt;
&lt;p&gt;不推荐使用Ignore，
因为连带的更新会让依赖的包版本变化，
某些单独的包不被更新很容易出现依赖问题。&lt;/p&gt;
&lt;p&gt;这种事情在博主安装virtualbox的时候就出现过，
由于kernel版本过旧导致依赖kernel的virtualbox出现问题无法启动。&lt;/p&gt;
&lt;p&gt;都是些不太常用的配置。&lt;/p&gt;
&lt;p&gt;下面这货才是主要的，
镜像列表的编辑：&lt;/p&gt;
&lt;p&gt;从这里搞一份镜像列表：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://www.archlinux.org/mirrorlist/"&gt;https://www.archlinux.org/mirrorlist/&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;贴到本地的mirrorlist文件中：&lt;/p&gt;
&lt;blockquote&gt;
/etc/pacman.d/mirrorlist&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;常用命令&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;刷新包列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如前面的博文说过的，
更新过mirrorlist的话要用这货更新包的列表：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Syy&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装特定的若干个包敲这个命令：&lt;/p&gt;
&lt;blockquote&gt;
pacman -S package1 package2 ......&lt;/blockquote&gt;
&lt;p&gt;也可以安装一个组，例如gnome：&lt;/p&gt;
&lt;blockquote&gt;
pacman -S gnome&lt;/blockquote&gt;
&lt;p&gt;这种情况下pacman会出一个列表询问需要安装包组里面的哪些特定的包，或者是全部。&lt;/p&gt;
&lt;p&gt;有时候在多个仓库中存在相同的包，那么需要在名称前加入仓库名称指定：&lt;/p&gt;
&lt;blockquote&gt;
pacman -S repo_name/package_name&lt;/blockquote&gt;
&lt;p&gt;跟apt一样，
不用处理依赖关系，
pacman会自动连带安装所有必须的依赖。&lt;/p&gt;
&lt;p&gt;另外博主在使用的时候发现，
在安装好某些包后可选的依赖也会被列举出来，
提醒用户可安装某些额外的功能。&lt;/p&gt;
&lt;p&gt;在某个包已被安装的情况下，
pacman会尝试重新安装，
不管当前的版本是否有差别。
这种特性可以通过加入 --needed 选项去除。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;特殊的安装&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
pacman -U path/to/file.pkg.tar.xz&lt;/blockquote&gt;
&lt;p&gt;上面这货可以从本地安装不在镜像服务器中的包。
用于从AUR中下载的包需要这种安装方式。
此外上面的路径可以换成url。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;删除&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;删除某个包（仅删除该包，没有处理依赖）：&lt;/p&gt;
&lt;blockquote&gt;
pacman -R package&lt;/blockquote&gt;
&lt;p&gt;删除某个包并把它的依赖（如果没有被其他包依赖的话）连带删除：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Rs package&lt;/blockquote&gt;
&lt;p&gt;删除某个包、其依赖的包、以及依赖它的包： (-_-)&lt;/p&gt;
&lt;blockquote&gt;
pacman -Rsc package&lt;/blockquote&gt;
&lt;p&gt;删除某个包并忽略所有依赖它的包：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Rdd package&lt;/blockquote&gt;
&lt;p&gt;/*这里有一个补充说明，
默认情况下pacman是不允许删除被依赖的包的，
博主在之前删除ibus的时候，
ibus-googlepinyin还存在依赖关系，
导致pacman 报错退出。*/&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;升级&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;全自动升级&lt;/p&gt;
&lt;blockquote&gt;
pacman -Syu&lt;/blockquote&gt;
&lt;p&gt;官方的说法是升级的时候需要小心，
需要确定pacman列出的升级列表，
还要确定是否需要手动处理一些配置文件的替换工作。&lt;/p&gt;
&lt;p&gt;可供参考的有arch官方的RSS订阅，announce的邮件列表以及twitter账户。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;查询数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据库有两款，
其一是本地local数据库，
保存的是当前系统安装的包;
其二是远端镜像sync仓库中当前的列表，
保存所有最新的数据。&lt;/p&gt;
&lt;p&gt;可用-Q参数查询local库，
用-S参数查询sync数据库。&lt;/p&gt;
&lt;p&gt;搜索包含某个关键词的包：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Ss string1 string2 string3 ...&lt;/blockquote&gt;
&lt;p&gt;搜索本地库就把S改成Q：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Qs string1 ...&lt;/blockquote&gt;
&lt;p&gt;加入i参数可查看某个包的详细信息(注意上面是字段搜索，这个是包名称)：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Si package&lt;/blockquote&gt;
&lt;p&gt;同样，查看本地：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Qi package&lt;/blockquote&gt;
&lt;p&gt;两个i的话可以查看连带的备份文件及编辑状态(啥...)&lt;/p&gt;
&lt;blockquote&gt;
pacman -Qii package&lt;/blockquote&gt;
&lt;p&gt;列出所有该包安装的文件(拿kernel试了一发，效果不错)：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Ql package&lt;/blockquote&gt;
&lt;p&gt;反向查询某个文件属于的包：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Qo path/to/file&lt;/blockquote&gt;
&lt;p&gt;列出所有不再被依赖的包(一直在纠结能不能把搜出来的东西给删掉...)：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Qdt&lt;/blockquote&gt;
&lt;p&gt;还能树状列出某个包的依赖：&lt;/p&gt;
&lt;blockquote&gt;
pactree package&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;缓存的相关内容&lt;/h3&gt;
&lt;p&gt;pacman的安装机制是这样的，
首先从mirrorlist中查询url，
从url中搜索是否存在目标包，
如果没有的话则返回404，
继续搜索下一个url，
找到的话则下载对应的包。&lt;/p&gt;
&lt;p&gt;下载完成放在cache目录里，
也就是/var/cache/pacman/pkg&lt;/p&gt;
&lt;p&gt;最后从本地的cache中安装对应的包到系统里面，
完成。&lt;/p&gt;
&lt;p&gt;升级也是一样的处理，
下载并存放到cache里，
再安装新版本的软件。&lt;/p&gt;
&lt;p&gt;于是ls一发cache目录可以找到所有之前安装过的包文件。&lt;/p&gt;
&lt;p&gt;根据Arch官方的说法，保留旧版本的包的好处在于如果新版本运行出现问题，
可以使用手头的旧版本降级处理解决。&lt;/p&gt;
&lt;p&gt;但感觉咱这种循规蹈矩整天看着wiki安装extra仓库东西的人，
应该不会手气太差，
加上那么一堆安装包感觉很占地方。&lt;/p&gt;
&lt;p&gt;于是可以使用下面的命令清理一下：&lt;/p&gt;
&lt;p&gt;清除所有旧版本的包：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Sc&lt;/blockquote&gt;
&lt;p&gt;Arch的推荐是确定当前版本没有问题的情况下才执行这种操作，
否则出现问题比较麻烦。&lt;/p&gt;
&lt;p&gt;清除缓存：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Scc&lt;/blockquote&gt;
&lt;p&gt;整个缓存清空。Arch官方不推荐这种操作。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;pacman的基本用法就这么多了，
查询其他额外信息，找man是不错的选择，另外也可以去这里：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Pacman"&gt;https://wiki.archlinux.org/index.php/Pacman&lt;/a&gt;&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Arch"></category></entry><entry><title>Arch Linux学习：安装篇(三)</title><link href="/Arch003.html" rel="alternate"></link><updated>2014-01-16T19:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-16:Arch003.html</id><summary type="html">&lt;p&gt;本系列博文记录学习Arch Linux这个Linux发行版过程中的总结与收获。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="virtualbox"&gt;
&lt;h2&gt;关于VirtualBox的安装&lt;/h2&gt;
&lt;p&gt;看了教程感觉很难搞，光是篇幅就吓死人。&lt;/p&gt;
&lt;p&gt;昨天看清楚才发现原来是自己搞错了，
在Arch Linux里装VirtualBox是不难的，
大概也就两页的篇幅。&lt;/p&gt;
&lt;p&gt;首先需要以下的包，
用pacman装就可以了。&lt;/p&gt;
&lt;blockquote&gt;
virtualbox&lt;/blockquote&gt;
&lt;p&gt;pacman会自动连带安装host-modules。&lt;/p&gt;
&lt;p&gt;别想不开用终端去操作，
再装个Qt吧，
装完就有熟悉的界面了，
如果以前用过virtualbox的话。&lt;/p&gt;
&lt;blockquote&gt;
qt4&lt;/blockquote&gt;
&lt;p&gt;我用的是默认的kernel，
所以接下去就不用怎么配置了，
如果想每次手动启动virtualbox的话，
在启动之前敲这个就可以了：&lt;/p&gt;
&lt;blockquote&gt;
modprobe vboxdrv&lt;/blockquote&gt;
&lt;p&gt;像我这种整天挂个win7当代理服务器的，
把这个模块扔到启动配置文件里去比较方便。&lt;/p&gt;
&lt;p&gt;方法是在/etc/modules-load.d/里建立一个新的*.conf文件，
起个好听的名字，比如virtualbox.conf，
内容就加入这句即可：&lt;/p&gt;
&lt;blockquote&gt;
vboxdrv&lt;/blockquote&gt;
&lt;p&gt;这样就能够在每次启动的时候自动启动这个模块。&lt;/p&gt;
&lt;p&gt;据称这个模块作为虚拟机的基础模块，
必须在启动虚拟机前正确启动。
自己测试的时候如果没有启动这货直接启动虚拟机，
系统会报错并退出。&lt;/p&gt;
&lt;p&gt;然后，
桌面环境里开启virtualbox，
该干嘛干嘛。&lt;/p&gt;
&lt;div class="section" id="troubleshooting"&gt;
&lt;h3&gt;troubleshooting&lt;/h3&gt;
&lt;p&gt;虽然教程说的非常简单，
博主在安装的时候还是出了很大的问题。&lt;/p&gt;
&lt;p&gt;在安装完启动vboxdrv的时候系统报错：&lt;/p&gt;
&lt;blockquote&gt;
modprobe: ERROR: could not insert 'vboxdrv': Exec format error.&lt;/blockquote&gt;
&lt;p&gt;搜了半天的google没有找到好的解决方案。
一般遇到这种问题是自制的kernel或者非标准kernel在复杂模式下安装之后可能会出现的。&lt;/p&gt;
&lt;p&gt;可能的情况是virtualbox的编译针对的不是当前的kernel，
导致模块执行失败。&lt;/p&gt;
&lt;p&gt;我就搞不懂了为何官方默认的kernel照着教程搞也会出这种问题。&lt;/p&gt;
&lt;p&gt;有一种解决方案是安装dkms(virtualbox-host-dkms)然后设置vboxhost指向当前版本的kernel。&lt;/p&gt;
&lt;p&gt;照着别人的建议安装了dkms，
指向的时候还是报错，
说没有kernel的header，
貌似是头文件一类的东西。&lt;/p&gt;
&lt;p&gt;遂放弃。&lt;/p&gt;
&lt;p&gt;另有国外牛人的建议是重新编译virtualbox。
先下载virtualbox的源文件，
再下载kernel的header，
最后用dkms编译...&lt;/p&gt;
&lt;p&gt;当时一看头就大了。&lt;/p&gt;
&lt;p&gt;后来结合多方的解决方案，
查了一下发现自己的kernel是3.12.6-1，
跟最新版本3.12.7-1有点差距。
另外官方的virtualbox看样子是针对最新版本的kernel编译，
于是升级了内核：&lt;/p&gt;
&lt;blockquote&gt;
pacman -S linux&lt;/blockquote&gt;
&lt;p&gt;再重新安装了一下virtualbox，
果然问题就解决了。&lt;/p&gt;
&lt;p&gt;经验在于：
官方的仓库一般都是针对最新版本的kernel编译，
所以对于有些对kernel版本非常敏感的程序来说，
出问题的时候要关注一下自己的kernel是否兼容。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nat"&gt;
&lt;h3&gt;NAT网络地址转换与端口转发&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NAT&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学过计算机网络的兄弟对这货应该都不陌生。
virtualbox自带模块能够将host系统作为类似路由的东西，
将guest系统的包全部通过host系统转发出去。&lt;/p&gt;
&lt;p&gt;NAT的优势在于简单、方便、安全。
virtualbox默认启动了NAT，不用配置便可以使用。
在博主亲测下不论是arch linux的guest系统还是windows的guest系统都能够直接识别并自动连接网络。&lt;/p&gt;
&lt;p&gt;其次，host系统作为路由器存在，
对外界隐藏了本地guest系统的存在，
这也就大大降低了guest系统被入侵的几率。&lt;/p&gt;
&lt;p&gt;另外，多个guest虚拟主机之间也杜绝了数据泄漏的问题，因为guest系统之间也是无法互相识别的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;端口转发&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;NAT的一个缺陷在于，
外界无法检测到guest系统的存在，
因此如果有某些服务需要监听端口获取外界的连接（SSL、FTP、http服务器等），
默认情况下NAT无法处理。&lt;/p&gt;
&lt;p&gt;因此就有了端口转发的机制解决这个问题。&lt;/p&gt;
&lt;p&gt;端口转发将host系统的某个端口（或者某个IP的端口）转发到guest系统的某个端口上，
例如将host的80转发到guest的80，
那么在guest上监听80端口的http服务器就可以对外服务了。
而从外部看来就是连接了host的服务器。&lt;/p&gt;
&lt;p&gt;virtualbox里配置端口转发非常方便，
在network里选advance添加端口转发规则即可。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Arch Linux的基本安装和配置就都搞定了，
下一回准备聊一下systemd或者pacman之类的知识和应用。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Arch"></category></entry><entry><title>Arch Linux学习：安装篇(二)</title><link href="/Arch002.html" rel="alternate"></link><updated>2014-01-14T19:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-14:Arch002.html</id><summary type="html">&lt;p&gt;本系列博文记录学习Arch Linux这个Linux发行版过程中的总结与收获。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;当你看到这篇博文的时候，
老逸的新系统已安装完毕，
弹冠相庆！^_^&lt;/p&gt;
&lt;p&gt;替换掉原来恶心的win7+Ubuntu双系统，
现在直接将整个硬盘重新分区并安装Arch Linux.&lt;/p&gt;
&lt;p&gt;分区如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      8:0    0 298.1G  0 disk
├─sda1   8:1    0   500M  0 part /boot
├─sda2   8:2    0    50G  0 part /
├─sda3   8:3    0     2G  0 part [SWAP]
├─sda4   8:4    0   100G  0 part /home
└─sda5   8:5    0 145.6G  0 part /data
&lt;/pre&gt;
&lt;p&gt;除了swap外所有分区均使用ext4。
根据Arch官方说法，留多25%的空间能够消除碎片，
考虑到300G硬盘的实际使用率，因此确定了上面的分区方案。&lt;/p&gt;
&lt;p&gt;boot分区给了夸张的500M，因为1G以下的空间对现在的硬盘来说都不够算。
root分区因为要装一些软件什么的，考虑到之前的Ubuntu只有10G也没用尽，因此给了50G以防以后拓展。
home分区用来存自己的数据，文档啦源码啦，还有我这网站的content也在里面，乱七八糟的都放，给了个100G。
剩下的统统交给data，计划用来放些电影啦音乐啥子的，这种搞法其实是Arch的文档中介绍的。&lt;/p&gt;
&lt;p&gt;基本配置如下，列表以供参考：&lt;/p&gt;
&lt;pre class="literal-block"&gt;
partition table: GPT
bootloader: syslinux
linux kernal: 3.12.6-1-ARCH (tobias&amp;#64;T-POWA-LX)
Desktop Environment: Lightweight X11 Desktop Environment(LXDE)
&lt;/pre&gt;
&lt;p&gt;由于确定不再使用windows，所以完全没有考虑双系统的兼容性问题，带来的好处就是可以直接使用新款分区表GPT，
相比老旧的MBR确实优势多多。
bootloader也相应选择了看起来更加牛逼一些的syslinux，安装过程也非常顺利方便。（当然，相比windows的无人值守性质的安装还是多少有一些事情要做的。不过windows嘛，就不说什么了...）
内核就没有自己geek一番了，毕竟是生手第一次安装，主要考虑系统的稳定性和便捷性，直接pacstrap搞定。&lt;/p&gt;
&lt;p&gt;应用软件方面还是以轻量级为主。&lt;/p&gt;
&lt;p&gt;桌面环境直接排除了GNOME和KDE，GNOME虽然效果非常炫，但用起来机器居然有时会卡，而且GNOME本身也过于庞大。
KDE的话，看到Arch官网的介绍和GNOME同属重量级的环境，就一起排除了。
在xfce和LXDE之间纠结了很久，因为这俩货主打轻量级，而且是官方支持的版本。
之前用的是xfce，考虑到尝鲜的因素、浏览器的因素（LXDE推荐网页浏览器是Firefox），以及其他心理因素，最终确定使用LXDE作为桌面环境。&lt;/p&gt;
&lt;p&gt;输入法本来安装了ibus和googlepinyin，用了两次感觉比较不爽，默认的界面非常难看，而且启动也有点慢（居然要我开启完桌面环境好一会之后才自己慢吞吞出现在菜单栏里）。
所以果断换了fcitx。刚换上去就知道找对东西了，不仅开启的速度非常快，不用怎么配置，而且默认的黑色界面也和我的桌面主题很搭。再装上google拼音，好用的很。&lt;/p&gt;
&lt;p&gt;浏览器就Firefox无疑了，autoProxy用起来忒爽。这里插句题外话，前天给家里的winXP(老古董，想换个Lubuntu，但不是我在用，麻烦。=_=)装Firefox，居然下错Firefox搞到一个中国版，各种插件各种弹窗，各种恶心...提醒大家装Firefox去官网选择中文原版，别去中国官网下，当然故意找插件的除外。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;桌面环境的安装&lt;/h2&gt;
&lt;p&gt;安装桌面环境首先要安装xorg-server，直接pacman就行。&lt;/p&gt;
&lt;p&gt;接着是mesa，据说是用来处理3D显示的。&lt;/p&gt;
&lt;p&gt;然后要搞定显卡的驱动。&lt;/p&gt;
&lt;p&gt;从这里：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Xorg#Driver_installation"&gt;https://wiki.archlinux.org/index.php/Xorg#Driver_installation&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;可以找到自己显卡对应的驱动，pacman安装即可。&lt;/p&gt;
&lt;p&gt;现在便可以通过启动X来测试了，直接命令：startx
如果能出几个框框鼠标能动，说明安装正确，不行的话就找troubleshooting咯。&lt;/p&gt;
&lt;p&gt;安装好X便可以选择一个桌面环境自己安装了，所谓的根据喜好选择。 ^_^&lt;/p&gt;
&lt;p&gt;最后是一些配置什么的，就不赘述了。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;杂七杂八的经验&lt;/h2&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;关于虚拟机&lt;/h3&gt;
&lt;p&gt;虚拟机的安装很容易出现问题，
上回博主在virtualbox里安装的时候曾经在bootloader里卡很久，
所有的配置都没有问题，但敲回车选择进入Arch，屏幕闪了一下又跳回bootloader主界面。&lt;/p&gt;
&lt;p&gt;查文档说如果敲了回车什么事情都没有发生，说明是配置错误引导系统失败。&lt;/p&gt;
&lt;p&gt;但是多敲几次回车它却偶尔会进系统，并且系统完全正常...&lt;/p&gt;
&lt;p&gt;此外，显示器的识别也出现过问题。
在virtualbox里startx失败，报错为：没有找到显示器&lt;/p&gt;
&lt;p&gt;所幸这些问题在自己的真机里都没有出现，一切顺利。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mirrorlist"&gt;
&lt;h3&gt;关于mirrorlist&lt;/h3&gt;
&lt;p&gt;有了虚拟机的麻烦经历，
实体安装的时候我把mirrorlist内容全部换成国内几个速度很快的服务器，
效果非常好，
速度一般都有几百K到几个M。&lt;/p&gt;
&lt;p&gt;不过遇到了另一个问题，
不知为何国内的服务器某些软件找不到。
具体的忘记了，但有不少的软件在国内的服务器返回了404，导致pacman报错。&lt;/p&gt;
&lt;p&gt;于是不得不再次更改mirrorlist加几个山姆大叔家的服务器。&lt;/p&gt;
&lt;p&gt;最终的最佳实践是：
首先放几个离自己的地域最近的服务器（相同国家一般就可以了）。
然后在文件的末尾放几个山姆大叔的主力服务器，找那些score高的，用于国内服务器找不到资源时的备用。
要注意把远程的服务器放在文件末尾，因为pacman是按顺序搜索的。&lt;/p&gt;
&lt;p&gt;另外，千万要记得的是，每次更新mirrorlist要敲这个：&lt;/p&gt;
&lt;blockquote&gt;
pacman -Syy&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h3&gt;关于时间&lt;/h3&gt;
&lt;p&gt;时间的同步可以按教程搞：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Network_Time_Protocol"&gt;https://wiki.archlinux.org/index.php/Network_Time_Protocol&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;官方的说法是，没有启动deamon的情况下敲这个：&lt;/p&gt;
&lt;blockquote&gt;
ntpd -q&lt;/blockquote&gt;
&lt;p&gt;不过我倒是没搞定 -_-&lt;/p&gt;
&lt;p&gt;貌似服务器连接有问题，
而且更恶心的是同步失败是没有任何出错提示的。&lt;/p&gt;
&lt;p&gt;最后在google上找到另一款方案：&lt;/p&gt;
&lt;blockquote&gt;
ntpdate 0.us.pool.ntp.org&lt;/blockquote&gt;
&lt;p&gt;记得写入硬件时钟：&lt;/p&gt;
&lt;blockquote&gt;
hwclock -w&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;一些好用的命令&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;lsblk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这货最近敲了很多次，不带参数则显示所有存储设备的分区情况，也可以加入参数限定显示的设备。&lt;/p&gt;
&lt;p&gt;博文最前面的分区信息显示就是用lsblk打出来的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ip link&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;搞网络也花了一些时间。&lt;/p&gt;
&lt;p&gt;这货显示当前所有网络设备的详细信息。&lt;/p&gt;
&lt;p&gt;启动某个设备敲：&lt;/p&gt;
&lt;blockquote&gt;
ip link set [device] up&lt;/blockquote&gt;
&lt;p&gt;其中device是设备的名称，在ip link输出中的第一个便是。
一般来说e开头的是有线网卡，wl开头的是无线网卡。lo据称是本地的回路，不是真实网卡。&lt;/p&gt;
&lt;p&gt;然后自己被坑的地方是这里：&lt;/p&gt;
&lt;p&gt;教程说首先使用ip link set让对应的设备state为up，然后便可以连接。
但要注意的是这种说法对应的是有线网卡的情况。
如果是无线网卡，直接set是没法让它从down变成up的，
只有成功创建连接后自己才会更改状态。&lt;/p&gt;
&lt;p&gt;于是我花了好久时间一直在研究为何没法让它up，
而google到的结果看样子没有人遇到这种奇葩情况。
直到第二天睡醒想想算了不管它直接用wifi-menu连接看看，
一试才发现这货根本就没有问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;wifi-menu 和 dhcpcd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;两个方便的东西，wifi-menu加上无线网卡的设备名作为参数，
自动搜索并列表显示所有找到的网络，
还能输入密码自动创建连接。&lt;/p&gt;
&lt;p&gt;而dhcpcd可以用在有线网卡里，
默认状态下网卡是down的，用上面的ip link让它up，
然后直接敲dhcpcd，
全自动连接并从路由的dhcp服务里获取并设置网络。
一般根据自己的网络环境选用上面俩命令的一个，成功执行便能ping www.google.com了。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;下一次将尝试安装virtualbox，据说很难搞...&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Arch"></category></entry><entry><title>Arch Linux学习：安装篇(一)</title><link href="/Arch001.html" rel="alternate"></link><updated>2014-01-08T19:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-08:Arch001.html</id><summary type="html">&lt;p&gt;本系列博文记录学习Arch Linux这个Linux发行版过程中的总结与收获。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;关于Arch Linux&lt;/h2&gt;
&lt;p&gt;Arch Linux是一个现在较为流行的Linux发行版，
支持32/64位处理器,
以Rolling Releases方式发布新版本。&lt;/p&gt;
&lt;p&gt;官方站点：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.archlinux.org"&gt;https://www.archlinux.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Arch Linux的哲学是简洁、保证代码的正确性、用户为中心、开放性及自由性。
因此据称Arch Linux的一个非常重要的特点是轻量级，
让用户自行选择所需的组件构建属于自己的系统，
当然这都以系统的开放性作为前提，
Arch Linux提供了非常大的自由度和开放度供用户完全控制自己的系统。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/The_Arch_Way"&gt;https://wiki.archlinux.org/index.php/The_Arch_Way&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Arch Linux支持syslinux或GRUB两种bootloader，
包管理器为Pacman(package manager)，
使用systemd作为系统的服务管理器(这货还没弄清楚)&lt;/p&gt;
&lt;p&gt;在下列资源的帮助下我顺利完成了系统的安装:&lt;/p&gt;
&lt;p&gt;一个是Arch官方的Beginners' Guide:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Beginners%27_Guide"&gt;https://wiki.archlinux.org/index.php/Beginners%27_Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个是某牛人写的手把手教程(虽然略微显老，不过参考价值很大)：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://wideaperture.net/blog/?p=3851"&gt;http://wideaperture.net/blog/?p=3851&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;个人推荐先用牛人的教程研究一遍整体流程，
再以官方教程为主着手操作，
因为有些命令的参数可能由于版本更新发生变化，
以官方版本为参考可有效避免产生问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;环境&lt;/h2&gt;
&lt;p&gt;由于初次尝试安装Arch Linux，
我选择在虚拟机里练手，
熟悉了流程之后再将自己的系统完整转移到Arch上。&lt;/p&gt;
&lt;p&gt;宿主操作系统为Ubuntu 12.04 x64 桌面版&lt;/p&gt;
&lt;p&gt;VirtualBox 的版本为4.1.12&lt;/p&gt;
&lt;p&gt;选择的Arch Linux安装镜像为2012.12.01版本。&lt;/p&gt;
&lt;p&gt;没有使用最新版是因为在VirtualBox里最新版本启动失败，
感觉VB(VirtualBox)对较新版本的系统支持都不是特别好，
之前也有试过在Windows下用VB安装Ubuntu 13.04，
结果以失败告终，
后来换Ubuntu 12.04就解决了问题。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;基本步骤总结&lt;/h2&gt;
&lt;p&gt;假设是全新安装，
不考虑windows系统的双引导问题，
Arch Linux系统的主要安装步骤有如下几步：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;硬盘分区&lt;/li&gt;
&lt;li&gt;分区格式化&lt;/li&gt;
&lt;li&gt;基本系统安装&lt;/li&gt;
&lt;li&gt;fstab的生成和系统的配置&lt;/li&gt;
&lt;li&gt;bootloader的安装和配置&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;在安装过程中需要保证网络连接，
以让系统自动从镜像网站中获取所需的资源。
另一种搞法是将Arch的核心库下载储存到本地的存储介质上并设定系统从中读取资源。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;详细记录&lt;/h2&gt;
&lt;div class="section" id="id5"&gt;
&lt;h3&gt;0)准备阶段&lt;/h3&gt;
&lt;p&gt;首先需要有一份完整的光盘镜像，
建议在使用镜像之前检查一下md5和sha1的散列值，
防止由于数据丢失导致的问题。&lt;/p&gt;
&lt;p&gt;Ubuntu下可以使用md5sum和sha1sum命令计算文件的散列值&lt;/p&gt;
&lt;p&gt;关于硬盘大小有几种说法，
官方说的貌似只要500M的空间便可完成基本安装,
而大牛的教程直接搞了40G的空间。
反正现在空间都是白菜价，
搞大一点也好。&lt;/p&gt;
&lt;p&gt;内存方面能有个512M就能跑得很欢了。&lt;/p&gt;
&lt;p&gt;此外大牛的教程里还开启了VirtualBox的显卡3D加速，
调大了显存容量。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h3&gt;1)光盘引导和硬盘分区&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;引导系统&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Arch Linux的光盘镜像中包含了32位和64位两个版本的系统。
如果是正式安装的话，
由于现在主流的硬件都支持64位，
因此推荐选用较新的64位系统。&lt;/p&gt;
&lt;p&gt;而如果是虚拟机则推荐使用较好的兼容性和低硬件需求的32位系统。&lt;/p&gt;
&lt;p&gt;正常的话，
光盘镜像会被引导，
选择所需的系统版本,
系统自动载入并自动登录为root。&lt;/p&gt;
&lt;p&gt;在一大堆输出之后应该出现一个终端窗口等待命令：&lt;/p&gt;
&lt;blockquote&gt;
root&amp;#64;archiso ~ #&lt;/blockquote&gt;
&lt;p&gt;这说明光盘的系统进入成功了。&lt;/p&gt;
&lt;p&gt;如果过程中死了，可参考Arch官方的troubleshooting:&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Beginners%27_Guide#Troubleshooting_boot_problems"&gt;https://wiki.archlinux.org/index.php/Beginners%27_Guide#Troubleshooting_boot_problems&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;另外，
如果上述方案无法解决问题，
并且是在虚拟机中安装的话，
可以观察一下自己所用的系统版本，
选择较老的版本以换取较好的兼容性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;语言选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;官方的说法是选择自己的语言版本并去除对应的注释，
然后启用相应的语言。&lt;/p&gt;
&lt;p&gt;个人推荐保持English较好，
我尝试过选择中文，
可能是字体没有设置正确，
导致后面的操作中文字符都无法显示。&lt;/p&gt;
&lt;p&gt;另外一个好处是English的错误直接贴进Google里搜可以得到很多的结果。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网络配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Arch Linux会自动配置网络连接，
通过Ping一下Google查看网络是否正常。
如果有问题的话再尝试自行设置网络：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Beginners%27_Guide#Establish_an_internet_connection"&gt;https://wiki.archlinux.org/index.php/Beginners%27_Guide#Establish_an_internet_connection&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;硬盘分区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先需要选择分区表。&lt;/p&gt;
&lt;p&gt;一种是常见的MBR主引导记录，
windows便是使用该分区表。
糟糕的是MBR比较旧，
最多只能有三个主分区和一个拓展分区，
在拓展分区上继续划分逻辑分区。
分区的大小也有限，
最多只支持2T的空间，
超过部分无法识别。
而且需要设定某个分区为活动分区才可引导系统。
不过某些老的BIOS只支持MBR，
另外如果有windows的话只能使用MBR。&lt;/p&gt;
&lt;p&gt;不考虑老BIOS兼容性和windows的兼容性的话，
应该尽量使用更新的GPT分区表，
不仅分区数量提高到128个，
空间限制也加大到2Z。
没有活动分区限制。
某些新款的UEFI类型的主板只支持GPT分区表。&lt;/p&gt;
&lt;p&gt;关于分区表的选择可参考：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/GUID_Partition_Table"&gt;https://wiki.archlinux.org/index.php/GUID_Partition_Table&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Master_Boot_Record"&gt;https://wiki.archlinux.org/index.php/Master_Boot_Record&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;针对不同的分区表Arch Linux提供了不同的分区工具，
我选择的是GPT分区表，
下面使用cgdisk进行分区操作。&lt;/p&gt;
&lt;p&gt;如果有多个硬盘的话要区分好需要在哪个硬盘上操作，
避免因为选错硬盘导致的数据丢失。&lt;/p&gt;
&lt;p&gt;假设在sda硬盘上进行分区：&lt;/p&gt;
&lt;blockquote&gt;
cgdisk /dev/sda&lt;/blockquote&gt;
&lt;p&gt;进入cgdisk后有界面，
选择新建啦分配大小啦，
就不废话了。&lt;/p&gt;
&lt;p&gt;注意的是swap分区的代号是8200，
新建分区的默认代号是8300，
因此在创建swap分区时要注意不能选择默认设置。&lt;/p&gt;
&lt;p&gt;另外一点是要在底端的空白空间上新建分区，
最上方的空白空间貌似是给分区表用的，
需要留空。&lt;/p&gt;
&lt;p&gt;至于分区大小，
可参考这里：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Partitioning#How_big_should_my_partitions_be.3F"&gt;https://wiki.archlinux.org/index.php/Partitioning#How_big_should_my_partitions_be.3F&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;分区完成后要写入更改。&lt;/p&gt;
&lt;p&gt;最后退出cgdisk回到终端。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id7"&gt;
&lt;h3&gt;2) 分区格式化&lt;/h3&gt;
&lt;p&gt;在硬盘分区完成后，
每个分区被赋予一个数值表示该分区的编号。&lt;/p&gt;
&lt;p&gt;因此假设sda硬盘分区完成，
那么/dev/中会出现若干个sda开头的设备。&lt;/p&gt;
&lt;p&gt;sda1表示sda硬盘的第一个分区，
sda2表示sda硬盘的第二个分区。&lt;/p&gt;
&lt;p&gt;查看某个硬盘的情况可以用这个：&lt;/p&gt;
&lt;blockquote&gt;
lsblk /dev/sda&lt;/blockquote&gt;
&lt;p&gt;结果以树状结构呈现硬盘的分区情况。&lt;/p&gt;
&lt;p&gt;格式化是非常方便的，
安装Arch Linux要求分区格式为ext4。
用下面的命令格式化sda1:&lt;/p&gt;
&lt;blockquote&gt;
mkfs.ext4 /dev/sda1&lt;/blockquote&gt;
&lt;p&gt;记得对其他分区也要做一遍。&lt;/p&gt;
&lt;p&gt;对于swap分区，使用下面的命令(假设是第三个分区)：&lt;/p&gt;
&lt;blockquote&gt;
mkswap /dev/sda3&lt;/blockquote&gt;
&lt;p&gt;还要启用这个swap分区：&lt;/p&gt;
&lt;blockquote&gt;
swapon /dev/sda3&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h3&gt;3) 基本系统安装&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;挂载分区&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分区完成之后就要在新划分的分区里面安装系统了，
因此首先要做的是把分区挂载到当前运行的光盘系统中。&lt;/p&gt;
&lt;p&gt;挂载的顺序非常重要，
我们直到Unix类型系统都是以根目录作为整个系统文件树的起点，
因此首先把作为root的分区挂载到当前系统的/mnt里去。&lt;/p&gt;
&lt;p&gt;假设作为root的分区是sda1:&lt;/p&gt;
&lt;blockquote&gt;
mount /dev/sda1 /mnt&lt;/blockquote&gt;
&lt;p&gt;接着在挂载后的root目录(也就是当前的/mnt)下新建相应的文件夹挂载其余的分区。
假设需要挂载boot分区(sda2)：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mkdir /mnt/boot&lt;/p&gt;
&lt;p&gt;mount /dev/sda2 /mnt/boot&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;依次搞定剩余的分区就可以了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;镜像站点选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个一定要搞一下，
本人第一次安装时因为没有更改镜像站点导致下载速度超慢，
本以为pacman应该有什么内置的功能自动选择最优的站点下载，
后来感觉好像没有这个功能，
它只是扫了一遍配置文件从头到尾一个个尝试连接并下载需要的资源而已。&lt;/p&gt;
&lt;p&gt;首先要在以下的地址选择并生成在自己的地区最合适的镜像站点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="https://www.archlinux.org/mirrorlist/"&gt;https://www.archlinux.org/mirrorlist/&lt;/a&gt;&lt;/blockquote&gt;
&lt;p&gt;然后编辑文件/etc/pacman.d/mirrorlist，
教程里用的是nano，我不太习惯，
换成vi也是可以的(没有vim，将就着用吧)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;系统安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到了正题反而简单得很，
如果网络配置正常、
镜像站点正常、
硬盘分区和挂载正确的话，
敲下面这个命令就ok了：&lt;/p&gt;
&lt;blockquote&gt;
pacstrap -i /mnt base&lt;/blockquote&gt;
&lt;p&gt;去掉-i参数的话会默认安装所有基础的组件。
其实就算加了-i，看到白花花的列表里那么多东西，
也没什么欲望一个个去考虑要不要了。
既然都是基础的组件，
就全部安装好了。
反正相比windows，
再多也不多~&lt;/p&gt;
&lt;p&gt;大牛的教程说到这一步可以去喝杯咖啡，
也可以坐在屏幕前面欣赏（如果觉得进度的变化能让自己感觉很high的话）&lt;/p&gt;
&lt;p&gt;反正就是等......&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于系统安装的补充说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;虽然上面的一个命令就可以搞定基础系统的安装，
但仍然有很多不确定因素会导致安装的中断。
就像我第一次安装的时候等到五点要去吃饭了它资源还没有下载完毕，
于是一狠心就把它Ctrl+C了...-_-|||&lt;/p&gt;
&lt;p&gt;令人欣喜的是等到我吃完饭回来，
重新光盘引导并挂载分区(文件夹什么的都在了，挂载分区开启swap就可以了)，
并且还改了mirrorlist，
重新pacstrap，
发现它依然能够继续之前的下载，
最终正常完成系统安装。&lt;/p&gt;
&lt;p&gt;观察它的安装过程，应该是这样的，
首先是将所有需要的文件下载到本地，
然后一次性执行所有程序的安装。
由于我在下载的中途中断了，
下一次进入pacman会自动扫描现有的文件，
继续所有未完成的下载，
最终才开始安装。&lt;/p&gt;
&lt;p&gt;至于安装的过程中断会怎么样呢？&lt;/p&gt;
&lt;p&gt;感觉有点恐怖...哪个兄弟试过的烦请告知...&lt;/p&gt;
&lt;p&gt;此外，
官方文档的Note有如下的说明：&lt;/p&gt;
&lt;blockquote&gt;
Whenever in the future you change your list of mirrors,
always remember to force pacman to refresh all package lists with 'pacman -Syy'.
This is considered to be good practice and will avoid possible headaches.
See Mirrors for more information.&lt;/blockquote&gt;
&lt;p&gt;所以，&lt;/p&gt;
&lt;p&gt;&lt;em&gt;修改了mirrorlist记得要 pacman -Syy&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fstab"&gt;
&lt;h3&gt;4) fstab的生成和系统的配置&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;fstab文件生成&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这一步生成一份fstab文件，
这个文件的作用在于配置当前系统的分区状况，
使得每次启动系统的时候自动挂载分区。
相当于静态的文件系统信息。&lt;/p&gt;
&lt;blockquote&gt;
genfstab -U -p /mnt &amp;gt;&amp;gt; /mnt/etc/fstab&lt;/blockquote&gt;
&lt;p&gt;完成后要检查文件内容是否正确，
直接cat或者more或者less或者vi、nano都可以。
类似的内容在大牛的文章中有截图。&lt;/p&gt;
&lt;p&gt;完成了前面的步骤，
Arch Linux的基础系统就算是安装到本地的磁盘上了。
接下来要做一些简单的配置工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;切换系统并配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先是要切换到新安装的系统里。
没有错，系统已经可以运行，
现在要切换到新的系统里去。&lt;/p&gt;
&lt;blockquote&gt;
arch-chroot /mnt /bin/bash&lt;/blockquote&gt;
&lt;p&gt;这句切换到新系统里并让默认的shell为Bash。
去掉后面的第二个参数则会使用sh的shell。&lt;/p&gt;
&lt;p&gt;执行成功的话现在就在新系统里运行了，
会发现终端的提示符中主机已经不再是archiso，
而是当前的系统。&lt;/p&gt;
&lt;p&gt;区域、语言、主机名称什么的就不多说了，
照着教程搞即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bootloader"&gt;
&lt;h3&gt;5) bootloader的安装和配置&lt;/h3&gt;
&lt;p&gt;最后一步是安装bootloader。
bootloader用于在系统启动时引导进入系统。&lt;/p&gt;
&lt;p&gt;设想系统硬件启动完成，
BIOS(UEFI)按引导顺序将系统的引导权传递到硬盘中，
那么硬盘怎么能够知道去哪里找对应的系统启动呢？
靠的就是bootloader。
bootloader储存在磁盘的开始部分，
当系统启动时，自动到磁盘的开始位置搜索bootloader，
并由其完成剩余的启动工作。&lt;/p&gt;
&lt;p&gt;大牛的文章里有一个非常精妙的类比，
这货就像高度近视的人每天醒来第一件事是伸手去拿放在固定位置的眼镜，
没有眼镜的话人将没有办法做任何事情（无法进入系统），
而眼镜总是放在固定的位置（床头啊什么的，就像磁盘的开始处一样），
因此不用花功夫思考去哪里找眼睛（BIOS也一样，只会在磁盘的开始处搜索），
直接伸手去拿即可。&lt;/p&gt;
&lt;p&gt;一解释就显得罗嗦...&lt;/p&gt;
&lt;p&gt;但其实安装bootloader是非常便捷的，
照着教程做就可以了。
一个注意的地方是要确定自己的主板是BIOS还是UEFI，
此外安装完成后（需要的话）记得要把引导的位置修改为root所在的分区代号。&lt;/p&gt;
&lt;p&gt;完成后退出当前系统（回到光盘系统），
umount所有挂载的分区，
reboot并让硬盘引导，
正常的话会出现bootloader的界面，
选择合适的选项进入即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;关于bootloader的补充说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;安装错误或者配置错误什么的都会导致bootloader引导失败，
可参考官方的troubleshooting。&lt;/p&gt;
&lt;p&gt;弄死了是没有关系的，
重新光盘引导，
挂载分区和swap分区（别忘了swap分区），
哪里错了就从哪里重新开始。
肯定有一天能够安装正确配置成功并进入系统的。(^_^)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一旦配置正确，系统引导成功，
一堆输出过后会出现一个终端并等待命令，
没有错&lt;/p&gt;
&lt;p&gt;这说明&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arch Linux 安装完成了！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;啥？没有图形界面？&lt;/p&gt;
&lt;p&gt;自己装X-server啊，
喜欢哪个窗口管理器（Gnome,xfce，KDE什么的）自己再弄上去。
( 参考：&lt;a class="reference external" href="https://wiki.archlinux.org/index.php/Beginners%27_Guide#Graphical_User_Interface"&gt;https://wiki.archlinux.org/index.php/Beginners%27_Guide#Graphical_User_Interface&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;我觉得光是这一点就充分体现了Arch Linux的简介性和高度的可定制性了。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Arch"></category></entry><entry><title>Bash笔记(四)</title><link href="/Bash004.html" rel="alternate"></link><updated>2014-01-05T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-05:Bash004.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Shell终端Bash过程中的收获，主要为常用命令一览表及相关功能的记录。&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;用户管理&lt;/h2&gt;
&lt;p&gt;Unix的用户列表在/etc/passwd中，
该文件为每个用户保存了一行信息，
包括用户名、用户id、组id、用户描述、用户的home目录及默认的shell信息&lt;/p&gt;
&lt;p&gt;用户密码加密后保存在/etc/shadow文件中，
包含用户名、用户密码、最小密码修改间隔时间、最大密码修改间隔时间、密码无效前提醒时间等。
时间的单位是天。&lt;/p&gt;
&lt;p&gt;用户的密码管理默认设置在/etc/login.defs中。
设置了包含上述几个时间在内的多个参数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;识别用户&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;whoami&lt;/p&gt;
&lt;blockquote&gt;
查看当前用户名&lt;/blockquote&gt;
&lt;p&gt;who&lt;/p&gt;
&lt;blockquote&gt;
列表显示当前所有登录用户相关信息&lt;/blockquote&gt;
&lt;p&gt;who am i&lt;/p&gt;
&lt;blockquote&gt;
这货是空格分开的，相当于who，只显示当前用户&lt;/blockquote&gt;
&lt;p&gt;w&lt;/p&gt;
&lt;blockquote&gt;
这个能显示当前所有用户正在执行的工作&lt;/blockquote&gt;
&lt;p&gt;id&lt;/p&gt;
&lt;blockquote&gt;
显示当前用户的用户id，组id等&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;用户管理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;useradd&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创建一个新用户scutlaoyi，设置home目录及用户描述&lt;/p&gt;
&lt;p&gt;useradd -m -d /home/scutlaoyi -c &amp;quot;new user&amp;quot; scutlaoyi&lt;/p&gt;
&lt;p&gt;系统默认给新用户一个独立的用户id和组id.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;userdel&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;删除用户，-r设置连带删除对应的home目录&lt;/p&gt;
&lt;p&gt;userdel -r [username]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;usermod&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编辑用户信息，例如，修改用户描述&lt;/p&gt;
&lt;p&gt;usermod -c &amp;quot;just a user&amp;quot; [username]&lt;/p&gt;
&lt;p&gt;锁定某个用户的密码，使其不能正常登录&lt;/p&gt;
&lt;p&gt;usermod -L [username]&lt;/p&gt;
&lt;p&gt;解锁&lt;/p&gt;
&lt;p&gt;usermod -U [username]&lt;/p&gt;
&lt;p&gt;设置默认登录的shell&lt;/p&gt;
&lt;p&gt;usermod -s /bin/bash [username]&lt;/p&gt;
&lt;p&gt;设定用户归属的组(注意这个操作会清除用户原有的组归属数据)&lt;/p&gt;
&lt;p&gt;usermod -G [groupname] [username]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;passwd&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不带参数输入可修改当前用户密码&lt;/p&gt;
&lt;p&gt;passwd&lt;/p&gt;
&lt;p&gt;对某个用户设置密码&lt;/p&gt;
&lt;p&gt;passwd [username]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;用户切换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;su&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;快速切换到某个用户,包括root也行，如果你有密码&lt;/p&gt;
&lt;p&gt;su [username]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;sudo&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo命令可以让当前用户以root权限执行程序。&lt;/p&gt;
&lt;p&gt;sudo [command]&lt;/p&gt;
&lt;p&gt;sudo命令可以在不交出root密码的前提下给某些用户root权限管理系统。&lt;/p&gt;
&lt;p&gt;sudo命令成功的前提是当前用户在/etc/sudoers文件中存在对应的权限。
没有权限而执行sudo的话，在我的Ubuntu里会显示错误信息，
并威胁道:&amp;quot;此事件将被报告。&amp;quot; -_-\&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;visudo&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;sudoers文件的专用编辑器，可防止多种安全问题。&lt;/p&gt;
&lt;p&gt;关于该命令的具体信息可查man。&lt;/p&gt;
&lt;p&gt;不推荐直接编辑/etc/sudoers文件。
（虽然上次糊里糊涂用vim编辑了一次，还好没死。-_-\）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;组管理&lt;/h2&gt;
&lt;p&gt;用户组的信息保存在/etc/group文件中。
其格式为：组名:组密码(可能为空):组id:组内成员列表&lt;/p&gt;
&lt;p&gt;groupadd&lt;/p&gt;
&lt;blockquote&gt;
添加一个组
groupadd [groupname]&lt;/blockquote&gt;
&lt;p&gt;添加用户到某个组中&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用usermod，-a为保持原有组信息并追加新组&lt;/p&gt;
&lt;p&gt;usermod -a -G [groupname] [username]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;groupmod&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;编辑组名称&lt;/p&gt;
&lt;p&gt;groupmod -n [new_groupname] [groupname]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;groupdel&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;删除组&lt;/p&gt;
&lt;p&gt;groupdel [groupname]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;groups&lt;/p&gt;
&lt;blockquote&gt;
查看当前用户所属的组信息&lt;/blockquote&gt;
&lt;p&gt;gpasswd&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;赋予某些用户管理组的权限&lt;/p&gt;
&lt;p&gt;设定某个组的管理员&lt;/p&gt;
&lt;p&gt;gpasswd -A [user1],[user2],[...] [groupname]&lt;/p&gt;
&lt;p&gt;使某个用户加入组&lt;/p&gt;
&lt;p&gt;gpasswd -a [username] [groupname]&lt;/p&gt;
&lt;p&gt;从组中清除某个用户&lt;/p&gt;
&lt;p&gt;gpasswd -d [username] [groupname]&lt;/p&gt;
&lt;p&gt;设定某个组的成员&lt;/p&gt;
&lt;p&gt;gpasswd -M [user1],[user2],[...]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;文件权限&lt;/h2&gt;
&lt;p&gt;Unix类系统的文件权限分为三种：
文件所有者权限、文件所属组权限、其他人权限。
文件的权限有三款：读(r)、写(w)、执行(x)。&lt;/p&gt;
&lt;p&gt;当使用ls -l命令时，可以看到列表中每个文件的最左方即文件的权限设置&lt;/p&gt;
&lt;p&gt;第一个字符为文件类型，文件类型有：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-:普通文件&lt;/p&gt;
&lt;p&gt;d:目录&lt;/p&gt;
&lt;p&gt;l:符号链接文件&lt;/p&gt;
&lt;p&gt;p:命名管道&lt;/p&gt;
&lt;p&gt;b:块设备&lt;/p&gt;
&lt;p&gt;c:字符设备&lt;/p&gt;
&lt;p&gt;s:socket&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接着每三个字符依次指定了对应的权限：所有者、组、其他人。
r、w、x分别说明拥有该项权限，横杆-说明无此权限。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;p&gt;drwxr-xr-x 2 laoyi laoyi    4096 12月 23 20:28 desktop&lt;/p&gt;
&lt;p&gt;该文件是一个目录，
所有者拥有读写执行权限，
组用户拥有读和执行权限，
而其他人也拥有读和执行权限&lt;/p&gt;
&lt;p&gt;后面的依次是所有者、所有组，大小，时间和名称等信息。&lt;/p&gt;
&lt;p&gt;chgrp&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;修改一个文件的组&lt;/p&gt;
&lt;p&gt;chgrp [groupname] [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;chown&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;修改一个文件的所有者&lt;/p&gt;
&lt;p&gt;chown [username] [filename]&lt;/p&gt;
&lt;p&gt;同时修改所有者和组&lt;/p&gt;
&lt;p&gt;chown [username]:[groupname] [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;chmod&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;代号方式管理权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;u为所有者，g为组用户，o为其他人，a对上述三者同时操作&lt;/p&gt;
&lt;p&gt;+为增加权限， 相反， -为去除权限&lt;/p&gt;
&lt;p&gt;r读，w写，x执行&lt;/p&gt;
&lt;p&gt;权限配置可以多个组合&lt;/p&gt;
&lt;p&gt;chmod u+w [filename]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数字方式管理权限&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;读的数值为4， 写的数值为2， 执行的数值为1&lt;/p&gt;
&lt;p&gt;对应权限的数字求和得到最终的权限数值&lt;/p&gt;
&lt;p&gt;因此下述例子分配所有者读写执行权限，组用户读和执行权限，其他人读取的权限&lt;/p&gt;
&lt;p&gt;chmod 754 [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;简单的Bash命令就到此为止了，
后面的一些比较复杂我就不记了，
像ACL之类的，
现在学一下过几天也会忘，
以后用到我再搞上来。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;明天开始搞Arch Linux!&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Bash"></category></entry><entry><title>Bash笔记(三)</title><link href="/Bash003.html" rel="alternate"></link><updated>2014-01-04T22:00:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-04:Bash003.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Shell终端Bash过程中的收获，主要为常用命令一览表及相关功能的记录。&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;常用过滤器&lt;/h2&gt;
&lt;p&gt;cat&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;就是把输入流或文件内容输出出来&lt;/p&gt;
&lt;p&gt;cat [filename]&lt;/p&gt;
&lt;p&gt;文件太长就可以用less分页显示&lt;/p&gt;
&lt;p&gt;cat [filename] | less&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;tee&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;管道默认把输出作为下一级的输入，
某些情况下需要显示保存中间结果（管道很长之类的），
可以使用tee&lt;/p&gt;
&lt;p&gt;tee类似cat将输入作为标准输出，同时输出到文件&lt;/p&gt;
&lt;p&gt;tac [filename] | tee [tempfilename] | tac | [......]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;grep&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unix中的一个非常重要的过滤器。&lt;/p&gt;
&lt;p&gt;在输入流中搜索并输出符合对应条件的行,
下面这货过滤出所有带'str'的行&lt;/p&gt;
&lt;p&gt;cat [filename] | grep 'str'&lt;/p&gt;
&lt;p&gt;设置过滤对大小写不敏感&lt;/p&gt;
&lt;p&gt;grep -i [str]&lt;/p&gt;
&lt;p&gt;反向过滤，找出所有不包含str的行&lt;/p&gt;
&lt;p&gt;grep -v [str]&lt;/p&gt;
&lt;p&gt;设置连带输出目标行后的4行（数字可变）&lt;/p&gt;
&lt;p&gt;grep -A4 ......&lt;/p&gt;
&lt;p&gt;设置连带输出目标行前的3行&lt;/p&gt;
&lt;p&gt;grep -B3 ......&lt;/p&gt;
&lt;p&gt;设置连带输出目标行前后的2行&lt;/p&gt;
&lt;p&gt;grep -C2 ......&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cut&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;截取并输出若干列的文本&lt;/p&gt;
&lt;p&gt;设置分割符为':', 输出第一列和第三列的文本&lt;/p&gt;
&lt;p&gt;cut -d: -f1,3 [filename]&lt;/p&gt;
&lt;p&gt;设置分割符为空格时要用引号包括起来&lt;/p&gt;
&lt;p&gt;cut -d&amp;quot; &amp;quot; -f1,2,3,5 [filename]&lt;/p&gt;
&lt;p&gt;还可设置截取字符范围&lt;/p&gt;
&lt;p&gt;截取每行第3到第7个字符&lt;/p&gt;
&lt;p&gt;cut -c3-7 [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;tr&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;字符转换,
例如将小写a转为大写A&lt;/p&gt;
&lt;p&gt;tr 'a' 'A'&lt;/p&gt;
&lt;p&gt;设定范围转换&lt;/p&gt;
&lt;p&gt;tr 'a-z' 'A-Z' #范围不一样会怎样呢？自己试试吧～&lt;/p&gt;
&lt;p&gt;特殊字符也是可以的，
比如说把换行全部换成空格&lt;/p&gt;
&lt;p&gt;tr '\n' ' '&lt;/p&gt;
&lt;p&gt;还能用于压缩多个空格&lt;/p&gt;
&lt;p&gt;tr -s ' '&lt;/p&gt;
&lt;p&gt;移位什么的很方便&lt;/p&gt;
&lt;p&gt;tr 'a-z' 'o-za-n'&lt;/p&gt;
&lt;p&gt;删除所有a/b/c字符&lt;/p&gt;
&lt;p&gt;tr -d 'abc'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;wc&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不是厕所，是字符计数的缩写&lt;/p&gt;
&lt;p&gt;统计行数、字数及字符数&lt;/p&gt;
&lt;p&gt;wc [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;sort&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;排序用的，默认是每行按字典序排
//突然想起当年瞎搞ACM的时候被字典序坑过好多次.-_-&lt;/p&gt;
&lt;p&gt;sort [filename]&lt;/p&gt;
&lt;p&gt;按数字大小排&lt;/p&gt;
&lt;p&gt;sort -n [filename]&lt;/p&gt;
&lt;p&gt;按某一列排(假设第三列)&lt;/p&gt;
&lt;p&gt;sort -k3 [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;uniq&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;去掉相同的行&lt;/p&gt;
&lt;p&gt;uniq [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;comm&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;逐行比较两个文件，
仅第一个有的在第一列，
仅第二个有的在第二列，
相同的在第三列&lt;/p&gt;
&lt;p&gt;comm [file1] [file2]&lt;/p&gt;
&lt;p&gt;可设置只显示某几列&lt;/p&gt;
&lt;p&gt;comm -23 [file1] [file2]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;od&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可将文件内容编码成其他进制&lt;/p&gt;
&lt;p&gt;转十六进制并输出,每词一个字节&lt;/p&gt;
&lt;p&gt;od -t x1 [filename]&lt;/p&gt;
&lt;p&gt;十进制输出&lt;/p&gt;
&lt;p&gt;od -b [filename]&lt;/p&gt;
&lt;p&gt;ASCII码输出&lt;/p&gt;
&lt;p&gt;od -c [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;sed&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用正则表达式编辑文本。&lt;/p&gt;
&lt;p&gt;这货太牛逼了，两三句话说不完，在这里挂个链接吧。&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://coolshell.cn/articles/9104.html"&gt;http://coolshell.cn/articles/9104.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="unix"&gt;
&lt;h2&gt;基本的Unix工具&lt;/h2&gt;
&lt;p&gt;find&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;找东西用的，据说直接暴搜得到结果。
想要高效搜索用下面说的locate&lt;/p&gt;
&lt;p&gt;查找某目录(及其子目录)下的所有文件&lt;/p&gt;
&lt;p&gt;find [location]&lt;/p&gt;
&lt;p&gt;查找某目录其子目录下的某种文件(匹配)&lt;/p&gt;
&lt;p&gt;find [location] -name [option]&lt;/p&gt;
&lt;p&gt;eg. find / -name &amp;quot;*.txt&amp;quot; #找系统中的所有txt文件&lt;/p&gt;
&lt;p&gt;查找某种类型文件,关于type可查man&lt;/p&gt;
&lt;p&gt;find [location] -type [type]&lt;/p&gt;
&lt;p&gt;查找并对目标执行某些命令操作，
-exec 后接操作的命令(下述例子删除了目标文件)&lt;/p&gt;
&lt;p&gt;find ~ -name &amp;quot;*.txt~&amp;quot; -exec rm {} \;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;locate&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用索引搜索文件，
比find效率更高&lt;/p&gt;
&lt;p&gt;更新数据库(在我的Ubuntu里要sudo)&lt;/p&gt;
&lt;p&gt;updatedb&lt;/p&gt;
&lt;p&gt;查找文件&lt;/p&gt;
&lt;p&gt;locate [pattern]&lt;/p&gt;
&lt;p&gt;具体情况可以查man&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;date&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看时间&lt;/p&gt;
&lt;p&gt;date&lt;/p&gt;
&lt;p&gt;自定义格式(A:星期 d:天 m:月 Y:年)&lt;/p&gt;
&lt;p&gt;date +'%A %d-%m-%Y'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cal&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;月历&lt;/p&gt;
&lt;p&gt;cal&lt;/p&gt;
&lt;p&gt;显示某年某月的月历(1970年三月)&lt;/p&gt;
&lt;p&gt;cal 3 1970&lt;/p&gt;
&lt;p&gt;或者显示整年的日历&lt;/p&gt;
&lt;p&gt;cal 1989&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;sleep&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;休眠嘛(单位：秒)&lt;/p&gt;
&lt;p&gt;sleep 100 #别等它...&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;time&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取命令运行的时间&lt;/p&gt;
&lt;p&gt;time echo 'hello,world'&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;gzip/gunzip:文件压缩工具&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;压缩目标文件，
默认得到同名的后缀为gz的文件。&lt;/p&gt;
&lt;p&gt;注意：原文件会被替换&lt;/p&gt;
&lt;p&gt;gzip [file]&lt;/p&gt;
&lt;p&gt;将gz文件作为目标文件解压缩&lt;/p&gt;
&lt;p&gt;gunzip [file] 或 gzip -d [file]&lt;/p&gt;
&lt;p&gt;zcat命令可查看压缩包文本内容&lt;/p&gt;
&lt;p&gt;zcat [file]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="Bash"></category></entry><entry><title>Bash笔记(二)</title><link href="/Bash002.html" rel="alternate"></link><updated>2014-01-03T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-03:Bash002.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Shell终端Bash过程中的收获，主要为常用命令一览表及相关功能的记录。&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;变量&lt;/h2&gt;
&lt;p&gt;dollar sign&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用美元符标记变量,
变量大小写敏感。
常用的系统变量有：&lt;/p&gt;
&lt;p&gt;$HOSTNAME, $USER, $UID, $HOME&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$PS1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;变量定义终端的提示符,
可通过设置该变量改变提示符的内容：&lt;/p&gt;
&lt;p&gt;$PS1='\u&amp;#64;\h:\W$'&lt;/p&gt;
&lt;p&gt;显示内容：用户&amp;#64;主机:当前目录$&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;$PATH&lt;/p&gt;
&lt;blockquote&gt;
设定系统搜索执行命令的路径&lt;/blockquote&gt;
&lt;p&gt;使用自定义变量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;直接对变量名赋值即可&lt;/p&gt;
&lt;p&gt;MyVar=123&lt;/p&gt;
&lt;p&gt;使用时加上美元符&lt;/p&gt;
&lt;p&gt;echo $MyVar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用变量时引号的差异&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简单说来就是这样：&lt;/p&gt;
&lt;p&gt;echo '$MyVar' // $MyVar&lt;/p&gt;
&lt;p&gt;echo &amp;quot;$MyVar&amp;quot; // 123&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;set&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查看当前所有变量&lt;/p&gt;
&lt;p&gt;set&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;env&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查看当前exported的变量&lt;/p&gt;
&lt;p&gt;env&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;unset&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;取消设置某个变量&lt;/p&gt;
&lt;p&gt;unset [variable]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;export&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对某个变量操作使其在子bash中亦可使用,
该操作引入变量对父bash无效&lt;/p&gt;
&lt;p&gt;export [var_name]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;变量使用的另外一种方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有时候直接使用$var会有问题，这种情况下可以这样获取变量&lt;/p&gt;
&lt;p&gt;tree=&amp;quot;A big tree &amp;quot; #注意最后空格&lt;/p&gt;
&lt;p&gt;echo ${tree}on the load. #连接处没有空格&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bash的options&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;设置在使用未绑定变量时显示错误&lt;/p&gt;
&lt;p&gt;set -u&lt;/p&gt;
&lt;p&gt;echo $a_variable_not_exist #显示错误信息，而不是显示空&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;恢复显示空内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;set +u&lt;/p&gt;
&lt;p&gt;显示当前bash的所有options&lt;/p&gt;
&lt;p&gt;echo $-&lt;/p&gt;
&lt;p&gt;对于每个option的功能可查看man bash&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;嵌套Bash&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;echo $(var=1; echo $var)&lt;/p&gt;
&lt;p&gt;var1在内层的Bash中被声明并显示,
在外层的Bash中没有被绑定&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;另外一种使用方式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;echo `var=1; echo $var`&lt;/p&gt;
&lt;p&gt;使用反引号替代美元符和括号&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一个好用的地方在于，可以临时改变工作目录&lt;/p&gt;
&lt;p&gt;echo `cd /bin/; ls`&lt;/p&gt;
&lt;p&gt;命令执行后当前外层的Bash工作目录没有变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;历史记录&lt;/h2&gt;
&lt;p&gt;bang bang&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显示并执行最近的一次操作&lt;/p&gt;
&lt;p&gt;！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;![string]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用感叹号后接字符串，Bash自动搜索匹配最后一个符合条件的命令，
显示并执行&lt;/p&gt;
&lt;p&gt;echo Hey&lt;/p&gt;
&lt;p&gt;!ec #echo Hey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;history&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显示最近的number条命令&lt;/p&gt;
&lt;p&gt;history [number]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;![number]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过history获取命令记录后，使用感叹号加数字，
Bash显示并执行对应索引值的命令&lt;/p&gt;
&lt;p&gt;![number]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ctrl-r&lt;/p&gt;
&lt;blockquote&gt;
最方便的历史命令恢复操作，
按Ctrl-r，逐个输入字符串，Bash自动搜索并显示符合条件的记录。
找到需要的命令按回车即可执行&lt;/blockquote&gt;
&lt;p&gt;历史文件&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Bash记录当前环境的历史命令。
当退出时，
Bash将命令操作存在历史文件中。
一般是在~/.bash_history中。&lt;/p&gt;
&lt;p&gt;显示当前环境历史记录的最大长度&lt;/p&gt;
&lt;p&gt;echo $HISTSIZE&lt;/p&gt;
&lt;p&gt;显示历史记录文件的位置&lt;/p&gt;
&lt;p&gt;echo $HISTFILE&lt;/p&gt;
&lt;p&gt;显示历史记录文件的最大长度&lt;/p&gt;
&lt;p&gt;echo $HISTFILESIZE&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;文件匹配&lt;/h2&gt;
&lt;p&gt;asterisk&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匹配任意长度任意字符&lt;/p&gt;
&lt;p&gt;ls *.txt #显示所有后缀为txt的文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;question mark&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匹配一个任意字符&lt;/p&gt;
&lt;p&gt;ls ?.txt #显示所有名称为一个字符后缀为txt的文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;square brackets&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;匹配一个中括号中的字符&lt;/p&gt;
&lt;p&gt;ls [ABC].txt #A.txt/B.txt/C.txt&lt;/p&gt;
&lt;p&gt;也可以设定范围，数字或字符&lt;/p&gt;
&lt;p&gt;ls [0-9a-zA-Z].txt #匹配一个数字或大小写字符&lt;/p&gt;
&lt;p&gt;可以用！表示没有&lt;/p&gt;
&lt;p&gt;ls [!4].txt #去掉4.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;echo的一个神奇作用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在空目录下&lt;/p&gt;
&lt;p&gt;echo *&lt;/p&gt;
&lt;p&gt;显示一个菊花&lt;/p&gt;
&lt;p&gt;在有文件的目录下&lt;/p&gt;
&lt;p&gt;echo *&lt;/p&gt;
&lt;p&gt;显示所有文件（不包含隐藏文件）&lt;/p&gt;
&lt;p&gt;在使用时如果要显示*可使用逃逸符或引号将菊花包括起来&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;重定向与管道&lt;/h2&gt;
&lt;p&gt;输出重定向&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将标准输出(1)重定向到文件&lt;/p&gt;
&lt;p&gt;[command...] &amp;gt; [filename] #同：[command...] 1&amp;gt; [filename]&lt;/p&gt;
&lt;p&gt;上述操作会覆盖原有文件,
可设置Bash的set -C拒绝写入原有文件。&lt;/p&gt;
&lt;p&gt;标准输出(1)追加至文件末尾&lt;/p&gt;
&lt;p&gt;[command...] &amp;gt;&amp;gt; [filename] # [command...] 1&amp;gt;&amp;gt; [filename]&lt;/p&gt;
&lt;p&gt;标准错误流(2)的重定向&lt;/p&gt;
&lt;p&gt;[command...] 2&amp;gt; [destination]&lt;/p&gt;
&lt;p&gt;标准错误流(2)重定向至标准输出流&lt;/p&gt;
&lt;p&gt;[command...] 2&amp;gt;&amp;amp;1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输入重定向&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;标准输入流(0)的重定向&lt;/p&gt;
&lt;p&gt;[command...] &amp;lt; [source] # [command] 0&amp;lt; [source]&lt;/p&gt;
&lt;p&gt;输入流结束符的定义&lt;/p&gt;
&lt;p&gt;[command...] &amp;lt;&amp;lt; [sign]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例子&lt;/p&gt;
&lt;p&gt;cat &amp;lt;&amp;lt; Hey #读取输入直到遇到Hey结束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;管道&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;管道将一个命令的标准输出作为下一个命令的标准输入&lt;/p&gt;
&lt;p&gt;例子：显示/etc目录文件的末四个&lt;/p&gt;
&lt;p&gt;ls /etc | tail -4&lt;/p&gt;
&lt;p&gt;管道可嵌套&lt;/p&gt;
&lt;p&gt;ls /etc | tail -4 | tac&lt;/p&gt;
&lt;p&gt;关于管道没多少内容，不过发挥想象力可以利用管道和过滤器创造整个世界。&lt;/p&gt;
&lt;p&gt;下一篇将记录过滤器的若干资料。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="Bash"></category></entry><entry><title>Bash笔记(一)</title><link href="/Bash001.html" rel="alternate"></link><updated>2014-01-02T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2014-01-02:Bash001.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Shell终端Bash过程中的收获，主要为常用命令一览表及相关功能的记录。&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;基础知识&lt;/h2&gt;
&lt;p&gt;以echo为例，bash的基本命令及结构如下：&lt;/p&gt;
&lt;p&gt;显示命令后的所有参数&lt;/p&gt;
&lt;p&gt;echo [option] [arg0] [arg1] [arg2] [...]&lt;/p&gt;
&lt;p&gt;命令、参数之间用空格区分，空格数量差异没有作用,
在单引号或双引号之间的所有字符被当成同一个参数&lt;/p&gt;
&lt;p&gt;echo &amp;quot;Hey, this is a single argument.&amp;quot;&lt;/p&gt;
&lt;p&gt;设定option使echo解析字符操作符&lt;/p&gt;
&lt;p&gt;echo -e &amp;quot;A line with n a newline.&amp;quot;&lt;/p&gt;
&lt;p&gt;命令执行成功返回0，否则返回非0值,
返回值的意义可查命令的man&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;命令的帮助文档&lt;/h2&gt;
&lt;p&gt;type&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令有两种类型，内部和外部命令
显示命令的类型&lt;/p&gt;
&lt;p&gt;type [command]&lt;/p&gt;
&lt;p&gt;某些命令有两种类型，显示所有类型&lt;/p&gt;
&lt;p&gt;type -a [command]&lt;/p&gt;
&lt;p&gt;当执行同名命令时内置命令优先，
执行外部命令必须指定命令路径，如echo:&lt;/p&gt;
&lt;p&gt;/bin/echo Hello&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;man&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查找某个命令的手册页&lt;/p&gt;
&lt;p&gt;man [command]&lt;/p&gt;
&lt;p&gt;查找某个配置文件的手册页&lt;/p&gt;
&lt;p&gt;man [configuration file name]&lt;/p&gt;
&lt;p&gt;模糊搜索:查找带string的命令列表&lt;/p&gt;
&lt;p&gt;man -k [string]&lt;/p&gt;
&lt;p&gt;匹配某个section的命令,关于section的解释在man man中有&lt;/p&gt;
&lt;p&gt;man [section] [command]&lt;/p&gt;
&lt;p&gt;查看当前系统的文件系统结构树&lt;/p&gt;
&lt;p&gt;man hier&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;whatis&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一句话描述命令&lt;/p&gt;
&lt;p&gt;whatis [command]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;whereis&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;查找命令的所在目录列表&lt;/p&gt;
&lt;p&gt;whereis [command]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;which&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;which查找命令的路径并确定命令所在目录&lt;/p&gt;
&lt;p&gt;which [command]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h2&gt;目录操作&lt;/h2&gt;
&lt;p&gt;pwd&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显示当前所在的工作目录&lt;/p&gt;
&lt;p&gt;pwd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cd&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;进入某目录,可使用相对路径或绝对路径&lt;/p&gt;
&lt;p&gt;cd [location]&lt;/p&gt;
&lt;p&gt;进入home目录&lt;/p&gt;
&lt;p&gt;cd ~&lt;/p&gt;
&lt;p&gt;进入上一次的目录(方便！)&lt;/p&gt;
&lt;p&gt;cd -&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ls&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显示当前文件夹内容&lt;/p&gt;
&lt;p&gt;ls [location]&lt;/p&gt;
&lt;p&gt;显示所有文件（包括隐藏文件）&lt;/p&gt;
&lt;p&gt;ls -a [location]&lt;/p&gt;
&lt;p&gt;显示详细信息&lt;/p&gt;
&lt;p&gt;ls -l [location]&lt;/p&gt;
&lt;p&gt;显示详细信息并令文件大小显示更人性化(-_-||)&lt;/p&gt;
&lt;p&gt;ls -lh [location]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;mkdir&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创建目录&lt;/p&gt;
&lt;p&gt;mkdir [dir_name]&lt;/p&gt;
&lt;p&gt;一个命令创建多层目录&lt;/p&gt;
&lt;p&gt;mkdir -p [dir_name/dir_name/......]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;rmdir&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当目录为空时删除该目录&lt;/p&gt;
&lt;p&gt;rmdir [dir_name]&lt;/p&gt;
&lt;p&gt;一个命令删除目录树&lt;/p&gt;
&lt;p&gt;rmdir -p [dir_name/dir_name/......]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h2&gt;文件操作&lt;/h2&gt;
&lt;p&gt;file&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;显示文件类型&lt;/p&gt;
&lt;p&gt;file [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;touch&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;创建一个新文件&lt;/p&gt;
&lt;p&gt;touch [filename]&lt;/p&gt;
&lt;p&gt;创建文件并指定时间&lt;/p&gt;
&lt;p&gt;touch -t [time] [filename] //touch -t 201312291830 test&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;rm&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;删除文件(没了就没了啵...)&lt;/p&gt;
&lt;p&gt;rm [filename]&lt;/p&gt;
&lt;p&gt;删除前确认&lt;/p&gt;
&lt;p&gt;rm -i [filename]&lt;/p&gt;
&lt;p&gt;最牛逼的删除操作,强力递归删除目录及目录中的文件&lt;/p&gt;
&lt;p&gt;rm -rf [dirname]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cp&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;复制文件,从原文件到目标文件&lt;/p&gt;
&lt;p&gt;cp [source_filename] [destination_filename]&lt;/p&gt;
&lt;p&gt;复制文件夹及其中的文件&lt;/p&gt;
&lt;p&gt;cp -r [source_dir] [destination_dir]&lt;/p&gt;
&lt;p&gt;同时复制多个文件到同一个文件夹(最后一个参数务必为一个文件夹)&lt;/p&gt;
&lt;p&gt;cp [file1] [file2] [......] [destination_dir]&lt;/p&gt;
&lt;p&gt;防止复制时的现有文件覆盖&lt;/p&gt;
&lt;p&gt;cp -i [......]&lt;/p&gt;
&lt;p&gt;复制时保留原文件的权限和时间信息&lt;/p&gt;
&lt;p&gt;cp -p [......]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;mv&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;移动文件（或者将文件改名）&lt;/p&gt;
&lt;p&gt;mv [source_filename] [destination_filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h2&gt;文件内容操作&lt;/h2&gt;
&lt;p&gt;head&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认显示文件的前十行&lt;/p&gt;
&lt;p&gt;head [filename]&lt;/p&gt;
&lt;p&gt;可以设定显示的行数&lt;/p&gt;
&lt;p&gt;head -[number] [filename] //head -4 test.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;tail&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;默认显示文件最后十行&lt;/p&gt;
&lt;p&gt;tail [filename]&lt;/p&gt;
&lt;p&gt;同上，设置显示的行数&lt;/p&gt;
&lt;p&gt;tail -[number] [filename]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cat&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输出文件内容到标准输出中&lt;/p&gt;
&lt;p&gt;cat [filename]&lt;/p&gt;
&lt;p&gt;可同时输出多个文件&lt;/p&gt;
&lt;p&gt;cat [file1] [file2] [file3] [...]&lt;/p&gt;
&lt;p&gt;不指定文件，则从标准输入中读取数据，直到EOF,
可用这个特性创建新文件（利用输出重定向）&lt;/p&gt;
&lt;p&gt;cat &amp;gt; out.txt&lt;/p&gt;
&lt;p&gt;复制文件&lt;/p&gt;
&lt;p&gt;cat in.txt &amp;gt; out.txt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;tac&lt;/p&gt;
&lt;blockquote&gt;
与cat相反的输出&lt;/blockquote&gt;
&lt;p&gt;less/more&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;翻页显示文件内容
//更推荐用less,可以使用类似vim的翻页操作，并且支持搜索&lt;/p&gt;
&lt;p&gt;less [filename]&lt;/p&gt;
&lt;p&gt;可将其他命令的输出管道输入到less中&lt;/p&gt;
&lt;p&gt;ls | less&lt;/p&gt;
&lt;p&gt;//关于管道后面有详细说明&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;strings&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;将某个二进制文件中的可读ASCII字符输出
//有点憋屈的命令...&lt;/p&gt;
&lt;p&gt;strings /bin/ls&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h2&gt;命令的执行与控制&lt;/h2&gt;
&lt;p&gt;alias&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;可为某个常用的命令设置别名，别名与原名等同&lt;/p&gt;
&lt;p&gt;alias dog=cat&lt;/p&gt;
&lt;p&gt;同样，可设定带option甚至arguments的别名，需要用引号包含&lt;/p&gt;
&lt;p&gt;alias la='ls -a'&lt;/p&gt;
&lt;p&gt;显示当前所有别名&lt;/p&gt;
&lt;p&gt;alias&lt;/p&gt;
&lt;p&gt;去除别名&lt;/p&gt;
&lt;p&gt;unalias [command]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;set -x&lt;/p&gt;
&lt;blockquote&gt;
开启命令回显&lt;/blockquote&gt;
&lt;p&gt;set +x&lt;/p&gt;
&lt;blockquote&gt;
关闭命令回显&lt;/blockquote&gt;
&lt;p&gt;semicolon&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;命令与命令之间用分号分隔&lt;/p&gt;
&lt;p&gt;echo Hello; echo Hey&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ampersand&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单个与符号让当前命令在后台执行&lt;/p&gt;
&lt;p&gt;sleep 20 &amp;amp;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;dollar question&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;钱+问号获取前一个命令的返回值&lt;/p&gt;
&lt;p&gt;echo Hey ; echo $?&lt;/p&gt;
&lt;p&gt;//Hey 0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;double ampersand&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;双与符号连接两个命令，第二个命令只在第一个命令执行成功时才执行&lt;/p&gt;
&lt;p&gt;echo first &amp;amp;&amp;amp; echo second&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;double vertical bar&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;双竖直分割符连接两个命令，第二个命令只在第一个命令失败(返回非0值)时执行&lt;/p&gt;
&lt;p&gt;echo first || echo second&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;combination&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;组合使用&amp;amp;&amp;amp;和||可以做逻辑处理&lt;/p&gt;
&lt;p&gt;rm file &amp;amp;&amp;amp; echo ok || echo failed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;pound sign&lt;/p&gt;
&lt;blockquote&gt;
注释使用#号&lt;/blockquote&gt;
&lt;p&gt;escape character&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用反斜杠作为逃逸符&lt;/p&gt;
&lt;p&gt;echo hello ; world&lt;/p&gt;
&lt;p&gt;也可使用反斜杠作为隔行命令&lt;/p&gt;
&lt;p&gt;echo hello world&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="Bash"></category></entry><entry><title>软件体系结构：N皇后问题系列整体实现方案</title><link href="/PythonExpe004.html" rel="alternate"></link><updated>2013-11-29T22:40:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-11-29:PythonExpe004.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的实践小作，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;前面三篇博文粗略描述了N皇后问题的主要解决方案，由于四种风格（包括调用返回）归属同一个作业，因此将其整合在一个文件夹中并提取了部分共有模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;main.py&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此程序作为用户交互接口，接收用户输入参数，检测合法性并调用对应程序实现计算。&lt;/p&gt;
&lt;p&gt;通过构造命令行参数将N的值、重复计算的次数等数据传入对应模块中。&lt;/p&gt;
&lt;p&gt;使用os.system()系统函数直接调用其他运算程序。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;checkOk.py&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此模块作为公用模块存在，用于检测当前状态是否合法。&lt;/p&gt;
&lt;p&gt;内部是一个isOk函数，接收当前的棋盘状态，当前尝试摆放的位置，以及当前的层数。&lt;/p&gt;
&lt;p&gt;若当前位置可以摆放皇后，则返回True；若检测到冲突，则返回False。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pipe.py/blackboard.py/callReturn.py/traceback.py&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;分别是四个风格的主程序，接收命令行参数定义N以及测试的次数。&lt;/p&gt;
&lt;p&gt;内部调用了Python库的timeit模块，用于记录运行时间。&lt;/p&gt;
&lt;p&gt;另外调用返回风格使用了据传世界上最快的二进制法进行运算。&lt;/p&gt;
&lt;p&gt;本系列代码（上述六个源文件）在GNU/GPL v2协议下开放源代码以供交流学习。&lt;/p&gt;
&lt;p&gt;完整代码可在以下Github仓库获取：&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/scutLaoYi/software_architect"&gt;https://github.com/scutLaoYi/software_architect&lt;/a&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
</summary><category term="Python"></category><category term="SoftwareArchitect"></category></entry><entry><title>软件体系结构：N皇后问题之黑板风格</title><link href="/PythonExpe003.html" rel="alternate"></link><updated>2013-11-29T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-11-29:PythonExpe003.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的实践小作，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;strong&gt;风格三：黑板风格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;据传黑板风格的主要思想是利用一种数据结构模拟现实生活中的黑板，开启多个线程模拟现实生活中的多个人。黑板的数据对所有人是共享可见的，因此大家可以通通在黑板上交换各自的数据，起到一个数据中心的作用。&lt;/p&gt;
&lt;p&gt;而转换到我们这个N皇后问题，貌似黑板的作用有所变化。我的理解是这样的，首先将整个棋盘当成一个大黑板，对所有的线程可见并可读写。至于线程呢?则可以当成一帮无聊的玩家。每个玩家控制一个皇后，并且给每个玩家分配棋盘中的一行，每个玩家只能在分配到的行上移动皇后。玩家的任务是通过合作找到所有可能的皇后摆放位置。&lt;/p&gt;
&lt;p&gt;那么最简单的方法便是让所有玩家进行有序的查找。方便起见，我设定了玩家都从棋盘左方开始移动皇后，直到所有的玩家都将皇后移动到最右方的位置，那么整个棋盘的搜索便结束了。&lt;/p&gt;
&lt;p&gt;而鉴于需要找到所有不重复的皇后摆放位置（可行解），显而易见，让最上方的玩家开始移动一格，暂停，等待下面的所有玩家尝试当前状态下（第一层玩家在第一格）所有方案，再继续移动一格，等待所有玩家尝试当前状态下（第一层玩家在第二格）的所有方案...直到最上方的玩家走过所有格子，便可搜索到所有的可行解。&lt;/p&gt;
&lt;p&gt;对于每一行的玩家，都重复上面的操作，并且只关注其下方的玩家，类似于一个深度优先搜索，算法的整体便成型了。&lt;/p&gt;
&lt;p&gt;想到这里，发现每一个时刻只有一条线程在运行，其他线程都处于停滞等待状态，于是偷懒用了别的办法代替了多线程，具体实现参考我的完整代码。^_-&lt;/p&gt;
&lt;p&gt;另外，由于调用返回风格总感觉就是普通的函数调用，因此不再专门写一篇博文描述内容。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
</summary><category term="Python"></category><category term="SoftwareArchitect"></category></entry><entry><title>Git 与 GitHub 实践经验谈（一）</title><link href="/learning%20Git%203.html" rel="alternate"></link><updated>2013-11-07T22:10:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-11-07:learning Git 3.html</id><summary type="html">&lt;p&gt;自从上次聊完git的基本使用之后到现在已经两个多月了，一直都没有机会真的把它用在多人配合的项目开发之中。
主要是因为手头的小型实验项目都是自己在玩，所以很多时候用的是本地的仓库，写完commit一下基本就完事，连checkout都很少用。&lt;/p&gt;
&lt;p&gt;这个月开始接手了一个小型的团队合作项目，于是核心代码组（我，标神，院长）才算真正成立了一个小组团队开发。&lt;/p&gt;
&lt;p&gt;核心代码组负责的主要是系统后台的搭建和配置。所以我们搭建了一个小型的服务器，挂载Apache+mySQL+php+cakePHP，使用GitHub进行源码托管。&lt;/p&gt;
&lt;p&gt;这个过程中真正逐渐熟悉了git的操作，也碰到了大量实践中遇上的问题。在此写一个未知篇幅的实践经验收集帖，既有利于总结归纳开发过程中遇到的问题，理清思路，也有利于来日翻阅加深印象。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;首先是基本的操作回顾，这是实际开发过程中用到的一些方法，可能非常曲折，让高手看来简直就是瞎搞，不过不管质量，先记录下来，以后有更优的方案也可供对比。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本地仓库的创建自然是git init，这里我们被坑了一下，理论上我们总以为git init之后会默认创建一个仓库并产生一个默认分支叫做master，结果在实际操作中发现问题，git init只负责创建仓库，但在这个时候调用git branch会发现根本没有分支。&lt;/p&gt;
&lt;p&gt;这就导致了几天前以标神为主角的惊悚一幕。话说当天标神连敲八个小时代码完成了一个基本模块的创建，正当其修养生息吞云吐雾之际，我主动提出让其提交代码到远端仓库中。然而当时远端仓库已有更新，push操作之前必须pull下最新版本代码，然而该操作却死活无法成功完成。&lt;/p&gt;
&lt;p&gt;于是检查本地仓库，发现branch指向了一个奇怪的no branch分支，印象中貌似还带星号。众人大呼小叫，标神你看你又瞎搞，没有branch你pull个毛啊，肯定失败。于是七手八脚准备把branch切换到master。我手贱，在当前状态branch了一个备份，然后果断切换master。结果是，当时幸好手贱，因为master下居然只存在initial commit，标神一天的工作完全不存在。&lt;/p&gt;
&lt;p&gt;究其原因，在git init之后我们急于pull下远端仓库代码，而且操作有误，直接将远端仓库拉下却没有指定分支，导致标神的当前分支停留在no branch下。大家手生，没有注意，直接开始开发。这提醒我们在以后的开发中要时刻留意当前分支的状态。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;远端仓库的使用也经常发生问题，最诡异的莫过于项目开始之初，十次推送有九次因为莫名其妙的原因失败。有段时间看到deny的信息就窝火，TMD由推不上去。&lt;/p&gt;
&lt;p&gt;经过多次反复实验我们总结了如下的原因：&lt;/p&gt;
&lt;p&gt;一：push之前远端仓库有更新，当前仓库的版本与远端仓库不匹配，因此推送被拒绝。解决此问题的方法是，在推送失败后看到消息no fast ahead，一般便是当前仓库与远端仓库不匹配。这时应该首先pull更新本地仓库的历史版本，并合并到当前分支中，确保远端仓库的历史版本都已储存在当前仓库中。此时再次尝试推送，由于在原有远端仓库的基础上增加了commit，服务器八成会接受推送。当然这时候还有可能拒绝，那是因为你的用户没有权限。在GitHub中可以设定某个仓库的协作者，只有仓库的所有者（创建者）及指定的协作者的帐号可以推送提交到仓库。&lt;/p&gt;
&lt;p&gt;二：第一条简直就是废话，大家都知道要先更新本地仓库，但在这个pull的过程中也可能出现问题。&lt;/p&gt;
&lt;p&gt;经过反复实验对于这种问题我们的最佳实践是:首先将远端仓库的版本pull到本地仓库的一个新的branch中，这个可以一条命令解决：&lt;/p&gt;
&lt;blockquote&gt;
git pull origin master:tempBranch&lt;/blockquote&gt;
&lt;p&gt;这样便可将remote的master拉到本地的tempBranch，注意这个branch原先可以不用存在。&lt;/p&gt;
&lt;p&gt;在这之后，在当前分支中merge新pull下来的分支tempBranch:&lt;/p&gt;
&lt;blockquote&gt;
merge tempBranch&lt;/blockquote&gt;
&lt;p&gt;如果没有冲突，git会直接合并，如果冲突无法自动解决，则需要手动处理。&lt;/p&gt;
&lt;p&gt;在merge成功后查看git log会有一条新的记录，merge from ... 表示在这个点上合并了某个支线。&lt;/p&gt;
&lt;p&gt;这样便完成了本地仓库的历史版本更新。此时再次调用git push 推送远端仓库，八成没有问题。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;gitignore文件的使用&lt;/p&gt;
&lt;p&gt;我们都知道编辑gitignore文件可以屏蔽不需要加入仓库的文件。然而今天被该文件的使用细节卡了一个晚上。&lt;/p&gt;
&lt;p&gt;最终得出的结论是，git会屏蔽当前仓库所在文件夹， &lt;strong&gt;及其所有子文件夹&lt;/strong&gt; 的匹配文件。&lt;/p&gt;
&lt;p&gt;例如，我们添加了一个index.html文件，那么在所有子目录及根目录下的同名文件都会被屏蔽，即使并没有屏蔽子目录。&lt;/p&gt;
&lt;p&gt;这一点加上linux系列系统的隐藏文件（以点开头）在正常情况下不可见的特性，导致我们一度忽略了apache的配置文件htaccess在子目录中的存在，结果令服务器崩溃三个小时，院长重建了php框架若干次，项目停工一个晚上...&lt;/p&gt;
&lt;p&gt;此外，这个东西的另一个神奇之处在于，假设在某个分支下ignore了某个文件，此时切换到另一个分支并修改ignore添加该文件，commit，再切换回原来的branch，你会发现，咦？！那货没有了亲～&lt;/p&gt;
&lt;p&gt;问题在于那个文件被添加到第二个branch的历史记录里去了，此时切换回源branch，git会隐藏第二个branch的所有内容并替换为第一个branch的内容。&lt;/p&gt;
&lt;p&gt;最近几天收获不小，有一句话是这样说的，优秀的判断力来自经验，但经验来自错误的判断。说这话的是Fred Brooks。希望我们这些挫折的经历能多少铺平来日的道路。 ^_^&lt;/p&gt;
&lt;p&gt;时间仓促，随手记录于此。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;~~~~~~~~~~~~正文完~~~~~~~~~~~~~~~~~~~&lt;/p&gt;
</summary><category term="git"></category><category term="github"></category></entry><entry><title>软件体系结构：N皇后问题系列之管道风格</title><link href="/PythonExpe002.html" rel="alternate"></link><updated>2013-11-03T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-11-03:PythonExpe002.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的实践小作，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;strong&gt;风格二:管道风格&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;管道风格的主要思想是，将问题产生的输入作为流，从程序的入口输入，构造若干个过滤器，每个过滤器负责一部分过滤功能，将不符合结果的输入筛选掉，最终剩下完全符合要求的便是问题所需要的输出。&lt;/p&gt;
&lt;p&gt;考虑到N皇后问题，还是将棋盘分割为单独的层，为每个层构造一个过滤器，这样便可以从棋盘的顶部将所有可能解输入，层层筛选，直到棋盘底部依然符合要求的解集便是答案了。&lt;/p&gt;
&lt;p&gt;这里运用了一点剪枝以优化性能。显而易见，如果在第i层的某个解不符合要求，则没有必要为这个解构造所有i层以下的解，因为在第i层必然是不能通过过滤器的。因此，我的实现方法没有在最开始便构造所有层的所有解，而是只构造了第一层的所有解。在过滤第一层之后，从剩下的那些可能解的基础上，再次构造下一层的所有可能解，并传入下一层的过滤器。这样便省去了大量无效的解。&lt;/p&gt;
&lt;p&gt;那么这些解集放在哪里呢？初试Python，用了恶心的办法实现了，便是List。由于每个解都是由一个或若干个数字形成的列表组成（保存每一层的皇后位置），因此将每一层的每个可能解List存为一个大List，并再存入总List作为管道的输入流。这样在管道的另一端便获得筛选完成后的结果List。若有n皇后，则List[n]便为所有正确解的解集，本来应该是n-1的，此处用了占位的元素绕过了索引为0的值。&lt;/p&gt;
&lt;p&gt;至于过滤器，其实就是封装了上回用过的检测是否符合要求的isOk函数的一个函数，扫描当前层的所有可能解，若正确则构造该解的下一层，不正确则直接绕过。&lt;/p&gt;
&lt;p&gt;关键代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;queenPipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nowList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nowLevel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;u&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    过滤器&lt;/span&gt;
&lt;span class="sd"&gt;    传入当前的可能解集，进行筛选，获取新一层的所有可能解集并返回&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;solutionInThisLevel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;level:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;nowLevel&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nowSolution&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nowList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nowLevel&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;isOk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nowSolution&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nowLevel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;tmpList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nowSolution&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;
                &lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;solutionInThisLevel&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nowList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solutionInThisLevel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;u&amp;quot;解集 in this level:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;solutionInThisLevel&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;nowList&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;totalLevel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;u&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    搜索函数&lt;/span&gt;
&lt;span class="sd"&gt;    传入皇后的N，返回查找的结果&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;possibleList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;possibleList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;nowList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;possibleList&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#   初始化可能的值，传入管道&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;nowList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queenPipe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nowList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#   通过逐层过滤，获取最终的解集数量&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nowList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;totalLevel&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
</summary><category term="Python"></category><category term="SoftwareArchitect"></category></entry><entry><title>软件体系结构：N皇后问题系列之回溯法</title><link href="/PythonExpe001.html" rel="alternate"></link><updated>2013-10-31T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-10-31:PythonExpe001.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的实践小作，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;最近学习搞得有点杂，一怒之下一个月没打理个人主页了，有些事情就是这样，你越不管，时间越长，就越不想管。&lt;/p&gt;
&lt;p&gt;软件体系结构是本学期的课程之一，大作业是用几种奇怪的风格构造一个N皇后问题的求解器。&lt;/p&gt;
&lt;p&gt;由于没有限定语言，咱自然是Python搞起。正发愁前些日子学习了那么多的理论知识没地方实践，正好，这货拿来下菜！&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;风格一：回溯法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实我真的研究了很久这个神乎其神的名字，有点文言文的味道。然而半晌发现这货说到底就是深搜。
于是敲了一个递归的函数处理之，不加任何剪枝优化，回溯法原型就基本出来了。&lt;/p&gt;
&lt;p&gt;我们将棋盘横向切分为多个单独的层，显而易见，每一层只能放置一个皇后，且每一层都应该放置皇后。于是可以递归搜索每一层，找出所有可能位置。&lt;/p&gt;
&lt;p&gt;使用深度优先搜索算法，遍历每一层的所有位置，检查当前位置是否符合要求。如果不符合要求，继续搜索下一个位置；如果符合要求，则依据深度优先原则，递归调用函数自身搜索下一层所有位置，依此类推。算法的终止条件为搜索到达了棋盘的最底层，这时候如果找到了符合条件的位置，则说明这种摆法符合要求，记录为一个可能的解。&lt;/p&gt;
&lt;p&gt;那么这个时候唯一的问题在于如何确定当前位置是否符合要求。&lt;/p&gt;
&lt;p&gt;很明显，不需要考虑的是同一层的其他位置，因为算法已经确定了每一层我们都只放一个皇后。其次，该层以下的所有层都不需要考虑，因为当前状态下所有下层都还没有皇后，不存在冲突问题。&lt;/p&gt;
&lt;p&gt;于是需要研究的就只有当前层之上的其他层皇后的位置是否与当前位置冲突。&lt;/p&gt;
&lt;p&gt;冲突存在三种情况，一是在当前皇后的坐上方放射线上，二是在当前皇后的正上方，三是在当前皇后的右上方。于是，我们通过计算可以轻易求得冲突的三种位置与当前皇后位置和层数之间的关系。&lt;/p&gt;
&lt;p&gt;假设当前皇后坐标为x,在该皇后上方的所有x位置都不能有皇后（正上方），在当前皇后所在层的前i层，位置x-i和位置x+i均不能有皇后（左右上方放射线）。构造一个for循环即可。&lt;/p&gt;
&lt;p&gt;关键代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gameMap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;u&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        搜索主函数，&lt;/span&gt;
&lt;span class="sd"&gt;        遍历当前层的所有位置，&lt;/span&gt;
&lt;span class="sd"&gt;        找出可能位置并继续下层搜索&lt;/span&gt;
&lt;span class="sd"&gt;        level:当前所在的层&lt;/span&gt;
&lt;span class="sd"&gt;        totalLevel:总层数&lt;/span&gt;
&lt;span class="sd"&gt;        gameMap:列表，保存了每一层皇后的当前位置（不断变化）&lt;/span&gt;
&lt;span class="sd"&gt;        &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="c"&gt;#搜索到达最底层，找到的所有符合位置即为解&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                        &lt;span class="n"&gt;gameMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;checkOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gameMap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;found!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gameMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;

        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                        &lt;span class="c"&gt;#搜索未达到最底层，循环放置当前层的可能位置，搜索下一层&lt;/span&gt;
                        &lt;span class="n"&gt;gameMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;checkOK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gameMap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                                &lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;totalLevel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gameMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;checkOk是用来判断当前位置是否与上层的皇后冲突的函数，返回True标明不冲突。&lt;/p&gt;
&lt;p&gt;源代码等我过段时间上传到github再发布链接。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
</summary><category term="Python"></category><category term="SoftwareArchitect"></category></entry><entry><title>Python 笔记（七）</title><link href="/Python007.html" rel="alternate"></link><updated>2013-10-04T10:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-10-04:Python007.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的笔记和想法，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3，&lt;/strong&gt;
&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;文件和流&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;打开文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用open函数打开文件，参数一为文件名，参数二为打开方式，参数三为缓冲区设置&lt;/p&gt;
&lt;p&gt;最简单的打开文件代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;myFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myFile.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;程序自动以读取方式打开文件，如果文件不存在会引发IOError异常&lt;/p&gt;
&lt;p&gt;以写入方式打开文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;myFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myFile.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;'b'属性以二进制方式打开文件&lt;/p&gt;
&lt;p&gt;'a'属性以追加方式打开文件&lt;/p&gt;
&lt;p&gt;'+'属性以读写方式打开文件&lt;/p&gt;
&lt;p&gt;缓冲区设置：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0(False) 不设置缓冲区，直接写入硬盘;&lt;/p&gt;
&lt;p&gt;1(True) 开启缓冲区;&lt;/p&gt;
&lt;p&gt;&amp;gt;1 设置缓冲区大小;&lt;/p&gt;
&lt;p&gt;-1 使用默认缓冲区大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;读写文件（单字符）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;read():&lt;/p&gt;
&lt;blockquote&gt;
read函数可用于读取任意字节的字符串，添加参数可设定字节长，留空则会读取至文件结束&lt;/blockquote&gt;
&lt;p&gt;write():&lt;/p&gt;
&lt;blockquote&gt;
write用于写入数据，参数中设定写入的字符串&lt;/blockquote&gt;
&lt;p&gt;sys.stdin:&lt;/p&gt;
&lt;blockquote&gt;
可通过管道读取数据，类似于文件的一个东西，可调用它的read和write等读写函数进行数据处理&lt;/blockquote&gt;
&lt;p&gt;seek():&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同C++的seek,移动文件指针，参数一为偏移量，参数二为相对位置&lt;/p&gt;
&lt;p&gt;相对位置有如下可选参数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0，默认参数，从文件起始处开始&lt;/p&gt;
&lt;p&gt;1，从当前位置开始&lt;/p&gt;
&lt;p&gt;2，从文件结束处&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;tell():&lt;/p&gt;
&lt;blockquote&gt;
返回当前文件指针位置&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;文件读写（行操作）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;readline():&lt;/p&gt;
&lt;blockquote&gt;
读取一行内容，设定参数可限制一行的最长字符数，超过部分被忽略&lt;/blockquote&gt;
&lt;p&gt;readlines():&lt;/p&gt;
&lt;blockquote&gt;
读取所有行并保存到列表中&lt;/blockquote&gt;
&lt;p&gt;writelines():&lt;/p&gt;
&lt;blockquote&gt;
参数中传入字符串列表，直接将整个列表写入文件&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;文件关闭和缓冲区刷新&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;close():&lt;/p&gt;
&lt;blockquote&gt;
额...就是关闭文件，程序正常退出时文件会自动关闭，但最好写一下&lt;/blockquote&gt;
&lt;p&gt;flush():&lt;/p&gt;
&lt;blockquote&gt;
刷新缓冲区&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;文件迭代器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;简单、方便又好用的功能。&lt;/p&gt;
&lt;p&gt;所有文件对象（文件、标准输入流等）均可直接参与迭代操作，因此上述的按行处理的代码可简化为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;myFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;somefile.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;myFile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;依靠程序自动退出关闭文件，可创建匿名文件对象，再次简化代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;somefile.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;doSomething&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这一节确实没多少东西。感觉基础教程对二进制文件操作的讲解不多，过几天找些别的资料补充一下。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>Python 笔记（六）</title><link href="/Python006.html" rel="alternate"></link><updated>2013-10-03T10:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-10-03:Python006.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的笔记和想法，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3，&lt;/strong&gt;
&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;模块&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;模块的定义:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最简单的，一个文件(*.py)便是一个模块，文件名为模块名，模块可以单独运行也可以被其他模块所包含。&lt;/p&gt;
&lt;p&gt;使用import指令便可以包含其他模块&lt;/p&gt;
&lt;p&gt;使用条件判断：if __name__ == '__main__' 可判定当前模块是否独立运行，True为独立运行，False为被其他模块import&lt;/p&gt;
&lt;p&gt;当模块被其他模块import时，模块内的代码（类定义、函数定义、变量定义）均会被执行一次&lt;/p&gt;
&lt;p&gt;因此添加上述的条件判断可避免某些独立运行的代码在模块被包含时运行，这种机制有利于代码重用&lt;/p&gt;
&lt;p&gt;类似但更加强大的概念是包，包可以将若干模块封装在一起，成为一个程序组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取标准库中的一些常用模块及功能介绍:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过dir()函数可获取某个模块中的所有命名，包括函数、变量等&lt;/p&gt;
&lt;p&gt;通过print某个模块或模块中成员的__doc__文档字符串，可获取文档介绍&lt;/p&gt;
&lt;p&gt;例如sys模块中的sys.exit能够退出程序，并指定返回值&lt;/p&gt;
&lt;p&gt;sys.argv获取命令行参数&lt;/p&gt;
&lt;p&gt;os.system(&amp;quot;...&amp;quot;)调用终端执行参数中的命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="c"&gt;#Filename:ModelOne.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;argv:&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;path of python:&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;dir of sys:&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pprint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;document of sys model:&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;document of sys.exit function:&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;

      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;execute some command in terminal:&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;echo Hey!This is an echo by terminal!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

      &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;标准库的常用数据结构和其他功能&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;所需要的若干模块:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!usr/bin/python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding=gb2312 -*-&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;heapq&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shelve&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;集合&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testingSet&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;creating two sets with lists:&amp;quot;&lt;/span&gt;
      &lt;span class="c"&gt;#创建集合&lt;/span&gt;
      &lt;span class="n"&gt;setA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="n"&gt;setB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;setA&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setB&lt;/span&gt;
      &lt;span class="c"&gt;#set([0, 1, 2, 3, 4]) set([2, 3, 4])&lt;/span&gt;

      &lt;span class="c"&gt;#集合的常用功能，并集、判断子集、交集、差、及其他&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;union of two set:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#union of two set: set([0, 1, 2, 3, 4])&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;setA.issubset(setB):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;issubset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#setA.issubset(setB): False&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;setA &amp;gt; setB?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setA&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;setB&lt;/span&gt;
      &lt;span class="c"&gt;#setA &amp;gt; setB? True&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;setA.intersection(setB):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;intersection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#setA.intersection(setB): set([2, 3, 4])&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;setA.difference(setB):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;difference&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;setB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#setA.difference(setB): set([0, 1])&lt;/span&gt;
      &lt;span class="n"&gt;setB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;setB.add(6):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setB&lt;/span&gt;
      &lt;span class="c"&gt;#setB.add(6): set([2, 3, 4, 6])&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;setA ^ setB:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;setA&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;setB&lt;/span&gt;
      &lt;span class="c"&gt;#setA ^ setB: set([0, 1, 6])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;最小堆&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过空列表直接堆添加或者在现有列表上构建&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testingHeap&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="c"&gt;#空列表堆添加方式&lt;/span&gt;
      &lt;span class="n"&gt;myHeap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="c"&gt;#装入一个元素&lt;/span&gt;
              &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappush&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHeap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;myHeap&lt;/span&gt;
      &lt;span class="c"&gt;#[0, 2, 4, 6, 8]&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;heap replace:15&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heapreplace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHeap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#heap replace:15 0 替换并返回最小元素0&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                      &lt;span class="c"&gt;#弹出一个元素&lt;/span&gt;
                      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heappop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHeap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;the end.&amp;quot;&lt;/span&gt;
      &lt;span class="c"&gt;#2 4 6 8 15&lt;/span&gt;
      &lt;span class="c"&gt;#the end.&lt;/span&gt;
      &lt;span class="c"&gt;#直接构建方式&lt;/span&gt;
      &lt;span class="n"&gt;myHeap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHeap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;myHeap&lt;/span&gt;
      &lt;span class="c"&gt;#[2, 9, 5, 6, 4, 7, 3, 1, 8]&lt;/span&gt;
      &lt;span class="n"&gt;heapq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;heapify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myHeap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;myHeap&lt;/span&gt;
      &lt;span class="c"&gt;#[1, 2, 3, 6, 4, 7, 5, 9, 8]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;双端队列&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testingDeque&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="n"&gt;myDeque&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;deque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;myDeque&lt;/span&gt;
      &lt;span class="c"&gt;#deque([1, 2, 3, 4])&lt;/span&gt;
      &lt;span class="n"&gt;myDeque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;append 10:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;myDeque&lt;/span&gt;
      &lt;span class="c"&gt;#append 10: deque([1, 2, 3, 4, 10])&lt;/span&gt;
      &lt;span class="n"&gt;myDeque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;appendleft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;appendleft 9:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myDeque&lt;/span&gt;
      &lt;span class="c"&gt;#appendleft 9: deque([9, 1, 2, 3, 4, 10])&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pop:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myDeque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="c"&gt;#pop: 10&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;popleft:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;myDeque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;popleft&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="c"&gt;#popleft: 9&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;now queue:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myDeque&lt;/span&gt;
      &lt;span class="c"&gt;#now queue: deque([1, 2, 3, 4])&lt;/span&gt;

      &lt;span class="c"&gt;#rotate用于旋转队列&lt;/span&gt;
      &lt;span class="n"&gt;myDeque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;after rotate(2):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myDeque&lt;/span&gt;
      &lt;span class="c"&gt;#after rotate(2): deque([3, 4, 1, 2])&lt;/span&gt;
      &lt;span class="n"&gt;myDeque&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;after rotate(-3):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;myDeque&lt;/span&gt;
      &lt;span class="c"&gt;#after rotate(-3): deque([2, 3, 4, 1])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;时间模块&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testingTime&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;testing time model&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;time():&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="c"&gt;#time(): 1380772215.3 获取时间(1970那货)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;asctime():&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="c"&gt;#asctime(): Thu Oct  3 11:50:15 2013&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sleep(1):&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#睡眠一秒&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;localtime(time):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;localtime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
      &lt;span class="c"&gt;#localtime(time): time.struct_time(tm_year=2013, tm_mon=10, tm_mday=3, tm_hour=11,              #tm_min=50, tm_sec=16, tm_wday=3, tm_yday=276, tm_isdst=0)&lt;/span&gt;
      &lt;span class="c"&gt;#localtime获取时间元组，包含若干信息&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;随机模块&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testingRandom&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;random():&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="c"&gt;#random(): 0.103084395737 返回0-1之间的随机实数一枚&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;uniform(1,5):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#uniform(1,5): 2.36136935196 范围从1-5&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;randrange(1, 10, 2):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randrange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#randrange(1, 10, 2): 3 从列表中随机一个值&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;choice(range(1, 10)):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
      &lt;span class="c"&gt;#choice(range(1, 10)): 7 相同，不过列表可自己设定&lt;/span&gt;
      &lt;span class="n"&gt;listForShuffle&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listForShuffle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;shuffle a range(5, 20, 2):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;listForShuffle&lt;/span&gt;
      &lt;span class="c"&gt;#shuffle a range(5, 20, 2): [9, 19, 5, 17, 11, 13, 15, 7] 将给定的列表打散&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sample(randomList, 5):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listForShuffle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#sample(randomList, 5): [11, 17, 7, 13, 9] 列表中随机抽取5个元素&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Shelve&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可作为方便的小型数据库，使用方式非常简单&lt;/p&gt;
&lt;p&gt;首先用Shelve打开(open)一个文件，该文件自动成为数据储存的地方，open函数返回Shelve对象&lt;/p&gt;
&lt;p&gt;通过对该对象的操作可以操作数据，实际操作时直接把该对象当作字典即可&lt;/p&gt;
&lt;p&gt;完成后对该对象调用close关闭并保存数据到文件里去&lt;/p&gt;
&lt;p&gt;鸭子类型在这里表现的非常牛逼&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testingShelve&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;db.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                      &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hey!&amp;quot;&lt;/span&gt;
              &lt;span class="n"&gt;innerMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                      &lt;span class="n"&gt;innerMap&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hey!&amp;quot;&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                      &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;innerMap&lt;/span&gt;
      &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

      &lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shelve&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;db.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;now testing reading data from db&amp;quot;&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
              &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39; &amp;#39;&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)],&lt;/span&gt;
              &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;now testing making some exception:&amp;quot;&lt;/span&gt;
              &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;100&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;exception occurs!&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;正则表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python的另外一个牛逼的功能，通过正则表达式可以获得非常强大的字符串处理能力&lt;/p&gt;
&lt;p&gt;包括构建，搜索，替换等。&lt;/p&gt;
&lt;p&gt;正则表达式的基本要点有以下：&lt;/p&gt;
&lt;p&gt;. :通配符，指代一个字符&lt;/p&gt;
&lt;p&gt;字符集&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[a-z]:字符集，a到z均可，取一个&lt;/p&gt;
&lt;p&gt;[^abc]:反转字符集，除了a,b,c之外的所有字符，取一个&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;子模式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;单个字符均为子模式&lt;/p&gt;
&lt;p&gt;(abc|cba):多个字符的子模式，匹配abc或者cba&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;子模式之后可添加重复运算符定义匹配的数量&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;?:0或1个&lt;/p&gt;
&lt;p&gt;+:1个或多个&lt;/p&gt;
&lt;p&gt;*:0个1个或多个&lt;/p&gt;
&lt;p&gt;{a, b}:a到b个&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重复运算符默认为贪婪模式，即匹配最多的字符&lt;/p&gt;
&lt;p&gt;在重复运算符后添加?可将其转变为非贪婪模式，匹配最少的字符&lt;/p&gt;
&lt;p&gt;匹配位置&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;^:只在字符串开头匹配&lt;/p&gt;
&lt;p&gt;$:只在字符串结尾匹配&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一对匹配的小括号定义了一个组，最大的组为整个串，根据左括号出现的次序决定组的编号&lt;/p&gt;
&lt;p&gt;外层的组包含了内层的组，整体作为一个组&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在re模块中包含了如下几个常用函数：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;compile:编译，将正则表达式编译为匹配模式对象&lt;/p&gt;
&lt;blockquote&gt;
匹配模式对象可用于实现正则表达式的功能，
在需要匹配的次数比较多的情况下使用模式对象可以让Python不用每次都从正则表达式开始处理，
有点类似pyc文件&lt;/blockquote&gt;
&lt;p&gt;search:搜索并返回第一个匹配成功的对象，失败返回None&lt;/p&gt;
&lt;blockquote&gt;
该对象包含了匹配的基本信息，包括匹配的位置，匹配的长度等，可用于后续的操作&lt;/blockquote&gt;
&lt;p&gt;match：从头开始匹配&lt;/p&gt;
&lt;blockquote&gt;
若字符串开头满足正则表达式则返回True，否则False&lt;/blockquote&gt;
&lt;p&gt;split：通过正则表达式对字符串进行分割&lt;/p&gt;
&lt;blockquote&gt;
类似str的split,但str的split只能用某个字符进行分割，这货可以用匹配的字符串作为分隔符，
还能设定最大的分隔数，超过部分直接作为整体返回&lt;/blockquote&gt;
&lt;p&gt;findall：搜索整个字符串的所有匹配字符串，返回列表&lt;/p&gt;
&lt;p&gt;sub:将所有匹配字符串替换&lt;/p&gt;
&lt;p&gt;escape:自动给字符串添加转义符使字符串可作为正则表达式使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testingRe&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
      &lt;span class="n"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;quot;[0-9]+&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;timeStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;timeStr&lt;/span&gt;
      &lt;span class="c"&gt;#Thu Oct  3 12:17:58 2013&lt;/span&gt;
      &lt;span class="n"&gt;numObject&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;numObject&lt;/span&gt;
      &lt;span class="c"&gt;#&amp;lt;_sre.SRE_Match object at 0x7f9966eba7e8&amp;gt;&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeStr&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
              &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;it begins with number&amp;quot;&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
              &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;it doesn&amp;#39;t begin with number&amp;quot;&lt;/span&gt;
      &lt;span class="c"&gt;#it doesn&amp;#39;t begin with number&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;split with number:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#split with number: [&amp;#39;Thu Oct  &amp;#39;, &amp;#39; &amp;#39;, &amp;#39;:&amp;#39;, &amp;#39;:&amp;#39;, &amp;#39; &amp;#39;, &amp;#39;&amp;#39;]&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;setting maxsplit 3:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;maxsplit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#setting maxsplit 3: [&amp;#39;Thu Oct  &amp;#39;, &amp;#39; &amp;#39;, &amp;#39;:&amp;#39;, &amp;#39;:58 2013&amp;#39;]&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;find all number:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#find all number: [&amp;#39;3&amp;#39;, &amp;#39;12&amp;#39;, &amp;#39;17&amp;#39;, &amp;#39;58&amp;#39;, &amp;#39;2013&amp;#39;]&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;replace all number with a string(&amp;#39;number&amp;#39;)&amp;quot;&lt;/span&gt;
      &lt;span class="c"&gt;#replace all number with a string(&amp;#39;number&amp;#39;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;timeStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#Thu Oct  number number:number:number number&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;escape&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;timeStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#Thu\ Oct\ \ 3\ 12\:17\:58\ 2013&lt;/span&gt;

      &lt;span class="n"&gt;webStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;scutlaoyi.github.com&amp;quot;&lt;/span&gt;
      &lt;span class="n"&gt;webPattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;r&amp;#39;[^\.]+\.(github)\.[^.]{3}&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;webPattern&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#github 获取一号组&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#10 一号组的起始为位置&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#16 一号组的终止位置+1&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#(10, 16) 起始和终止位置&lt;/span&gt;
      &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;webPattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;r&amp;#39;https://\1.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;webStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="c"&gt;#使用被匹配字符串的一号组替换并构造新的字符串&lt;/span&gt;
      &lt;span class="c"&gt;#https://github.com&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这篇卡了很久，主要是因为基础教程第十章内容太多了，每次写一半就感觉没欲望写下去.&lt;/p&gt;
&lt;p&gt;今天硬着头皮愣是把它弄出来，了却一桩小事。完成了将近二分之一，过了这章后面的貌似就没多少困难的东西了，即将进入实战。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>socket编程(3):多线程socket服务器/客户端</title><link href="/network003.html" rel="alternate"></link><updated>2013-09-28T16:00:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-28:network003.html</id><summary type="html">&lt;hr class="docutils" /&gt;
&lt;p&gt;多线程的tcp服务器与单线程的差别不大，主要差别在于服务器接受一个请求后创建一个新线程处理请求，主线程继续等待连接，因此可以在同一个时间处理多个请求。单线程的服务器每次都只有主线程接受并处理请求，这种情况下其他连接就必须等待。&lt;/p&gt;
&lt;p&gt;在GNU/Linux操作系统下可以使用pthread创建并管理线程。&lt;/p&gt;
&lt;p&gt;应该注意的一点是pthread不是Linux默认库的一部分，因此在编译时需要添加参数 -lpthread ，否则会报错(找不到文件：undefined reference to 'pthread_create')。&lt;/p&gt;
&lt;p&gt;由于本代码只为测试多线程，编写时没有考虑长的时延，因此在主线程退出前仅等待最后一个子线程的退出，这在实际操作中八成会出问题。&lt;/p&gt;
&lt;p&gt;另外在创建线程时传入的函数参数为指针，需要注意对内存的管理，防止多个线程的指针变量指向同一个地址。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++版本服务器代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cerrno&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;pthread.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;SERVER_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9876&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MAX_CONNECTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;TIME_INTERVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="c1"&gt;//recvData 为新线程调用函数，传入参数为客户端的ID&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;recvData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BUF_SIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;//获取客户端ID&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//接收数据&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;from thread id:%u&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt; recieved:%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;pthread_self&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//当接收到&amp;#39;bye&amp;#39;信号时退出&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;b&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;y&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TIME_INTERVAL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="c1"&gt;//关闭连接并释放内存&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;delete&lt;/span&gt; &lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//线程退出&lt;/span&gt;
        &lt;span class="n"&gt;pthread_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;serverDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;socket creating failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htonl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INADDR_ANY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockaddr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;binding socket failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;listening socket failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="kt"&gt;pthread_t&lt;/span&gt; &lt;span class="n"&gt;tid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rtnStatus&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MAX_CONNECTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;//申请一个int空间储存客户端ID&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="c1"&gt;//接受连接&lt;/span&gt;
                        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;accepting socket failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="c1"&gt;//创建线程处理连接，主线程继续接受新的连接&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;rtn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pthread_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recvData&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rtn&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;creating thread failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="c1"&gt;//等待线程结束&lt;/span&gt;
                &lt;span class="n"&gt;pthread_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;rtnStatus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;mes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Server quit!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;客户端的代码与之前的单线程代码基本相同，唯一的区别在于发送的内容，为了显示服务器多线程的能力特意延长了连接的时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++版本客户端代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;iostream&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;errno.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9876&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MAX_COUNTER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;TIME_INTERVAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BUF_SIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;creating socket failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inet_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;connecting socket failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sending counter...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//隔一秒发送一个数据，持续五秒，发送bye信号&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;MAX_COUNTER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;counter now:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sending message:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sending message failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TIME_INTERVAL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;end the connection!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;bye&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sending end message failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error:%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在使用linux的sleep()函数时，发现printf函数存在显示问题，总是要等到所有的sleep完成后再一次性显示所有的内容。因此替换为cout并每次使用endl刷新缓冲区解决该问题。&lt;/p&gt;
&lt;p&gt;Python版本就不挂上来了，因为我还没写 ^_^&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;下一篇：可能会是邮件服务器或者代理服务器神马的&lt;/p&gt;
</summary><category term="socket"></category></entry><entry><title>Python 笔记（五）</title><link href="/Python005.html" rel="alternate"></link><updated>2013-09-25T09:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-25:Python005.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的笔记和想法，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3，&lt;/strong&gt;
&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;类的进阶玩法&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;构造函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构造函数的名称为 &amp;quot;__init__&amp;quot;，在对象被生成时自动调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;继承状态下的构造函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果一个类继承了某基类，且没有重写构造函数，则基类构造函数被自动调用：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnotherClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnotherClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#错误！构造函数需要两个参数&lt;/span&gt;
&lt;span class="n"&gt;ac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnotherClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#正确的做法&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;调用父类构造函数：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;方法一：调用父类的非绑定构造函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnotherClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnotherClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在子类的构造函数中调用了父类的非绑定版本构造函数，并将自身作为参数传入。&lt;/p&gt;
&lt;p&gt;方法二：使用super函数&lt;/p&gt;
&lt;p&gt;使用super函数需要将类定义为新式类，方法是加入'__metaclass__ = type'一行&lt;/p&gt;
&lt;p&gt;super函数可自动调用父类的构造函数的绑定版本，具体方法参见示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnotherClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AnotherClass&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ac&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnotherClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;经测试，在多继承的情况下super函数只会调用被继承的第一个基类的构造函数（继承列表最左），这个问题有待深究。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;魔法方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;基本的魔法方法有四个，__len__, __getitem__, __setitem__ 以及 __delitem__&lt;/p&gt;
&lt;p&gt;分别用于获取对象长度，获取对应键的值，设置对应键的值，以及删除对应键的值&lt;/p&gt;
&lt;p&gt;定义了上述的方法后分别可通过如下函数调用对应功能：&lt;/p&gt;
&lt;p&gt;获取长度可使用len(object), 获取对应键的值可用object[index], 设置值可下标操作后直接赋值，删除可使用del object[index]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;property：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;property用于创建类的属性，适用于某些依赖其他几个数据成员的属性的创建，应用property可以简化存储过程。&lt;/p&gt;
&lt;p&gt;假设有一个程序员类，程序员类有工作时长和单位工资，假设总工资为时长乘以单位工资，那么可以利用property定义一个总工资属性：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Coder&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;salary&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;getTotalSalary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;salary&lt;/span&gt;
        &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;property&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;getTotalSalary&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;coder&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Coder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;coder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total&lt;/span&gt;
&lt;span class="c"&gt;#4000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;property最多接受四个参数，分别为fget, fset, fdel, doc，设定对应的方法便可绑定功能，若不设定对应的方法则调用时会抛异常。（如上文例子，给total赋值会引发异常）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;静态方法和类方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;声明静态方法或者类方法的简单方式是使用装饰器，例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;__metaclass__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
        &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;staticFuncA&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;static function called!&amp;quot;&lt;/span&gt;
        &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;classFuncA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;class function called by &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;

&lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staticFuncA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#static function called!&lt;/span&gt;
&lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classFuncA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#class function called by  &amp;lt;class &amp;#39;__main__.ComplexClass&amp;#39;&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ComplexClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;staticFuncA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#static function called!&lt;/span&gt;
&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classFuncA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#class function called by  &amp;lt;class &amp;#39;__main__.ComplexClass&amp;#39;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;类的静态方法基本上跟普通的函数没有区别。可通过类或者对象加以调用。调用静态方法不传入self参数，因此也就无法调用对象的数据成员。&lt;/p&gt;
&lt;p&gt;类方法是比较特别的东西，传入的参数是类，而不是对象，这种在工厂模式的情况下非常有用，可以对调用方法的类进行区别。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;__getattr__等方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;四个方法： __getattr__ __setattr__ __getattribute__ 以及 __delattr__&lt;/p&gt;
&lt;p&gt;分别在特性被访问且不存在、设置特性值、特性被访问以及特性被删除的时候被调用。&lt;/p&gt;
&lt;p&gt;使用上述方法可拦截并自定义对特性的访问。&lt;/p&gt;
&lt;p&gt;抄个例子就一目了然了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding:gb2312 -*-&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;

&lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Rectangle&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;size&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;span class="c"&gt;#(0,0)&lt;/span&gt;
&lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;size after setting:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;span class="c"&gt;#(100, 50)&lt;/span&gt;
&lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;change width to 50:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;
&lt;span class="c"&gt;#(50,50)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;
&lt;span class="c"&gt;#50&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意的是这里定义了__getattr__方法，该方法是在特性被访问且不存在的时候被触发，因此对width和height特性的访问不会被拦截。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;迭代器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;__iter__方法返回一个迭代器，具有next方法的对象称为迭代器。每次调用迭代器的next方法返回下一个值，当迭代结束时引发一个StopIteration异常。&lt;/p&gt;
&lt;p&gt;比较生猛的做法是类本身实现了__iter__方法和next方法，这样就能通过返回其自身进行迭代操作。&lt;/p&gt;
&lt;p&gt;迭代器的方便之处在于处理列表无法储存的无限长序列，通过迭代器可以逐个返回处理。&lt;/p&gt;
&lt;p&gt;搞一个无限长的步进列表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding:gb2312 -*-&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StepList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;

&lt;span class="n"&gt;sl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StepList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c"&gt;#15 35 55 75 95 115 135 155 175 195 215 235 255 275 295 315 335 355 375 395 415 435 455 475 495&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果没有指定终止条件（elem &amp;gt; 500)，那么循环会永远进行下去。&lt;/p&gt;
&lt;p&gt;稍做修改我们就得到了自动终止的迭代器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding:gb2312 -*-&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;StepList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;begin&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;step&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;next&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;StopIteration&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;now&lt;/span&gt;

&lt;span class="n"&gt;sl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StepList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="c"&gt;#15 35 55 75 95 115 135 155 175 195&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;生成器：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;有点麻烦，暂且不写。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>socket编程(2):单线程udp服务器/客户端</title><link href="/network002.html" rel="alternate"></link><updated>2013-09-24T10:00:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-24:network002.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;基本流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;与tcp的通讯非常类似，不同之处在于udp是无连接的，因此没有创建连接这种操作，服务器开启端口后接受数据并直接返回。
设置时将socket类型设置为SOCK_DGRAM即可创建udp通讯。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++版本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//filename:udpServer.cpp&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;errno.h&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;SOCKET_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//服务器socket&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//储存数据长度&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//服务器地址信息结构体&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//客户机地址信息结构体&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;remoteAddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//缓冲区&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BUF_SIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;//创建socket, SOCK_DGRAM为udp, 上一次的SOCK_STREAM为tcp&lt;/span&gt;
        &lt;span class="n"&gt;serverDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Creating socket failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//初始化并设置服务器地址信息&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//协议&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;INADDR_ANY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//接受所有地址输入&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SOCKET_PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//端口&lt;/span&gt;

                &lt;span class="c1"&gt;//绑定socket与地址&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;binding failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sin_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//接收数据，存入缓冲区，并将客户端地址信息写入remoteAddr&lt;/span&gt;
                &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recvfrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;remoteAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sin_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;receive failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;receive from %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inet_ntoa&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remoteAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//好用的东西，输出错误信息&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;客户机：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//filename:udpClient.cpp&lt;/span&gt;

&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;errno.h&amp;gt;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;BUF_SIZE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;SOCKET_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;hostAddr&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//客户机socket&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//数据长度&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//服务器地址&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//缓冲区，暂存数据用于发送&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;BUF_SIZE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;//创建socket，同样是udp&lt;/span&gt;
        &lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;creating socket failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//设定服务器地址, 协议、host、port&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inet_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hostAddr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SOCKET_PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;//来点小数据&lt;/span&gt;
                &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey! This is a message sent from client!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;//发射数据，目标：服务器地址&lt;/span&gt;
                &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sendto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sending message failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python版本:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;服务器:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding:gb2312 -*-&lt;/span&gt;
&lt;span class="c"&gt;#filename:udpServer.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#创建socket&lt;/span&gt;
&lt;span class="n"&gt;serverSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#绑定&lt;/span&gt;
&lt;span class="n"&gt;serverSocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#接收数据&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clientAddr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;serverSocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recvfrom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2048&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;received from&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clientAddr&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;data:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="n"&gt;serverSocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;客户机：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding:gb2312 -*-&lt;/span&gt;
&lt;span class="c"&gt;#filename:udpClient.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="c"&gt;#创建socket&lt;/span&gt;
&lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9999&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clientSocket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_DGRAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;#输入数据并发射&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;message:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clientSocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;clientSocket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;服务器开启后等待数据到达，此时开启客户机并发送数据，服务器便接受和显示数据。&lt;/p&gt;
&lt;p&gt;当服务器未启动的情况下开启客户机，客户机依然正常发送数据，但数据将丢失。&lt;/p&gt;
&lt;p&gt;可随意使用C++版本与Python版本的客户机/服务器进行组合通讯，没有任何问题，这一方面也体现了网络通讯的方便之处，面向的是协议，而对实现协议的编程语言没有要求。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;下一篇：（可能是）多线程socket编程&lt;/p&gt;
</summary><category term="socket"></category></entry><entry><title>Python 笔记（四）</title><link href="/Python004.html" rel="alternate"></link><updated>2013-09-23T15:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-23:Python004.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的笔记和想法，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3，&lt;/strong&gt;
&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;类的初识&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关于称呼的一些声明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;本文以&amp;lt;Python基础教程&amp;gt;为基础，沿用了其中的部分称呼，一般的函数通称函数，类的成员函数称为方法。&lt;/p&gt;
&lt;p&gt;但由于C++的一些思想比较根深蒂固，有时会混用两种称呼。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类的定义及创建对象&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey!Function A called!&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcB&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey!Function B called!&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Name is set as &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;

&lt;span class="n"&gt;sc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;funcA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#Hey!Function A called!&lt;/span&gt;
&lt;span class="n"&gt;sc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;funcC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;szy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#Name is set as szy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;一般方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;定义一般方法时需要将self作为第一个参数传入，在方法中调用self可以获得调用该方法的对象本身。&lt;/p&gt;
&lt;p&gt;尝试过不添加self，发现可以运行，但通过对象或者通过类名均无法调用该方法。&lt;/p&gt;
&lt;p&gt;调用一般方法可通过对象加方法名加参数列表，亦可通过调用类名加方法名并将对象作为第一个参数传入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;FuncA&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;sc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;funcA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#FuncA&lt;/span&gt;
&lt;span class="n"&gt;SimpleClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;funcA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sc1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;#FuncA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;对象的特性（数据成员）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对象的数据成员（C++说法）直接通过赋值产生，如上文的self.name&lt;/p&gt;
&lt;p&gt;每个对象拥有自己的作用域，因此一个对象的数据不影响其他对象&lt;/p&gt;
&lt;p&gt;可在类定义的外部直接赋值新的数据成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anotherArg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;scutLaoYi&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;anotherArg&lt;/span&gt;
&lt;span class="c"&gt;#scutLaoYi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python没有真正的私有成员，所有成员均可在类外被调用，但可通过将成员名称改为 “__name__ ” 的风格隐藏该数据成员，通过这种方法类的外部无法直接调用 “__name__” 获取该数据成员。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类的静态数据成员&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在类定义中不仅可以定义方法，还可直接在类作用域中声明变量&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey!Function A called!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;此处声明的number在类的作用域中，因此所有类成员共享一个number变量。调用类的静态数据成员可通过对象调用，亦可通过类名调用。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;sc2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SimpleClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="c"&gt;#14 14&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过在对象上赋值同名变量，可覆盖类的静态数据成员&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sc2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sc2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="c"&gt;#14 15&lt;/span&gt;
&lt;span class="n"&gt;SimpleClass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;
&lt;span class="c"&gt;#修改的是静态成员的值&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sc2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="c"&gt;#16 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;父类&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;声明父类的方法是在类名之后加入父类的名称，Python支持多继承，因此可以加入多个父类。子类继承父类的所有成员。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcA&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;FuncA&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AnotherSimpleClass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SimpleClass&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;

&lt;span class="n"&gt;asc1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AnotherSimpleClass&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;asc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;
&lt;span class="c"&gt;#14&lt;/span&gt;
&lt;span class="n"&gt;asc1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;funcA&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#FuncA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>Python笔记（三）</title><link href="/Python003.html" rel="alternate"></link><updated>2013-09-18T15:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-18:Python003.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的笔记和想法，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3，&lt;/strong&gt;
&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;函数&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;定义函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关键词def，类似于C++，由函数名、参数列表、函数体和返回语句构成。&lt;/p&gt;
&lt;p&gt;在def的下一行可添加字符串作为文档字符串。
文档字符串描述了函数的功能作用。
文档字符串作为函数的一部分存在。
可通过调用函数的__doc__属性返回文档字符串。&lt;/p&gt;
&lt;p&gt;参数列表中的参数后可添加赋值语句，相当于C++中的默认参数。&lt;/p&gt;
&lt;p&gt;调用函数时，默认通过位置复制，亦可指定参数名称赋值，称为关键字参数赋值。&lt;/p&gt;
&lt;p&gt;基本例子如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;This is a function to say hello!&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b is&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="c"&gt;#This is a function to say hello!&lt;/span&gt;
&lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#a is 15 b is 100&lt;/span&gt;
&lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#a is 100 b is 50&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;sayHello&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#a is 60 b is 50&lt;/span&gt;
&lt;span class="c"&gt;#hello&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;与C++类似，基本类型（数字、字符串等）参数在函数内作为局部变量存在，改变其值或引用不影响外部实参。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;传入列表实参&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于Python的鸭子类型，函数并不保证外部传入参数的类型，因此可传入列表，当传入的是列表或字典时，由于参数是列表或字典的引用，因此改变引用的列表的数据时，相当于改变了外部实参指向的列表，因此外部数据也会发生变化。&lt;/p&gt;
&lt;p&gt;与上文函数不同，当不显式返回某个值时，函数会返回None值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listA&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;This is a function to try the list parameter&amp;quot;&lt;/span&gt;
        &lt;span class="n"&gt;listA&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;funcOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="c"&gt;#This is a function to try the list parameter&lt;/span&gt;
&lt;span class="n"&gt;listB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;listB&lt;/span&gt;
&lt;span class="c"&gt;#[1, 2, 3, 4]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;funcOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listB&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#None&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;listB&lt;/span&gt;
&lt;span class="c"&gt;#[1, 25, 3, 4]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;参数收集&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过在参数前加入一个星号，参数自动转换为元组，接受外部调用时传入的所有剩余参数。具体见例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;This is a function using a tuple collecting parameters&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;funcTwo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="c"&gt;#This is a function using a tuple collecting parameters&lt;/span&gt;
&lt;span class="n"&gt;funcTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#1 ()&lt;/span&gt;
&lt;span class="n"&gt;funcTwo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#1 (2, 3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上文例子中，调用funcTwo(1,2,3)，参数1传入arg1,剩余参数全部进入参数args，args本身作为元组出现。&lt;/p&gt;
&lt;p&gt;类似的，在参数前加入两个星号可将参数变为字典，可接受任意数量的关键字参数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argMap&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;This is a function using a tuple and a map to collect parameters&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;argMap&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;funcThree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="c"&gt;#This is a function using a tuple and a map to collect parameters&lt;/span&gt;
&lt;span class="n"&gt;funcThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#1 () {}&lt;/span&gt;
&lt;span class="n"&gt;funcThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#1 (2, 3, 4) {}&lt;/span&gt;
&lt;span class="n"&gt;funcThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#1 () {&amp;#39;y&amp;#39;: 3, &amp;#39;x&amp;#39;: 2, &amp;#39;z&amp;#39;: 4}&lt;/span&gt;
&lt;span class="n"&gt;funcThree&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#1 (2, 3, 4) {&amp;#39;y&amp;#39;: 6, &amp;#39;x&amp;#39;: 5, &amp;#39;z&amp;#39;: 7}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一目了然&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;反向操作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;构建元组、列表或字典后，可通过在实参前添加一个或两个星号将单个实参拆分为多个参数传入函数中。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcFour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;a normal function which needs two parameters&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

&lt;span class="n"&gt;paraMap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;paraList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;funcFour&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="c"&gt;#a normal function which needs two parameters&lt;/span&gt;
&lt;span class="n"&gt;funcFour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;paraMap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#1 2&lt;/span&gt;
&lt;span class="n"&gt;funcFour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;paraList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#3 4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;闭包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Python中函数的作用域可以嵌套，在函数内可定义另一个函数，并将其作为返回值。&lt;/p&gt;
&lt;p&gt;例如下文的例子，在外层函数中定义了一个内层函数，内层函数返回外层函数的参数arg1与内层函数的参数arg2的乘积，外层函数返回该函数。&lt;/p&gt;
&lt;p&gt;简单分析之，里外层函数均拥有自己的数据作用域，外层函数调用结束后自身的作用域应该被释放。然而，调用外层函数获取一个包含了自身作用域的函数，其中拥有外层函数的部分变量数据，这种情况称为闭包。&lt;/p&gt;
&lt;p&gt;其实自己还不是很懂，这货有待深究。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcCreator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;Function to create another function&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funcT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="s"&gt;&amp;quot;Function created by creator&amp;quot;&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;arg1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;arg2&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;funcT&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;funcCreator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="c"&gt;#Function to create another function&lt;/span&gt;
&lt;span class="n"&gt;func1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;funcCreator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;__doc__&lt;/span&gt;
&lt;span class="c"&gt;#Function created by creator&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;result of 123 * 5:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#result of 123 * 5: 615&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;scope&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;scope函数可获取当前状态下的数据空间，包含了变量和函数等基本信息。
要注意的是返回的字典不能随意更改，可能会造成未定义行为。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;vars&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果比较长：&lt;/p&gt;
&lt;p&gt;{'funcFour': &amp;lt;function funcFour at 0x1cf67d0&amp;gt;, 'func1': &amp;lt;function funcT at 0x1cf68c0&amp;gt;, '__builtins__': &amp;lt;module '__builtin__' (built-in)&amp;gt;, '__file__': 'func.py', 'funcThree': &amp;lt;function funcThree at 0x1cf6758&amp;gt;, 'funcCreator': &amp;lt;function funcCreator at 0x1cf6848&amp;gt;, 'funcOne': &amp;lt;function funcOne at 0x1cf6668&amp;gt;, '__package__': None, 'sayHello': &amp;lt;function sayHello at 0x1cf65f0&amp;gt;, 'scope': {...}, 'paraMap': {'y': 2, 'x': 1}, '__name__': '__main__', 'funcTwo': &amp;lt;function funcTwo at 0x1cf66e0&amp;gt;, '__doc__': None, 'paraList': [3, 4], 'listB': [1, 25, 3, 4]}&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
</summary><category term="Python"></category></entry><entry><title>socket编程(1):单线程tcp服务器/客户端</title><link href="/network001.html" rel="alternate"></link><updated>2013-09-17T15:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-17:network001.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;tcp的单线程socket比较简单，以下是GNU/Linux环境下socket通讯的测试，分为C++版本和Python版本。&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;服务器：&lt;/h2&gt;
&lt;p&gt;流程：创建socket-绑定端口-监听-获取连接-读写操作-关闭连接并结束&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++版本：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cerrno&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;//定义缓冲区的大小&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MAXBUF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//定义端口号&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;SERVER_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9876&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//服务器的socket识别码和客户机的socket识别码&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//结构体用来设置连接的属性&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//缓冲区用于获取和暂存数据&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAXBUF&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

        &lt;span class="c1"&gt;//创建socket连接，成功返回识别码，-1表示出错&lt;/span&gt;
        &lt;span class="c1"&gt;//AF_INET为ipv4连接，SOCK_STREAM为socket的类型&lt;/span&gt;
        &lt;span class="n"&gt;serverDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;creating socket error!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//初始化结构体并设定连接属性&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="c1"&gt;//设定接受所有本机ip的连接&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htonl&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;INADDR_ANY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="c1"&gt;//设定监听的端口号&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SERVER_PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;//绑定socket和ip端口，-1为出错&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sockaddr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;binding socket error!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="c1"&gt;//开始监听serverDes的socket，队列最长为10（最大的等待连接数）&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;listening socket error!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;

                &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="c1"&gt;//建立一个连接，-1为出错&lt;/span&gt;
                        &lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;accepting socket error!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;

                        &lt;span class="c1"&gt;//获取数据，写入buf缓冲区，数据量最长为MAXBUF，返回实际获取长度写入len&lt;/span&gt;
                        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAXBUF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;MAXBUF&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;{&lt;/span&gt;
                                &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MAXBUF&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="p"&gt;}&lt;/span&gt;

                        &lt;span class="c1"&gt;//输出获取的数据&lt;/span&gt;
                        &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;recieve from client:%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                        &lt;span class="c1"&gt;//关闭连接&lt;/span&gt;
                        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;continue?(y/n)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                        &lt;span class="k"&gt;else&lt;/span&gt;
                                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverDes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python版本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;长度对比那可真是...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;

&lt;span class="c"&gt;#创建socket，返回socket对象写入s&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#获取本机的ip&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gethostname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#设定端口号为4445&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4445&lt;/span&gt;
&lt;span class="c"&gt;#绑定socket对象到本机ip的端口上&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Server running...&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#开始监听，队列长度为5（与C++版本相同）&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c"&gt;#建立一个连接，返回客户端的socket对象和地址值（ip，port）&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Got connection from&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;
        &lt;span class="c"&gt;#接收数据&lt;/span&gt;
        &lt;span class="n"&gt;recieveMes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;message:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;recieveMes&lt;/span&gt;
        &lt;span class="c"&gt;#发送数据&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;Hello,world&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c"&gt;#关闭连接&lt;/span&gt;
        &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;客户机：&lt;/h2&gt;
&lt;p&gt;流程：创建socket-连接服务器IP和端口-读写操作-关闭连接并结束&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;C++版本：&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;cstdio&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstdlib&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;cstring&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;errno.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/types.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include &amp;lt;arpa/inet.h&amp;gt;&lt;/span&gt;

&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;MAX_BUF&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4096&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;9876&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//设定连接到localhost上&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//客户端的socket识别码&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;//缓冲区&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_BUF&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="c1"&gt;//结构体&lt;/span&gt;
        &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="c1"&gt;//创建socket&lt;/span&gt;
        &lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;creating socket failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;try&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="c1"&gt;//初始化并设置连接参数，AF_INET,host,port与前文相似&lt;/span&gt;
                &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_family&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;htons&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;PORT&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s_addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inet_addr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="c1"&gt;//连接到服务器&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;serverAddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;connecting socket failed!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;connection success!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;enter your message:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="c1"&gt;//发射数据&lt;/span&gt;
                &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="n"&gt;throw&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sending message failed!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;mes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;error:%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="c1"&gt;//关闭连接&lt;/span&gt;
        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clientDes&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Python版本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;就不怎么解释了，一样的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!usr/bin/python&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c"&gt;#host = socket.gethostname()&lt;/span&gt;
&lt;span class="n"&gt;host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4445&lt;/span&gt;

&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;send some message:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;From server:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;get data:&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，socket单线程tcp服务器和客户机就出来了。&lt;/p&gt;
&lt;p&gt;服务器启动后监听端口，直到有客户机请求连接，开启正常通讯。&lt;/p&gt;
&lt;p&gt;当服务器未启动的情况下启动客户机，客户机直接抛异常，显示连接失败。&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;strong&gt;下一篇：socket单线程udp服务器和客户机&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="socket"></category></entry><entry><title>Python 笔记（二）</title><link href="/Python002.html" rel="alternate"></link><updated>2013-09-13T22:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-13:Python002.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的笔记和想法，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3，&lt;/strong&gt;
&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;strong&gt;字典&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字典类似C++中STL的map，可保存键/值映射关系。但Python的字典比C++的简便得多。&lt;/p&gt;
&lt;p&gt;创建字典的几种方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mapOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;szy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="c"&gt;#创建有俩映射的字典&lt;/span&gt;
&lt;span class="n"&gt;mapTwo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="c"&gt;#空字典&lt;/span&gt;
&lt;span class="c"&gt;#dict函数创建字典&lt;/span&gt;
&lt;span class="n"&gt;mapThree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;szy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;85&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于字典的基本函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#键/值对的数量&lt;/span&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#2&lt;/span&gt;
&lt;span class="c"&gt;#取值&lt;/span&gt;
&lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#&amp;#39;szy&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#赋值&lt;/span&gt;
&lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;scutLaoYi&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#&amp;#39;scutLaoYi&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#删除映射&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#mapOne == {&amp;#39;age&amp;#39;:85}&lt;/span&gt;
&lt;span class="c"&gt;#检测是否存在映射关系&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;age&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;
&lt;span class="c"&gt;#True&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;
&lt;span class="c"&gt;#False&lt;/span&gt;
&lt;span class="c"&gt;#新建映射只需要直接赋值，键不用预先存在&lt;/span&gt;
&lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;szy&amp;#39;&lt;/span&gt;
&lt;span class="c"&gt;#mapOne == {&amp;#39;name&amp;#39;:&amp;#39;szy&amp;#39;, &amp;#39;age&amp;#39;:85}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;利用字典格式化字符串&lt;/p&gt;
&lt;p&gt;这个功能非常好用，在大量使用到某个字典的时候可以不用每次去一个个赋值，只需要把字典作为参数传入即可
注意括号后有个s&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;formatStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;name: &lt;/span&gt;&lt;span class="si"&gt;%(name)s&lt;/span&gt;&lt;span class="s"&gt;, age:&lt;/span&gt;&lt;span class="si"&gt;%(age)s&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;formatStr&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;
&lt;span class="c"&gt;#name: szy, age:85&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;字典其他常用函数&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;:clear&lt;/p&gt;
&lt;p&gt;清空字典&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mapThree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#mapThree == {}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;:copy&lt;/p&gt;
&lt;p&gt;浅复制，复制的仅仅是字典，当值为列表等对象时复制的是对象的引用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mapFour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;:get&lt;/p&gt;
&lt;p&gt;获取值，若不存在则返回默认值&lt;/p&gt;
&lt;p&gt;这个函数可以防止由于键/值对不存在导致的抛出异常
默认不存在返回None，可设定第二个参数为返回值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mapThree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;height&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#None&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mapThree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;149cm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#149cm&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#szy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;:items&lt;/p&gt;
&lt;p&gt;获取所有键/值对的元组，以列表方式返回&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt;
&lt;span class="c"&gt;#[(&amp;#39;age&amp;#39;, 85), (&amp;#39;name&amp;#39;, &amp;#39;szy&amp;#39;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;:iteritems&lt;/p&gt;
&lt;p&gt;返回所有键值对的迭代器&lt;/p&gt;
&lt;p&gt;由于迭代器暂时没有开始研究，在此跳过&lt;/p&gt;
&lt;p&gt;:keys&lt;/p&gt;
&lt;p&gt;获取所有键的列表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#[&amp;#39;age&amp;#39;, &amp;#39;name&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;:values&lt;/p&gt;
&lt;p&gt;获取所有值的列表&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#[85, &amp;#39;szy&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;:pop&lt;/p&gt;
&lt;p&gt;返回键的值并删除键/值对&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#szy&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mapOne&lt;/span&gt;
&lt;span class="c"&gt;#{&amp;#39;age&amp;#39;: 85}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;:popitem&lt;/p&gt;
&lt;p&gt;随机弹出并删除键/值对，用于遍历和清空字典且不知道键值对的情况&lt;/p&gt;
&lt;p&gt;:setdefault(a, b)&lt;/p&gt;
&lt;p&gt;键a不存在则设置为b，键a存在则返回a的当前值，均返回a的值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;scutLaoYi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#&amp;#39;scutLaoYi&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;mapOne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;szy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#&amp;#39;scutLaoYi&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;strong&gt;赋值的其他形式&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#调用函数返回的元组可直接给多个变量赋值&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="c"&gt;#值交换&lt;/span&gt;
&lt;span class="c"&gt;#数量不一致时抛异常&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;布尔值&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;False: False, None, 0(所有数值类型), [], (), {}&lt;/p&gt;
&lt;p&gt;True: 上述值外的一切均为True&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;条件判断&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Enter a number:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;num &amp;gt; 0&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;num &amp;lt; -10&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;num &amp;lt; 0&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;num == 0&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;numOne&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;numTwo&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;nothing...&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;numOne&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;numTwo&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;also nothing...&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;新奇的条件判断&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="c"&gt;#相同对象&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="c"&gt;#y容器中包含x&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt; &lt;span class="c"&gt;#age在(0,100)范围内（比C++爽）&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;断言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当断言被触发的时候条件语句后面的字符串会被输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number &amp;lt; 100&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey! num is not less than 100!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;简单的循环&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;so many string ...&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;strOne&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey!This is a string&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;strOne&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#[0, 1, 2, 3, 4]&lt;/span&gt;
&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#[0, 2, 4, 6, 8]&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;zip迭代&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意该函数终止于短序列的结束&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#[(&amp;#39;a&amp;#39;, 1), (&amp;#39;b&amp;#39;, 2), (&amp;#39;c&amp;#39;, 3)]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;获取索引值的循环&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c"&gt;#...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;break, continue, else&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;else在循环正常退出(非break)后执行&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;num &amp;lt; 100:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;num == 100&amp;quot;&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;num &amp;gt;= 100&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;列表推导式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python一个牛逼的功能，可以大幅度拓展for循环的能力&lt;/p&gt;
&lt;p&gt;基本语法： [(算术表达式用于获取结果) for arg1 in stage1 (for arg2 in stage2...) (if ...)]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="c"&gt;#[1, 4, 9, 16, 25, 36, 49, 64, 81]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="c"&gt;#[1, 3, 2, 6, 3, 9, 4, 12]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#[2, 4, 6, 4, 6, 8, 6, 8, 10, 8, 10, 12]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;pass&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;无话可说的时候就用这个苟延残喘一下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;span class="c"&gt;# -_-\\\&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;exec&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;可将其后的字符串作为Python语句执行
这种做法在字符串为用户输入时非常危险
类似的还有os.system('...')，虽然我自己一直在用 ^_^&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;print &amp;#39;Hello!&amp;#39;&amp;quot;&lt;/span&gt;
&lt;span class="c"&gt;#Hello!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;默认情况下exec与外部代码共享命名空间
可以限定命名空间使其与外部隔离，方法是给个字典，键为变量名，值为变量值
限定命名空间可限制内层代码的作用范围，防止命名污染，有助于提高安全性&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;scope&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;szy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;exec&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;print x&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;scope&lt;/span&gt;
&lt;span class="c"&gt;#szy&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
</summary><category term="Python"></category></entry><entry><title>Python 笔记（一）</title><link href="/Python001.html" rel="alternate"></link><updated>2013-09-11T15:30:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-11:Python001.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;本系列博文记录学习Python过程的笔记和想法，简单而狗血，杂乱而无章，主要目的是方便来日查看。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用的Python版本为2.7.3，&lt;/strong&gt;
&lt;strong&gt;在GNU/Linux Ubuntu 12.04LTS操作系统下实现和测试&lt;/strong&gt;&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;strong&gt;脚本声明和中文编码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在Python脚本的首行和次行添加以下命令可在命令行调用，并设置编码为中文gb2312：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class="c"&gt;# -*- coding:gb2312 -*-&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python的注释以#开始，单行注释&lt;/p&gt;
&lt;p&gt;单句Python语句占一行时结尾不用任何符号，多句时用分号分割，但极不推荐此种风格。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;字符串有三种写法，单引号或双引号包围的单行字符串（可用反斜杠连接多行），或者三个单引号或双引号跨多行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#简单的输出语句，包含三种字符串形式&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;Hello,python!&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;u&amp;quot;中文是可以支持的.&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;u&amp;#39;&amp;#39;&amp;#39;字符串的第三种格式&lt;/span&gt;
&lt;span class="s"&gt;跨行字符串:用三个单引号或双引号约束。&lt;/span&gt;
&lt;span class="s"&gt;前方的u使该字符串作为unicode编码，正确处理中文。&lt;/span&gt;
&lt;span class="s"&gt;&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;原始字符串&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#普通字符串和原始字符串（r），原始字符串不进行自动转义&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;This is a normal string: C:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;ow\print&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;he\location\in\windows&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;r&amp;quot;This is a raw string with same content:C:\now\print\the\location\in\windows&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;变量&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python的变量不用声明类型，据说这种风格为鸭子类型，关于鸭子类型以后研究清楚了再详细记录。算术操作与C++类似，简单的赋值等操作如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#单个菊花为乘法，双菊花为求幂&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; ** 3 = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;scutlaoyi.github.com&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s"&gt; is my blog~&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于print的补充：print可类似C的printf，参数列表前用百分号，参数列表使用元组包括。单个参数可省略元组的括号。print也可连接多个元素，使用逗号分隔，其输出为同一行。&lt;/p&gt;
&lt;p&gt;Python会在print后自动添加换行，方便操作，若不想换行，在print行最末添加逗号即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;这行不会自动换行&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;命令行获取用户输入&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;获取用户输入有两种方式，input和raw_input，均读取一行，
但input将内容当作Python语句处理，raw_input直接当成字符串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#raw_input:获取用户输入，全部当成字符串&lt;/span&gt;
&lt;span class="n"&gt;usrInput&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;write something:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;you have typed:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usrInput&lt;/span&gt;

&lt;span class="c"&gt;#input:获取用户输入，将内容当作Python语句&lt;/span&gt;
&lt;span class="n"&gt;usrInNum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Give me a number:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt; * 2 = &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;usrInNum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;usrInNum&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python拥有强大的内置数据结构，列表、元组和字典，类似于C++标准库中的vector，提供了丰富的功能。
列表与元组类似，但列表可更改，元组不可更改。列表用[]包括，元组用()包括。&lt;/p&gt;
&lt;p&gt;关于列表的操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;strList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;strList&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;is from list(&amp;#39;hello&amp;#39;)&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The list is :&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;
&lt;span class="c"&gt;#正向索引&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The second one in list:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#逆向索引，倒数第一个&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The last one in list:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#切片操作，从首个到第三个(不包含第四个)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The first to the third elements in list:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#步进为2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The first, third, fifth elements in list:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;List length:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Max number in list:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Min number in list:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#列表的编辑操作&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;The second one of list has been changed to &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;After deleting the sixth element, length of list is:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Change from the sixth elements:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;151&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;bList&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bList&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;After appending and extending, the aList is:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pop the last one:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;pop the first one:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;151&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;remove the 151 in aList:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;

&lt;span class="c"&gt;#查找&lt;/span&gt;
&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;the index of 10 in aList is:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;ind&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;sorted:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;
&lt;span class="n"&gt;aList&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;reversed:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aList&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;元组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;创建元组的几种方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tupleA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,)&lt;/span&gt;
&lt;span class="n"&gt;tupleB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;tupleC&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;元组的基本操作与list类似，但不能更改，在此不再赘述。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符串的补充方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;find：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;strA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hey!My name is szy!&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#ind == 4&lt;/span&gt;
&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;scutLaoYi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#ind == -1&lt;/span&gt;
&lt;span class="n"&gt;ind&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;My&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#ind == -1, 定义起点终点&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;join:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#注意join的另一方为字符串列表&lt;/span&gt;
&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#result == &amp;quot;1/2/3/4&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;split:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#类似join的反向操作&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#[&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;lower:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;upStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;AbCdE&amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;upStr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#abcde&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;upper:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;upStr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#ABCDE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;replace:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;upStr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#abCdE&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;strip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;longStr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;  !! This is a string with some rubbish  ~~ &amp;quot;&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;longStr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c"&gt;#!! This is a string with some rubbish.  ~~&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;longStr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;#39; !~&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;#This is a string with some rubbish.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他大量内置的方法可查看documentation.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;更多Python学习，推荐：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;简明Python教程： &lt;a class="reference external" href="http://www.2cto.com/shouce/pythonjc/index.html"&gt;http://www.2cto.com/shouce/pythonjc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;《Python基础教程》&lt;/p&gt;
&lt;/blockquote&gt;
</summary><category term="Python"></category></entry><entry><title>Git 与 GitHub 不完全教程（二）</title><link href="/learning%20Git%202.html" rel="alternate"></link><updated>2013-09-07T16:10:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-07:learning Git 2.html</id><summary type="html">&lt;div class="section" id="id1"&gt;
&lt;h2&gt;分支&lt;/h2&gt;
&lt;p&gt;分支(branch)是Git的一个强大功能，它可以在不改变现有仓库、不新增仓库的情况下，通过新建一个分支以建立当前文档一模一样的支线版本，在支线版本的修改不影响主线文档的内容。&lt;/p&gt;
&lt;p&gt;分支的一个重要的功能是能够在同一个时间点上保存多份不同版本的代码，并且均为随时可用的状态，根据官方的一个示例，你可以保持一份稳定的发布版，在发布版内的代码都是可运行的，之后，你可以再拥有一个分支专门用于开发，在这上面的代码用于任意修改和处理，不对外，还能再有一个分支用于测试开发新的功能。这三个分支都可以随时切换随时合并，应变自如。&lt;/p&gt;
&lt;p&gt;当支线任务成功完成时，可通过命令简单地将支线版本合并到主线上，若由于手潮不幸把事情搞砸了，可直接删除支线，回到主线上，则原有的文档内容不受任何影响。这种功能特别适合在当前状态下需要测试开发一些新的功能，但又想要与主线的开发有所并行的情况。&lt;/p&gt;
&lt;p&gt;默认情况下，git创建完仓库后会生成一个主分支master，所有的操作均在主分支上进行，这就相当于文档的主线版本。而我们可以按自己的需要增删改查新的分支。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分支的创建和切换&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;显示当前仓库的分支状态:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git branch
&lt;/pre&gt;
&lt;p&gt;Git会列表显示当前的所有分支，并在当前所在分支上作相应标记。
新建分支（假设需要新建的分支名字为:newBranch）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git branch newBranch
&lt;/pre&gt;
&lt;p&gt;此时再次检查branch状态就会发现新的分支已经出现了。
新的分支和现有的分支内容完全相同，相当于当前分支的一个副本。
跳转到某个分支:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git checkout newBranch
&lt;/pre&gt;
&lt;p&gt;即可。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分支的删除&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git branch -d XXX
&lt;/pre&gt;
&lt;p&gt;完成了分支的转换后，分支内的操作与前文的基本操作一致。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;分支的合并&lt;/strong&gt;&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;1.最简单的合并&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;新建的分支在原来分支的基础上出现了新的变更，而原来的分支没有变化。此时的合并操作只需要直接把新分支的内容合并到原有分支即可。&lt;/p&gt;
&lt;p&gt;假设有两个branch: master &amp;amp;&amp;amp; newChange, newChange从master而来，newChange发生了一次新的提交，而master没有变化。此时需要将newChange合并到master上，需要做的是切换到master分支，然后执行如下指令:&lt;/p&gt;
&lt;pre class="last literal-block"&gt;
git merge newChange
&lt;/pre&gt;
&lt;/dd&gt;
&lt;dt&gt;2.比较复杂的合并&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;新建的分支和原来的分支均产生了更改，然而更改的内容没有冲突，即修改了原有内容的不同部分或者根本没有修改到同一个文件，这种情况下Git会自动进行处理，将新的修改自动合并到分支中来。使用的命令与前面的命令一样。&lt;/p&gt;
&lt;p class="last"&gt;所产生的变化是，这种情况下合并操作类似commit，我在测试的时候Git提示需要输入合并的说明信息。合并后调用git log发现多了一次merge记录，与commit操作一样存在记录。&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;3.最后一种最复杂的情况&lt;/dt&gt;
&lt;dd&gt;&lt;p class="first"&gt;不仅两个分支产生了更改，还更改了相同的部分，这就产生了合并的冲突，Git的自动合并失败，此时需要做的是自己处理冲突并再次提交。&lt;/p&gt;
&lt;p&gt;假设当前有分支branchOne &amp;amp;&amp;amp; branchTwo，均从master分支而来，master分支原有一个readme文档。branchOne &amp;amp;&amp;amp; branchTwo各自在文档的最后添加了一行新的不同的内容，并各自提交。此时，在branchTwo分之下调用 “git merge branchOne”，Git会提示冲突出现:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.
&lt;/pre&gt;
&lt;p class="last"&gt;在这种情况下，打开提示冲突的文档，你会发现所有冲突的地方Git均做了标记，HEAD后的内容为当前分支的版本，”======”分割后下方的为合并方的版本，需要做的是删除所有标记，保留自己想要的版本。在处理完所有冲突后，再次add 和commit即可。&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="remote"&gt;
&lt;h2&gt;远端仓库（remote）&lt;/h2&gt;
&lt;p&gt;远端仓库，就是架设在其他机器上的Git仓库，通过互联网连接后可通过Git获取和修改远端仓库的数据，达到协作的目的。比较有名的免费公有仓库是GitHub：
&lt;a class="reference external" href="https://github.com"&gt;https://github.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在此以GitHub为例记录Git中关于远端仓库的若干使用步骤。&lt;/p&gt;
&lt;p&gt;假设需要使用的远端仓库为我的操作系统大作业仓库：
&lt;a class="reference external" href="https://github.com/scutLaoYi/operating-system-solution.git"&gt;https://github.com/scutLaoYi/operating-system-solution.git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;从远端仓库直接将仓库复制到本地&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行如下命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git clone https://github.com/scutLaoYi/operating-system-solution.git
&lt;/pre&gt;
&lt;p&gt;成功完成后在当前目录下就会出现一个文件夹里面存放了该仓库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;获取当前的远端仓库列表&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;进入仓库目录，使用命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git remote
&lt;/pre&gt;
&lt;p&gt;如果使用的是clone命令复制仓库，则存在一个origin的remote。否则remote得到空的仓库列表。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;将远端仓库添加到remote列表中&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git remote add newRemote https://github.com/scutLaoYi/operating-system-solution.git
&lt;/pre&gt;
&lt;p&gt;此时将该仓库地址添加到remote列表中，名字为newRemote.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用pull命令从远端仓库拉取新版本&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git pull newRemote master:another
&lt;/pre&gt;
&lt;p&gt;此句将远端仓库newRemote中的master分支拉取到本地的another分支中。这里要注意分支的顺序，前面的是远端仓库的分支名，冒号后的为本地分支的名字。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;推送本地仓库到远端&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git push newRemote master:remoteBranch
&lt;/pre&gt;
&lt;p&gt;向newRemote远端仓库的remoteBranch分支推送本地仓库的master分支。&lt;/p&gt;
&lt;p&gt;需要用户名和密码完成认证。自行测试的时候貌似还认证了邮箱。&lt;/p&gt;
&lt;p&gt;远端仓库的基本操作到此为之。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h2&gt;杂七杂八的破玩意儿&lt;/h2&gt;
&lt;p&gt;最后聊一下Git工具的proxy连接，由于千奇百怪的网络问题，很容易导致Git与GitHub服务器的连接失败，这种情况下如果手头有一些生龙活虎的proxy工具，可以通过其跳转使Git连接到GitHub服务器，完成工作。&lt;/p&gt;
&lt;p&gt;本人使用的是简单的http连接方式，Git配置http的proxy十分方便，如下命令即可:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git config –global http.proxy XXX.XXX.XXX.XXX:XXXX
&lt;/pre&gt;
&lt;p&gt;XXX里填的是proxy的地址和端口号
某些工具需要ssl证书，简单地可以直接关闭Git的证书验证:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git config --global http.sslVerify false
&lt;/pre&gt;
&lt;p&gt;或者通过以下命令指定证书的路径（此方法未测试）:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git config --global http.sslCAinfo XXX/XXX/XXX
&lt;/pre&gt;
&lt;p&gt;至于proxy的相关内容不在本帖讨论范围。&lt;/p&gt;
&lt;p&gt;ps:在敲完这篇东西之后，收到了一个振奋人心的消息，校园网的国际端口开通了，使用GitHub再也不用费劲心思，真是可喜可贺， &lt;em&gt;弹冠相庆&lt;/em&gt; 啊哈哈哈～&lt;/p&gt;
&lt;p&gt;~~~~~~~~~~~~正文完~~~~~~~~~~~~~~~~~~~&lt;/p&gt;
&lt;p&gt;下一篇，稍微聊一下GitHub上的一些玩法～&lt;/p&gt;
&lt;/div&gt;
</summary><category term="git"></category><category term="github"></category></entry><entry><title>Git 与 GitHub 不完全教程（一）</title><link href="/learning%20Git%201.html" rel="alternate"></link><updated>2013-09-07T16:00:00+08:00</updated><author><name>laoyi</name></author><id>tag:,2013-09-07:learning Git 1.html</id><summary type="html">&lt;p&gt;git是常用的配置管理工具，关于Git的介绍请见维基百科（维基百科关于Git的介绍），Github是常用的代码托管服务（维基百科关于GitHub的介绍），在此敲一份扫盲和不完全配置帖，留待日后自己可查看，顺带给大家方便学习。&lt;/p&gt;
&lt;p&gt;由于时间有限，仅记录最简单的终端界面下Git的使用，自认为已经足够，如更喜欢GUI界面风格请自行脑补。&lt;/p&gt;
&lt;p&gt;本文档操作环境为GNU/Linux Ubuntu 12.04 LTS x64，为方便windows用户，在配置时添加了windows下的安装配置过程，不保证万无一失。&lt;/p&gt;
&lt;div class="section" id="git"&gt;
&lt;h2&gt;Git篇：&lt;/h2&gt;
&lt;div class="section" id="id1"&gt;
&lt;h3&gt;安装与配置git&lt;/h3&gt;
&lt;p&gt;Ubuntu: 简单:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sudo apt-get install git
&lt;/pre&gt;
&lt;p&gt;即可。&lt;/p&gt;
&lt;p&gt;以上代码没看懂的请别往下看了，扫盲Ubuntu先。&lt;/p&gt;
&lt;p&gt;windows:到这个网址下载:&lt;/p&gt;
&lt;blockquote&gt;
&lt;a class="reference external" href="http://msysgit.github.io/"&gt;http://msysgit.github.io/&lt;/a&gt;&lt;/blockquote&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;或者git官网下载:&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://git-scm.com/download/win"&gt;http://git-scm.com/download/win&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;安装即可。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;首次使用&lt;/h3&gt;
&lt;p&gt;windows下使用终端的Git需要启动Git自带的终端，而不是windows的命令行，
一般在安装后有一个叫做Git bash的东西，启动之即可。暂时不要使用Git GUI，如果有的话。&lt;/p&gt;
&lt;p&gt;Ubuntu下则比较简单，直接启动终端即可，终端可直接调用Git的命令。&lt;/p&gt;
&lt;p&gt;首次使用必须指定用户的用户名和邮箱，这个据说在提交代码的时候会作为标识出现。&lt;/p&gt;
&lt;p&gt;敲入以下代码:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git config --global user.name &amp;quot;John Doe&amp;quot;
git config --global user.email johndoe&amp;#64;example.com
&lt;/pre&gt;
&lt;p&gt;并将其中的John Doe和 &lt;a class="reference external" href="mailto:johndoe&amp;#64;example.com"&gt;johndoe&amp;#64;example.com&lt;/a&gt; 替换为自己的名字和邮箱即可。&lt;/p&gt;
&lt;p&gt;之后便可以开始使用啦～&lt;/p&gt;
&lt;p&gt;此外，关于配置信息的补充说明：查看当前配置信息的命令是:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git config --list
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;正式开始&lt;/h3&gt;
&lt;p&gt;我们从本地的使用开始，众所周知，Git使用一种仓库的形式进行配置管理，仓库实际上是以某个文件夹作为根目录，其内容便是仓库中的内容。假设在当前目录下需要使用Git建立仓库，敲入命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git init
&lt;/pre&gt;
&lt;p&gt;即可完成新本地仓库的建立。
敲入该命令后会在本目录下自动建立一个.git文件保存Git所需的仓库信息，这个文件默认情况下是不可见的，一般也不需要手动更改。&lt;/p&gt;
&lt;p&gt;查看当前仓库的状态可敲命令:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git status
&lt;/pre&gt;
&lt;p&gt;仓库存在多种状态，若根本没有建立仓库，则状态为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
fatal: Not a git repository
&lt;/pre&gt;
&lt;p&gt;当建立好仓库并且没有新的更改产生时，状态为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# On branch master
#
# Initial commit
#
nothing to commit (create/copy files and use &amp;quot;git add&amp;quot; to track)
&lt;/pre&gt;
&lt;p&gt;对于我们建立的文件，存在若干种状态，已修改的，已添加的，和已提交的。
仓库的文件管理需要经过几个状态，被修改-&amp;gt;添加到提交列表-&amp;gt;提交仓库。
只有被提交到仓库中的文件才是真的储存到仓库中，否则只是在现有文件夹中。&lt;/p&gt;
&lt;p&gt;当我们在空仓库中新建一个readme.txt文件，并写入一些文本后，该文件在仓库中的状态便为已修改。此时仓库状态为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# On branch master
#
# Initial commit
#
# Untracked files:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to include in what will be committed)
#
# readme.txt
othing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)
&lt;/pre&gt;
&lt;p&gt;该状态表示有一个新文件状态为untracked，仅仅发生了更改，没有添加到提交列表，也没有提交。&lt;/p&gt;
&lt;p&gt;此时，使用命令: &amp;quot;git add&amp;quot;可以添加文件到提交列表中。git add后连接文件名或者目录项，例如:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git add . #将当前文件夹中被修改且未添加到提交列表中的文件全部添加
git add abc.def #将当前文件夹中abc.def文件添加到提交列表中
git add *.abc #将所有后缀为abc的文件添加到提交列表中
&lt;/pre&gt;
&lt;p&gt;因此，使用 &amp;quot;git add .&amp;quot; 将上文的readme.txt加入提交列表，仓库的状态变为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use &amp;quot;git rm --cached &amp;lt;file&amp;gt;...&amp;quot; to unstage)
#
# new file:   readme.txt
&lt;/pre&gt;
&lt;p&gt;在添加后的状态下我们可以将列表中的文件提交到仓库中，作为一个版本。每提交一次就相当于在仓库中保存了提交状态的一个文件副本。只要仓库没死掉（地震、火灾、海啸或其他因素导致硬盘数据丢失），就可以通过提交的识别码恢复到某个提交状态。
提交的指令为：&amp;quot;git commit&amp;quot; 每一份提交都需要一段说明信息作为标记，以供日后查找识别某个版本。
上面的提交指令敲入后git会启动一个文本编辑界面供用户输入说明信息。
有一个便捷的操作，如果想要提交的说明信息比较简短，可以在commit后添加-m参数并直接连接字符串，该字符串便成为说明信息，示例如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git commit -m &amp;quot;initial commit&amp;quot;
&lt;/pre&gt;
&lt;p&gt;提交完所有被修改的文件后，仓库重新返回状态:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# On branch master
nothing to commit (working directory clean)
&lt;/pre&gt;
&lt;p&gt;那么，仓库中的数据如何被有效利用呢？这里分为两种情况：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.仓库上一次提交后，有了新的修改，且目前想要回复到提交后的原始状态：&lt;/p&gt;
&lt;p&gt;假设readme.txt提交后的原始信息为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Hey!
It's some change.
&lt;/pre&gt;
&lt;p&gt;发生了修改，变成这样子了(-_-|||):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Hey! My name is szy. I'm from scut!
It's sunny today~
&lt;/pre&gt;
&lt;p&gt;此时没有add也没有commit，git的状态为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# On branch master
# Changes not staged for commit:
#   (use &amp;quot;git add &amp;lt;file&amp;gt;...&amp;quot; to update what will be committed)
#   (use &amp;quot;git checkout -- &amp;lt;file&amp;gt;...&amp;quot; to discard changes in working directory)
#
# modified:   readme.txt
#
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;很明显，git也告诉我们了，使用checkout命令可以从仓库中取出文件副本覆盖现有的被修改文件:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git checkout -- readme.txt
&lt;/pre&gt;
&lt;p&gt;执行后就能得到原始的readme版本了:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Hey!
It's some change.
&lt;/pre&gt;
&lt;p&gt;2.仓库的修改已提交，想要返回某个历史版本：&lt;/p&gt;
&lt;p&gt;这种情况下新的修改已经作为一个版本记录到仓库里了，想要返回某个历史版本，首先需要查看所有历史版本，命令为:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
git log
&lt;/pre&gt;
&lt;p&gt;终端会返回每一个历史版本的提交信息（就是之前敲的那个字符串）和提交的代号等，大概如下:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
commit d4e8fb1393d5bcf4044b06c35869177037ab5da9
Author: scutLaoYi &amp;lt;HelloWorld636596&amp;#64;126.com&amp;gt;
Date:   Tue Sep 3 15:50:23 2013 +0800

    change

commit 3cf8790b69961b317ea75e326271379840c541c2
Author: scutLaoYi &amp;lt;HelloWorld636596&amp;#64;126.com&amp;gt;
Date:   Tue Sep 3 15:36:52 2013 +0800

    initial commit.
&lt;/pre&gt;
&lt;p&gt;上述的内容显示了两个历史版本，commit后接的一串代码为提交代号，Date下方的文本为提交信息。找到自己需要的版本，记录版本号，使用git reset命令便可返回到对应版本。注意，只是仓库返回了对应版本，文件仍为修改后版本，若确定没有必要保存新的修改数据，想直接返回到历史版本，就在这个情况下调用 checkout命令恢复即可。但小心这个操作会完全覆盖掉新的更改。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;基本上git的菜鸟级操作就有如上几个，懂的这些命令就可以在自己本地实施配置管理啦。&lt;/p&gt;
&lt;p&gt;下一篇将聊一下branch以及远端仓库和GitHub的使用，外加一些VPN的内容。&lt;/p&gt;
&lt;p&gt;参考文档：Git-Documentation:
&lt;a class="reference external" href="http://git-scm.com/documentation"&gt;http://git-scm.com/documentation&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="git"></category><category term="github"></category></entry></feed>